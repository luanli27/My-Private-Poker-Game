// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appprotobuf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from appprotobuf.proto</summary>
public static partial class AppprotobufReflection {

  #region Descriptor
  /// <summary>File descriptor for appprotobuf.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static AppprotobufReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChFhcHBwcm90b2J1Zi5wcm90byJjCg1IYWxsQ29tbW9uTnRmEgwKBFR5cGUY",
          "ASABKAUSDgoGVXNlcklEGAIgASgFEhQKDFRhcmdldFVzZXJJRBgDIAEoBRIO",
          "CgZTdGF0dXMYBCABKAUSDgoGR2FtZUlEGAUgASgFIs4BCg5SZXFQbGF5ZXJM",
          "b2dpbhIQCghVc2VyTmFtZRgBIAEoCRIPCgdDaGFubmVsGAIgASgFEg0KBVRv",
          "a2VuGAMgASgJEg4KBlJlZ2lvbhgEIAEoCRIOCgZHYW1lSUQYBSABKAUSFwoC",
          "cGkYBiABKAsyCy5QbGF5ZXJJbmZvEg4KBlVzZXJJRBgHIAEoBRIMCgRHcHNY",
          "GAggASgJEgwKBEdwc1kYCSABKAkSEQoJVmVyc2lvbkpTGAogASgJEhIKClZl",
          "cnNpb25BcGsYCyABKAkirgIKDkFja1BsYXllckxvZ2luEg4KBlVzZXJJRBgB",
          "IAEoBRIOCgZSZXN1bHQYAiABKAUSFwoCcGkYAyABKAsyCy5QbGF5ZXJJbmZv",
          "EhEKCUNhcmRDb3VudBgEIAEoBRISCgpPd25UYWJsZUlEGAUgASgFEg8KB1Rh",
          "YmxlSUQYBiABKAUSDgoGR2FtZUlEGAcgASgFEhEKCU93bkdhbWVJRBgIIAEo",
          "BRIUCgxBc3Npc3RTdGF0dXMYCSABKAUSEAoIQ2x1Ykxpc3QYCiADKAUSDgoG",
          "Q2x1YklEGAsgASgFEg4KBlJvb21JRBgMIAEoBRIUCgxNYXhSb29tQ291bnQY",
          "DSABKAUSFwoPTWF4VmlwUm9vbUNvdW50GA4gASgFEhEKCVJvb21BZG1pbhgP",
          "IAEoBSI1ChNPR0dhdGVSZXFLaWNrUGVvcGxlEg4KBlVzZXJJRBgBIAEoBRIO",
          "CgZSZWFzb24YAiABKAUiZAoIUmVxQnJlYWsSDgoGVXNlcklEGAEgASgFEg8K",
          "B1RhYmxlSUQYAiABKAUSDgoGR2FtZUlEGAMgASgFEhQKDFRhcmdldFVzZXJJ",
          "RBgEIAEoBRIRCglCcmVha1R5cGUYBSABKAUicQoMUmVxQ2hhbmdlUG9zEg4K",
          "BlVzZXJJRBgBIAEoBRIUCgxUYXJnZXRVc2VySUQYAiABKAUSDAoER3BzWBgD",
          "IAEoCRIMCgRHcHNZGAQgASgJEg8KB1RhYmxlSUQYBSABKAUSDgoGR2FtZUlE",
          "GAYgASgFIsECCgpQbGF5ZXJJbmZvEg4KBlVzZXJJRBgBIAEoBRIPCgdDaGFu",
          "bmVsGAIgASgFEhAKCE5pY2tOYW1lGAMgASgJEgsKA1NleBgEIAEoBRISCgpI",
          "ZWFkSW1nVXJsGAUgASgJEhEKCUlwQWRkcmVzcxgGIAEoDRIVCg1HYXRlSXBB",
          "ZGRyZXNzGAcgASgNEhAKCFVzZXJOYW1lGAggASgJEg8KB1VzZXJTaXQYCSAB",
          "KAUSDwoHVGFibGVJRBgKIAEoBRIRCglDYXJkQ291bnQYCyABKAUSDgoGR2Ft",
          "ZUlEGAwgASgFEgwKBENpdHkYDSABKAkSEAoISWROdW1iZXIYDiABKAkSEAoI",
          "UmVhbE5hbWUYDyABKAkSDAoER3BzWBgQIAEoCRIMCgRHcHNZGBEgASgJEhAK",
          "CFByb21vdElEGBIgASgFImEKD1BsYXllclRhYmxlSW5mbxIOCgZVc2VySUQY",
          "ASABKAUSDgoGU3RhdHVzGAIgASgFEgwKBFNlYXQYAyABKAUSDwoHSXNQYXll",
          "ZBgEIAEoBRIPCgdJc1JlYWR5GAUgASgFIkEKDlJlcVJlZnJlc2hDYXJkEg4K",
          "BlVzZXJJRBgBIAEoBRIOCgZHYW1lSUQYAiABKAUSDwoHQ2hhbm5lbBgDIAEo",
          "BSJDCg5BY2tSZWZyZXNoQ2FyZBIOCgZVc2VySUQYASABKAUSDgoGUmVzdWx0",
          "GAIgASgFEhEKCUNhcmRDb3VudBgDIAEoBSIpCglSZXFOb3RpY2USDAoEdGlt",
          "ZRgBIAEoCRIOCgZHYW1lSUQYAiABKAUiiQEKCUFja05vdGljZRIOCgZSZXN1",
          "bHQYASABKAUSDgoGTm90aWNlGAIgASgJEhIKCk5ld1ZlcnNpb24YAyABKAkS",
          "EgoKUm9sbGluZ01zZxgEIAEoCRIRCglUaWNrQ291bnQYBSABKAUSEQoJQ2Fj",
          "aGVUaW1lGAYgASgFEg4KBkdhbWVJRBgHIAEoBSK4AQoKUmVxQ2hhdE1zZxIO",
          "CgZVc2VySUQYASABKAUSDwoHVGFibGVJRBgCIAEoBRIOCgZSZXN1bHQYAyAB",
          "KAUSEAoISW5kZXhNc2cYBCABKAUSDwoHVGV4dE1zZxgFIAEoCRIQCghTb3Vu",
          "ZE1zZxgGIAEoCRIUCgxUYXJnZXRVc2VySUQYByABKAUSDgoGR2FtZUlEGAgg",
          "ASgFEhAKCFVzZXJJRFRvGAkgASgFEgwKBFR5cGUYCiABKAUijgIKCVRhYmxl",
          "UnVsZRIOCgZSdWxlSUQYASABKAUSEwoLUGxheWVyQ291bnQYAiABKAUSFgoO",
          "UGxheWVyQ291bnRNaW4YAyABKAUSDQoFUm91bmQYBCABKAUSHwoKcnVsZXJ1",
          "bm91dBgFIAEoCzILLlJ1bGVSdW5vdXQSGgoIcnVsZXJkZHoYBiABKAsyCC5S",
          "dWxlRERaEhcKBnJ1bGVKUxgHIAEoCzIHLlJ1bGVKUxIYCgdydWxlcmdkGAgg",
          "ASgLMgcuUnVsZUdEEg8KB3J1bGVTdHIYCSABKAkSFwoGcnVsZUNZGAogASgL",
          "MgcuUnVsZUNZEhsKCHJ1bGVkZGE1GAsgASgLMgkuUnVsZUREQTUiowIKBlJ1",
          "bGVKUxIQCghIdW5Db3VudBgBIAEoBRIOCgZIdVR5cGUYAiABKAUSDAoERmVu",
          "ZxgDIAEoBRIPCgdCYW9UaW5nGAQgASgFEhIKClhpYVp1aVR5cGUYBSABKAUS",
          "FQoNWWlQYW9EdW9YaWFuZxgGIAEoBRISCgpIdUZhbmxpbWl0GAcgASgFEhEK",
          "CW5aaU1vVHlwZRgIIAEoBRIUCgxuR2FuZ0h1YVR5cGUYCSABKAUSFgoObkh1",
          "YW5aaGFuZ1R5cGUYCiABKAUSFwoPbllhb0ppdUppYW5nRHVpGAsgASgFEhoK",
          "Em5NZW5RaW5nWmhvbmdaaGFuZxgMIAEoBRIRCgluVGlhbkRpSHUYDSABKAUS",
          "EAoIblRpbmdQYWkYDiABKAUihwYKBlJ1bGVDWRIQCghIdW5Db3VudBgBIAEo",
          "BRIOCgZIdVR5cGUYAiABKAUSFQoCRloYAyABKAsyCS5GYW5aaG9uZxIYCgRI",
          "dVBYGAQgASgLMgouSHVQYWlYaW5nEgwKBEZlbmcYBSABKAUSDwoHQmFvVGlu",
          "ZxgGIAEoBRIWCg5Eb3VibGVRaW5nWWlTZRgHIAEoBRIQCghEdW5MYVBhbxgI",
          "IAEoBRIMCgRQZW5nGAkgASgFEhAKCFBlbmdUaW5nGAogASgFEgsKA0NoaRgL",
          "IAEoBRIPCgdDaGlUaW5nGAwgASgFEg0KBURpRmVuGA0gASgFEhUKDVlpUGFv",
          "RHVvWGlhbmcYDiABKAUSHAoUSHVhbmdaaHVhbmdIdWFuZ0dhbmcYDyABKAUS",
          "EwoLUWlhbmdHYW5nSHUYECABKAUSGAoQSHVhbmdaaHVhbmdDb3VudBgRIAEo",
          "BRIVCg1Eb3VibGVNZW5xaW5nGBIgASgFEhIKCkRvdWJsZVppbW8YEyABKAUS",
          "DgoGS2FuRmVuGBQgASgFEg0KBUh1YUh1GBUgASgFEhIKCkxpYW5aaHVhbmcY",
          "FiABKAUSEwoLSGFpRGlMYW9ZdWUYFyABKAUSEAoIUGluZ0xvbmcYGCABKAUS",
          "FgoOSml1TGlhbkJhb0RlbmcYGSABKAUSDwoHR2FuZ2h1YRgaIAEoBRIPCgdE",
          "dWFuWWFvGBsgASgFEhAKCEdvdVpoYW5nGBwgASgFEhAKCFF1ZVlpTWVuGB0g",
          "ASgFEg4KBkRhaUh1YRgeIAEoBRIOCgZCaWFuS0QYHyABKAUSEgoKSHVGYW5s",
          "aW1pdBggIAEoBRIRCgluWmlNb1R5cGUYISABKAUSFAoMbkdhbmdIdWFUeXBl",
          "GCIgASgFEhYKDm5IdWFuWmhhbmdUeXBlGCMgASgFEhcKD25ZYW9KaXVKaWFu",
          "Z0R1aRgkIAEoBRIaChJuTWVuUWluZ1pob25nWmhhbmcYJSABKAUSEQoJblRp",
          "YW5EaUh1GCYgASgFEhAKCG5UaW5nUGFpGCcgASgFIpkDCghGYW5aaG9uZxIN",
          "CgVRaUR1aRgBIAEoBRIQCghIYW9RaURVSRgCIAEoBRISCgpQZW5nUGVuZ0h1",
          "GAMgASgFEhMKC0dhbmdIdWFNaW5nGAQgASgFEhEKCUdhbmdIdWFBbhgFIAEo",
          "BRIPCgdHYW5nUGFvGAYgASgFEhQKDFNodWFuZ0hhb0h1YRgHIAEoBRIPCgdN",
          "ZW5xaW5nGAggASgFEg4KBkJpYW5LRBgJIAEoBRISCgpZaVRpYW9Mb25nGAog",
          "ASgFEhEKCUdlblpodWFuZxgLIAEoBRIQCghHb3VaaGFuZxgMIAEoBRIQCghR",
          "dWVZaU1lbhgNIAEoBRITCgtDaHVhbmdXdVdhbhgOIAEoBRIQCghYaWFvTGlh",
          "bhgPIAEoBRIOCgZEYUxpYW4YECABKAUSDwoHTGFvU2hhbxgRIAEoBRIPCgdT",
          "aUd1aVlpGBIgASgFEg8KB0R1YW5ZYW8YEyABKAUSEAoIU2hvdUJhWWkYFCAB",
          "KAUSDgoGVGVEYUh1GBUgASgFEhEKCVNoaVNhbllhbxgWIAEoBSI9CglIdVBh",
          "aVhpbmcSDgoGUHVUb25nGAEgASgFEg0KBVFpRHVpGAIgASgFEhEKCVNoaVNh",
          "bllhbxgDIAEoBSKTAQoLU2hhbmdRaXVadWkSDwoHRHVhbk1lbhgBIAEoBRIQ",
          "CghRaWFaaGFuZxgCIAEoBRIPCgdNZW5RaW5nGAMgASgFEgwKBEFuS2EYBCAB",
          "KAUSEgoKWmlNb0ppYVp1aRgFIAEoBRIMCgRRaUh1GAYgASgFEhEKCVFpYW5n",
          "R2FuZxgHIAEoBRINCgVRaUR1aRgIIAEoBSKUAQoOVGFibGVSdWxlUG9rZXIS",
          "DgoGUnVsZUlEGAEgASgFEhMKC1BsYXllckNvdW50GAIgASgFEhYKDlBsYXll",
          "ckNvdW50TWluGAMgASgFEg0KBVJvdW5kGAQgASgFEhsKBnJ1bm91dBgFIAEo",
          "CzILLlJ1bGVSdW5vdXQSGQoHcnVsZUREWhgIIAEoCzIILlJ1bGVERFoi8QEK",
          "ClJ1bGVSdW5vdXQSEQoJbGVhZF9zZWF0GAEgASgFEhIKCnNjb3JlX3R5cGUY",
          "AiABKAUSEgoKc2NvcmVfbW9yZRgDIAEoBRISCgpzY29yZV9sZXNzGAQgASgF",
          "EhIKCnNjb3JlX2JvbWIYBSABKAUSEQoJYm9tYl90eXBlGAYgASgFEhMKC2Jv",
          "bWJfcmVzdWx0GAcgASgFEhUKDWxpYW5kdWlfbGltaXQYCCABKAUSEAoIU2Fu",
          "WWlEdWkYCSABKAUSDwoHU2lZaURhbhgKIAEoBRIPCgdTaUVyRGFuGAsgASgF",
          "Eg0KBUJpR2VuGAwgASgFIh0KCFJ1bGU1MTBLEhEKCVBhY2tDb3VudBgBIAEo",
          "BSIeCgpSdWxlQmxhY2s3EhAKCFNjb3JlTWF4GAEgASgFIjcKB1J1bGVERFoS",
          "EAoIbGFuZGxvcmQYASABKAUSDAoEYm9tYhgCIAEoBRIMCgRzaHVuGAMgASgF",
          "IqUBCgZSdWxlR0QSEQoJcGxheV90eXBlGAEgASgFEhIKCnJvdW5kX3R5cGUY",
          "AiABKAUSFAoMdXBncmFkZV90eXBlGAMgASgFEhYKDnN0cmFpZ2h0X2ZsdXNo",
          "GAQgASgFEhcKD3NpeF9ib21iX2RvdWJsZRgFIAEoBRIYChBzaXhfYm9tYl9s",
          "b3R0ZXJ5GAYgASgFEhMKC3JlbWlhbl9jYXJkGAcgASgFItABCghSdWxlRERB",
          "NRIPCgdkaVNjb3JlGAEgASgFEg4KBmZhblBhaRgCIAEoBRITCgtmYW5QYWlO",
          "b1pvdRgDIAEoBRITCgtkb3VibGVMaWFuZxgEIAEoBRIYChBkb3VibGVMaWFu",
          "Z05vWm91GAUgASgFEg4KBmd1ZXNzQRgGIAEoBRIQCghkcmF3Q2FyZBgHIAEo",
          "BRIRCglndWVzc0FDaHUYCCABKAUSFQoNc2hvd0hhbmRDb3VudBgJIAEoBRIT",
          "CgtsZWZ0V2FybmluZxgKIAEoBSKJAwoMVGFibGVJbmZvTXNnEg8KB1RhYmxl",
          "SUQYASABKAUSDwoHT3duZXJJRBgCIAEoBRIRCglPd25lck5hbWUYAyABKAkS",
          "DQoFUm91bmQYBCABKAUSFgoCVFIYBSABKAsyCi5UYWJsZVJ1bGUSHgoEcHRp",
          "cxgGIAMoCzIQLlBsYXllclRhYmxlSW5mbxIOCgZHYW1lSUQYByABKAUSEAoI",
          "VG90YWxQYW4YCCABKAUSEQoJVG90YWxUaW1lGAkgASgFEhIKClRhYmxlbG9n",
          "SUQYCiABKAMSDAoEVHlwZRgLIAEoBRIPCgdDcmVhdG9yGAwgASgFEg4KBlN0",
          "YXR1cxgNIAEoBRIcCgNUUlAYDiABKAsyDy5UYWJsZVJ1bGVQb2tlchISCgpD",
          "aGFyZ2VUeXBlGA8gASgFEg8KB0FkbWluSUQYECABKAUSFQoNVm9pY2VDaGF0",
          "VHlwZRgRIAEoCBITCgtQcmVwYXJlVHlwZRgSIAEoCBIWCg5FeHByZXNzaW9u",
          "VHlwZRgTIAEoCCKQAQoOUmVxVGFibGVDcmVhdGUSDgoGVXNlcklEGAEgASgF",
          "EiAKCVRhYmxlSW5mbxgCIAEoCzINLlRhYmxlSW5mb01zZxIOCgZpcEFkZHIY",
          "AyABKAUSDgoGR2FtZUlEGAQgASgFEgwKBFR5cGUYBSABKAUSDgoGYkVudGVy",
          "GAYgASgFEg4KBkF1dGhJRBgHIAEoBSKfAQoOQWNrVGFibGVDcmVhdGUSDgoG",
          "VXNlcklEGAEgASgFEg4KBlJlc3VsdBgCIAEoBRIPCgdUYWJsZUlEGAMgASgF",
          "EhUKDUxlZnRDYXJkQ291bnQYBCABKAUSEQoJT3duZXJOYW1lGAUgASgJEg4K",
          "BkdhbWVJRBgGIAEoBRISCgpUYWJsZUxvZ0lEGAcgASgDEg4KBkF1dGhJRBgI",
          "IAEoBSLhAQoPUmVxVGFibGVEaXNtaXNzEg4KBlVzZXJJRBgBIAEoBRIPCgdU",
          "YWJsZUlEGAIgASgFEhUKDUxlZnRDYXJkQ291bnQYAyABKAUSEQoJYkRpc3Nt",
          "aXNzGAQgASgFEhQKDFRhcmdldFVzZXJJRBgFIAEoBRIWCg5iQWdyZWVEaXNz",
          "bWlzcxgGIAEoBRIOCgZpcEFkZHIYByABKAUSDgoGR2FtZUlEGAggASgFEhUK",
          "AnVsGAkgAygLMgkuVXNlckxpc3QSDgoGQUFDYXJkGAogASgFEg4KBldpbk1z",
          "ZxgLIAEoCSIuCghVc2VyTGlzdBIOCgZVc2VySUQYASABKAUSEgoKQ2FyZFJl",
          "Y29yZBgCIAEoAyJ+Cg9BY2tUYWJsZURpc21pc3MSDgoGVXNlcklEGAEgASgF",
          "Eg8KB1RhYmxlSUQYAiABKAUSDgoGUmVzdWx0GAMgASgFEhUKDUxlZnRDYXJk",
          "Q291bnQYBCABKAUSDgoGR2FtZUlEGAUgASgFEhMKC0FkZENhcmRVc2VyGAYg",
          "ASgFIkwKEVJlcVVzZXJJbmZvQ2hhbmdlEg4KBlVzZXJJRBgBIAEoBRIUCgxU",
          "YXJnZXRVc2VySUQYAiABKAUSEQoJQ2FyZENvdW50GAMgASgFIjwKCkFja01l",
          "c3NhZ2USDgoGVXNlcklEGAEgASgFEg4KBlJlc3VsdBgCIAEoBRIOCgZHYW1l",
          "SUQYAyABKAUitwEKElJlcUVudGVyTGVhdmVUYWJsZRIOCgZVc2VySUQYASAB",
          "KAUSDwoHVGFibGVJRBgCIAEoBRITCgthY3Rpb25fdHlwZRgDIAEoBRIXCgJw",
          "aRgEIAEoCzILLlBsYXllckluZm8SFAoMVGFyZ2V0VXNlcklEGAUgASgFEgwK",
          "BFNlYXQYBiABKAUSDgoGR2FtZUlEGAcgASgFEg4KBkNsdWJJRBgIIAEoBRIO",
          "CgZSb29tSUQYCSABKAUisgIKEkFja0VudGVyTGVhdmVUYWJsZRIOCgZVc2Vy",
          "SUQYASABKAUSDwoHVGFibGVJRBgCIAEoBRITCgthY3Rpb25fdHlwZRgDIAEo",
          "BRIOCgZSZXN1bHQYBCABKAUSEwoLdGFyZ2V0X3NlYXQYBSABKAUSIAoJVGFi",
          "bGVJbmZvGAYgASgLMg0uVGFibGVJbmZvTXNnEhgKA3BpcxgHIAMoCzILLlBs",
          "YXllckluZm8SDgoGR2FtZUlEGAggASgFEgwKBFNlYXQYCSABKAUSDgoGQ2x1",
          "YklEGAogASgFEhIKClRhYmxlU3RhcnQYCyABKAUSEgoKU2hvd0NoYXJnZRgM",
          "IAEoBRIOCgZSb29tSUQYDSABKAUSDgoGRXJyTXNnGA4gASgJEg8KB1RhYmxl",
          "Tm8YDyABKAUiZgoIUmVxUmVhZHkSDgoGVXNlcklEGAEgASgFEg8KB1RhYmxl",
          "SUQYAiABKAUSEwoLYWN0aW9uX3R5cGUYAyABKAUSFAoMVGFyZ2V0VXNlcklE",
          "GAQgASgFEg4KBkdhbWVJRBgFIAEoBSJgCghBY2tSZWFkeRIOCgZVc2VySUQY",
          "ASABKAUSDgoGUmVzdWx0GAIgASgFEg8KB1RhYmxlSUQYAyABKAUSEwoLYWN0",
          "aW9uX3R5cGUYBCABKAUSDgoGR2FtZUlEGAUgASgFIlcKDk9HR2F0ZVJlcUJy",
          "ZWFrEg4KBlVzZXJJRBgBIAEoBRIPCgdUYWJsZUlEGAIgASgFEhQKDFRhcmdl",
          "dFVzZXJJRBgDIAEoBRIOCgZHYW1lSUQYBCABKAUiYwoQT0dQbGF5ZXJHYW1l",
          "T3ZlchIOCgZVc2VySUQYASABKAUSDwoHVGFibGVJRBgCIAEoBRIOCgZHYW1l",
          "SUQYAyABKAUSDgoGUnVsZUlEGAQgASgFEg4KBldpbk1zZxgFIAEoCSI7ChJP",
          "R1BsYXllckluZm9DaGFuZ2USDgoGVXNlcklEGAEgASgFEhUKDUxlZnRDYXJk",
          "Q291bnQYAiABKAUigAEKDVJlcUdhbWVSZXN1bHQSDQoFUm91bmQYASABKAUS",
          "EgoKc3RhcnRfdGltZRgCIAEoCRIQCghlbmRfdGltZRgDIAEoCRIhCgpUYWJs",
          "ZUluZm9zGAQgASgLMg0uVGFibGVJbmZvTXNnEhcKAlVSGAUgAygLMgsuVXNl",
          "clJlc3VsdCIrCgpVc2VyUmVzdWx0Eg4KBlVzZXJJRBgBIAEoBRINCgVTY29y",
          "ZRgCIAEoBSKiAQoRT0dDbGllbnRTdGFydEdhbWUSDgoGVXNlcklEGAEgASgF",
          "Eg8KB1RhYmxlSUQYAiABKAUSEQoJR2FtZXN2cmlwGAMgASgNEhMKC0dhbWVz",
          "dnJwb3J0GAQgASgFEhQKDEdhbWVjb250aW51ZRgFIAEoBRIOCgZHYW1lSUQY",
          "BiABKAUSDgoGRG9tYWluGAcgASgJEg4KBlJ1bGVJRBgIIAEoBSJVChJPR0Ny",
          "ZWF0b3JHYW1lU3RhcnQSDgoGVXNlcklEGAEgASgFEg8KB1RhYmxlSUQYAiAB",
          "KAUSDgoGR2FtZUlEGAMgASgFEg4KBlJ1bGVJRBgEIAEoBSIgCg9DR1NIYW5k",
          "Q2FyZEl0ZW0SDQoFY2FyZHMYASADKAUiLwoQQ0dTVGFibGVDYXJkSXRlbRIN",
          "CgVjYXJkcxgBIAMoBRIMCgR0eXBlGAIgASgFIo4BChFDR1NQbGF5ZXJJbmZv",
          "UmVhbBIlCgpjYXJkX3RhYmxlGAEgASgLMhEuQ0dTVGFibGVDYXJkSXRlbRIS",
          "Cgp0aW1lX3RoaW5rGAIgASgFEhEKCWNhcmRfaGFuZBgDIAMoBRIXCg9sZWZ0",
          "X2NhcmRfY291bnQYBCABKAUSEgoKYm9tYl9jb3VudBgFIAEoBSKOAQoPQ0dT",
          "R2FtZUluZm9SZWFsEhMKC3N0YXR1c19nYW1lGAEgASgFEhMKC3NlYXRfYWN0",
          "aXZlGAIgASgFEhIKCmJvbWJfY291bnQYAyABKAUSFQoNYm9tYl9tdWx0aXBs",
          "ZRgEIAEoBRIRCgljdXJfcm91bmQYBSABKAUSEwoLdG90YWxfcm91bmQYBiAB",
          "KAUiUgoPQ0dTSGVhcnRCZWF0UmVxEgwKBHRpbWUYASABKAMSDgoGdXNlcmlk",
          "GAIgASgFEg0KBWRlbGF5GAMgASgFEhIKCmhlYXJ0Q291bnQYBCABKAUiZwoP",
          "Q0dTSGVhcnRCZWF0QWNrEgwKBHRpbWUYASABKAMSDgoGdXNlcmlkGAIgASgF",
          "Eg0KBWRlbGF5GAMgASgFEhIKCmhlYXJ0Q291bnQYBCABKAUSEwoLdGltZV9l",
          "eHBlbmQYBSABKAUiVAoPQ0dTR2FtZUVudGVyUmVxEg8KB3RhYmxlaWQYASAB",
          "KAUSEAoIdXNlcm5hbWUYAiABKAkSDgoGdGlja2V0GAMgASgJEg4KBnVzZXJp",
          "ZBgEIAEoBSK5AQoNQ0dTUGxheWVySW5mbxIOCgZ1c2VyaWQYASABKAUSDAoE",
          "c2VhdBgCIAEoBRIQCghuaWNrbmFtZRgDIAEoCRILCgNzZXgYBCABKAUSDwoH",
          "aGVhZGltZxgFIAEoCRIKCgJpcBgGIAEoDRIVCg1zdGF0dXNfb25saW5lGAcg",
          "ASgFEhIKCmJyZWFrX3R5cGUYCCABKAUSDQoFc2NvcmUYCSABKAUSFAoMc3Rh",
          "dHVzX3JlYWR5GAogASgFIqwCCgxDR1NUYWJsZVJ1bGUSFAoMcGxheWVyX2Nv",
          "dW50GAEgASgFEg0KBXJvdW5kGAIgASgFEhEKCWxlYWRfc2VhdBgDIAEoBRIS",
          "CgpzY29yZV90eXBlGAQgASgFEhIKCnNjb3JlX21vcmUYBSABKAUSEgoKc2Nv",
          "cmVfbGVzcxgGIAEoBRISCgpzY29yZV9ib21iGAcgASgFEhEKCWJvbWJfdHlw",
          "ZRgIIAEoBRITCgtib21iX3Jlc3VsdBgJIAEoBRIVCg1saWFuZHVpX2xpbWl0",
          "GAogASgFEhAKCFNhbllpRHVpGAsgASgFEg8KB1NpWWlEYW4YDCABKAUSDwoH",
          "U2lFckRhbhgNIAEoBRINCgVCaUdlbhgOIAEoBRISCgp0aW1lX3RoaW5rGA8g",
          "ASgFIrQBCg9DR1NHYW1lRW50ZXJBY2sSDgoGcmVzdWx0GAEgASgFEhMKC3N0",
          "YXR1c19nYW1lGAIgASgFEgwKBHNlYXQYAyABKAUSGwoDcGlzGAQgAygLMg4u",
          "Q0dTUGxheWVySW5mbxIaCgNwdHIYBSABKAsyDS5DR1NUYWJsZVJ1bGUSEAoI",
          "cnVsZV9zdHIYBiABKAkSIwoJZ2FtZV9pbmZvGAcgASgLMhAuQ0dTR2FtZUlu",
          "Zm9SZWFsIiEKEUNHU1BsYXllclJlYWR5UmVxEgwKBHR5cGUYASABKAUiIwoR",
          "Q0dTUGxheWVyUmVhZHlBY2sSDgoGcmVzdWx0GAEgASgFIiIKEUNHU1Rha2Vv",
          "dXRDYXJkUmVxEg0KBWNhcmRzGAEgAygFIjsKEUNHU1Rha2VvdXRDYXJkQWNr",
          "Eg4KBnJlc3VsdBgBIAEoBRIWCg5zZWxmX2NhcmRfaW5mbxgCIAMoBSIlChJD",
          "R1NEaXNtaXNzVGFibGVSZXESDwoHZGlzbWlzcxgBIAEoBSIkChJDR1NEaXNt",
          "aXNzVGFibGVBY2sSDgoGcmVzdWx0GAEgASgFIhsKC0NHU0JyZWFrUmVxEgwK",
          "BHR5cGUYASABKAUiHQoLQ0dTQnJlYWtBY2sSDgoGcmVzdWx0GAEgASgFIikK",
          "EkNHU1N0YXR1c1VwZGF0ZU50ZhITCgtzdGF0dXNfZ2FtZRgBIAEoBSIiChJD",
          "R1NQbGF5ZXJPbkxpbmVOdGYSDAoEc2VhdBgBIAEoBSIjChNDR1NQbGF5ZXJP",
          "ZmZMaW5lTnRmEgwKBHNlYXQYASABKAUiIQoRQ0dTUGxheWVyUmVhZHlOdGYS",
          "DAoEc2VhdBgBIAEoBSJZCg5DR1NEZWFsQ2FyZE50ZhIMCgRzZWF0GAEgASgF",
          "EiMKCWNhcmRfaGFuZBgCIAEoCzIQLkNHU0hhbmRDYXJkSXRlbRIUCgxvcGVy",
          "YXRlX3R5cGUYAyABKAUitAEKEUNHU1Rha2VvdXRDYXJkTnRmEgwKBHNlYXQY",
          "ASABKAUSEQoJc2VhdF9uZXh0GAIgASgFEhIKCnRpbWVfdGhpbmsYAyABKAUS",
          "FQoNY2FyZHNfdGFrZW91dBgEIAMoBRIQCghtdWx0aXBsZRgFIAEoBRISCgpi",
          "b21iX2NvdW50GAYgAygFEhcKD2xlZnRfY2FyZF9jb3VudBgHIAEoBRIUCgxv",
          "cGVyYXRlX3R5cGUYCCABKAUimAEKEUNHU0dhbWVVc2VyUmVzdWx0EiMKCWNh",
          "cmRfaGFuZBgBIAEoCzIQLkNHU0hhbmRDYXJkSXRlbRISCgpib21iX2NvdW50",
          "GAIgASgFEhEKCWN1cl9zY29yZRgDIAEoBRITCgt0b3RhbF9zY29yZRgEIAEo",
          "BRIQCghpc3NwcmluZxgFIAEoBRIQCghpc2Jhb3BlaRgGIAEoBSJ8ChBDR1NH",
          "YW1lU3VtUmVzdWx0EhUKDWhpZ2hlc3Rfc2NvcmUYASABKAUSEgoKYm9tYl9j",
          "b3VudBgCIAEoBRIRCgl3aW5fY291bnQYAyABKAUSFQoNZmFpbHVyZV9jb3Vu",
          "dBgEIAEoBRITCgt0b3RhbF9zY29yZRgFIAEoBSL6AQoQQ0dTR2FtZVJlc3Vs",
          "dE50ZhIQCghzZWF0X3dpbhgBIAEoBRIVCg1tdWx0aXBsZV9iYXNlGAIgASgF",
          "EhUKDW11bHRpcGxlX2JvbWIYAyABKAUSFwoPbXVsdGlwbGVfc3ByaW5nGAQg",
          "ASgFEhEKCWN1cl9yb3VuZBgFIAEoBRITCgt0b3RhbF9yb3VuZBgGIAEoBRIQ",
          "Cgh1c2VfdGltZRgHIAEoBRIeCgJ1chgIIAMoCzISLkNHU0dhbWVVc2VyUmVz",
          "dWx0EhMKC2lzX2dhbWVvdmVyGAkgASgFEh4KA3N1chgKIAMoCzIRLkNHU0dh",
          "bWVTdW1SZXN1bHQiIAoOQ0dTR2FtZU92ZXJOdGYSDgoGcmVhc29uGAEgASgF",
          "ImYKDkNHU1N5bmNEYXRhTnRmEicKC3BsYXllcl9pbmZvGAEgAygLMhIuQ0dT",
          "UGxheWVySW5mb1JlYWwSFAoMb3BlcmF0ZV90eXBlGAIgASgFEhUKDXRha2Vv",
          "dXRfaW5kZXgYAyABKAUiLAoOQ0dTQnJlYWtSZXFOdGYSDAoEc2VhdBgBIAEo",
          "BRIMCgR0eXBlGAIgASgFIl4KEENHU0Rpc21pc3NSZXFOdGYSDAoEc2VhdBgB",
          "IAEoBRIRCglsZWFkX3NlYXQYAiABKAUSEQoJbGVmdF90aW1lGAMgASgFEhYK",
          "DnBsYXllcl9kaXNtaXNzGAQgAygFIiMKEkdEX0NHU0hhbmRDYXJkSXRlbRIN",
          "CgVjYXJkcxgBIAMoBSIyChNHRF9DR1NUYWJsZUNhcmRJdGVtEg0KBWNhcmRz",
          "GAEgAygFEgwKBHR5cGUYAiABKAUirwEKFEdEX0NHU1BsYXllckluZm9SZWFs",
          "EigKCmNhcmRfdGFibGUYASABKAsyFC5HRF9DR1NUYWJsZUNhcmRJdGVtEhIK",
          "CnRpbWVfdGhpbmsYAiABKAUSEQoJY2FyZF9oYW5kGAMgAygFEhcKD2xlZnRf",
          "Y2FyZF9jb3VudBgEIAEoBRIXCg93aGV0aGVyX3RyaWJ1dGUYBSABKAUSFAoM",
          "dHJpYnV0ZV9jYXJkGAYgASgFIoIBChJHRF9DR1NHYW1lSW5mb1JlYWwSEwoL",
          "c3RhdHVzX2dhbWUYASABKAUSEwoLc2VhdF9hY3RpdmUYAiABKAUSEAoIY3Vy",
          "X2NhcmQYAyABKAUSGgoSc2NvcmVfYm90aF9wYXJ0aWVzGAQgAygFEhQKDGlz",
          "X25leHRfbGVhZBgFIAEoBSJFChJHRF9DR1NIZWFydEJlYXRSZXESDAoEdGlt",
          "ZRgBIAEoAxINCgVkZWxheRgCIAEoBRISCgpoZWFydENvdW50GAMgASgFIloK",
          "EkdEX0NHU0hlYXJ0QmVhdEFjaxIMCgR0aW1lGAEgASgDEg0KBWRlbGF5GAIg",
          "ASgFEhIKCmhlYXJ0Q291bnQYAyABKAUSEwoLdGltZV9leHBlbmQYBCABKAUi",
          "VwoSR0RfQ0dTR2FtZUVudGVyUmVxEg8KB3RhYmxlaWQYASABKAUSEAoIdXNl",
          "cm5hbWUYAiABKAkSDgoGdGlja2V0GAMgASgJEg4KBnVzZXJpZBgEIAEoBSLj",
          "AQoQR0RfQ0dTUGxheWVySW5mbxIOCgZ1c2VyaWQYASABKAUSDAoEc2VhdBgC",
          "IAEoBRIQCghuaWNrbmFtZRgDIAEoCRILCgNzZXgYBCABKAUSDwoHaGVhZGlt",
          "ZxgFIAEoCRIKCgJpcBgGIAEoDRIVCg1zdGF0dXNfb25saW5lGAcgASgFEhIK",
          "CmJyZWFrX3R5cGUYCCABKAUSDQoFc2NvcmUYCSABKAUSFAoMc3RhdHVzX3Jl",
          "YWR5GAogASgFEhIKCnNjb3JlXzUxMGsYCyABKAUSEQoJd2luX29yZGVyGAwg",
          "ASgFIuYBCg9HRF9DR1NUYWJsZVJ1bGUSFAoMcGxheWVyX2NvdW50GAEgASgF",
          "Eg0KBXJvdW5kGAIgASgFEhIKCnRpbWVfdGhpbmsYAyABKAUSEQoJY3VyX3Jv",
          "dW5kGAQgASgFEhEKCXBsYXlfdHlwZRgFIAEoBRIUCgx1cGdyYWRlX3R5cGUY",
          "BiABKAUSFgoOc3RyYWlnaHRfZmx1c2gYByABKAUSFwoPc2l4X2JvbWJfZG91",
          "YmxlGAggASgFEhgKEHNpeF9ib21iX2xvdHRlcnkYCSABKAUSEwoLcmVtaWFu",
          "X2NhcmQYCiABKAUiwAEKEkdEX0NHU0dhbWVFbnRlckFjaxIOCgZyZXN1bHQY",
          "ASABKAUSEwoLc3RhdHVzX2dhbWUYAiABKAUSDAoEc2VhdBgDIAEoBRIeCgNw",
          "aXMYBCADKAsyES5HRF9DR1NQbGF5ZXJJbmZvEh0KA3B0chgFIAEoCzIQLkdE",
          "X0NHU1RhYmxlUnVsZRIQCghydWxlX3N0chgGIAEoCRImCglnYW1lX2luZm8Y",
          "ByABKAsyEy5HRF9DR1NHYW1lSW5mb1JlYWwiJAoUR0RfQ0dTUGxheWVyUmVh",
          "ZHlSZXESDAoEdHlwZRgBIAEoBSImChRHRF9DR1NQbGF5ZXJSZWFkeUFjaxIO",
          "CgZyZXN1bHQYASABKAUiJQoUR0RfQ0dTVGFrZW91dENhcmRSZXESDQoFY2Fy",
          "ZHMYASADKAUiPgoUR0RfQ0dTVGFrZW91dENhcmRBY2sSDgoGcmVzdWx0GAEg",
          "ASgFEhYKDnNlbGZfY2FyZF9pbmZvGAIgAygFIiwKFUdEX0NHU1N0YXR1c1Vw",
          "ZGF0ZU50ZhITCgtzdGF0dXNfZ2FtZRgBIAEoBSIlChVHRF9DR1NQbGF5ZXJP",
          "bkxpbmVOdGYSDAoEc2VhdBgBIAEoBSImChZHRF9DR1NQbGF5ZXJPZmZMaW5l",
          "TnRmEgwKBHNlYXQYASABKAUiJAoUR0RfQ0dTUGxheWVyUmVhZHlOdGYSDAoE",
          "c2VhdBgBIAEoBSKBAgoRR0RfQ0dTRGVhbENhcmROdGYSDAoEc2VhdBgBIAEo",
          "BRIXCg93aGV0aGVyX3RyaWJ1dGUYAiABKAUSEAoIY3VyX2NhcmQYAyABKAUS",
          "JgoJY2FyZF9oYW5kGAQgASgLMhMuR0RfQ0dTSGFuZENhcmRJdGVtEhoKEnNj",
          "b3JlX2JvdGhfcGFydGllcxgFIAMoBRIWCg5taW5nX2NhcmRfc2VhdBgGIAMo",
          "BRIUCgxvcGVyYXRlX3R5cGUYByABKAUSEQoJbWluZ19jYXJkGAggASgFEhcK",
          "D2NoYW5nZV9wb3Nfc2VhdBgJIAMoBRIVCg1jdXJfcG93ZXJfcG9zGAogASgF",
          "IkUKF0dEX0NHU0Fja09wZXJhdGVEYXRhTnRmEhQKDHRyaWJ1dGVfc2VhdBgB",
          "IAEoBRIUCgx0cmlidXRlX2NhcmQYAiABKAUiQgoUR0RfQ0dTT3BlcmF0ZURh",
          "dGFOdGYSFAoMdHJpYnV0ZV9zZWF0GAEgASgFEhQKDHRyaWJ1dGVfY2FyZBgC",
          "IAEoBSKVAQoQR0RfQ0dTVHJpYnV0ZU50ZhIUCgx0cmlidXRlX3NlYXQYASAD",
          "KAUSFAoMdHJpYnV0ZV9jYXJkGAIgAygFEhUKDWh1YW5nb25nX3NlYXQYAyAD",
          "KAUSFQoNaHVhbmdvbmdfY2FyZBgEIAMoBRITCgthY3RpdmVfc2VhdBgFIAEo",
          "BRISCgp0aW1lX3RoaW5rGAYgASgFIiIKEEdEX0NHU1RyaWJ1ZGVBY2sSDgoG",
          "cmVzdWx0GAEgASgFIo8CChRHRF9DR1NUYWtlb3V0Q2FyZE50ZhIMCgRzZWF0",
          "GAEgASgFEhEKCXNlYXRfbmV4dBgCIAEoBRISCgp0aW1lX3RoaW5rGAMgASgF",
          "EhUKDWNhcmRzX3Rha2VvdXQYBCADKAUSEAoIbXVsdGlwbGUYBSABKAUSEgoK",
          "Ym9tYl9jb3VudBgGIAEoBRIWCg5yZW1haW5kZXJfY2FyZBgHIAMoBRIUCgxz",
          "ZWF0X3JhbmtpbmcYCCADKAUSKwoOb3Bwb3NpdGVfY2FyZHMYCSABKAsyEy5H",
          "RF9DR1NIYW5kQ2FyZEl0ZW0SFAoMb3BlcmF0ZV90eXBlGAogASgFEhQKDGlz",
          "X25leHRfbGVhZBgLIAEoBSIvChFHRF9DR1NCcmVha1JlcU50ZhIMCgRzZWF0",
          "GAEgASgFEgwKBHR5cGUYAiABKAUiYQoTR0RfQ0dTRGlzbWlzc1JlcU50ZhIM",
          "CgRzZWF0GAEgASgFEhEKCWxlYWRfc2VhdBgCIAEoBRIRCglsZWZ0X3RpbWUY",
          "AyABKAUSFgoOcGxheWVyX2Rpc21pc3MYBCADKAUijQEKFEdEX0NHU0dhbWVV",
          "c2VyUmVzdWx0EiYKCWNhcmRfaGFuZBgBIAEoCzITLkdEX0NHU0hhbmRDYXJk",
          "SXRlbRIRCgljdXJfc2NvcmUYAiABKAUSEwoLdG90YWxfc2NvcmUYAyABKAUS",
          "EQoJd2luX29yZGVyGAQgASgFEhIKCnNjb3JlXzUxMGsYBSABKAUimQEKE0dE",
          "X0NHU0dhbWVTdW1SZXN1bHQSFQoNaGlnaGVzdF9zY29yZRgBIAEoBRIRCgl3",
          "aW5fY291bnQYAiABKAUSFQoNZmFpbHVyZV9jb3VudBgDIAEoBRITCgt0b3Rh",
          "bF9zY29yZRgEIAEoBRIVCg1oZWFkX3RvdXJfY250GAUgASgFEhUKDWxhc3Rf",
          "dG91cl9jbnQYBiABKAUi0wEKE0dEX0NHU0dhbWVSZXN1bHROdGYSEAoIc2Vh",
          "dF93aW4YASABKAUSFQoNbXVsdGlwbGVfYmFzZRgCIAEoBRIRCgljdXJfcm91",
          "bmQYAyABKAUSEwoLdG90YWxfcm91bmQYBCABKAUSEAoIdXNlX3RpbWUYBSAB",
          "KAUSIQoCdXIYBiADKAsyFS5HRF9DR1NHYW1lVXNlclJlc3VsdBITCgtpc19n",
          "YW1lb3ZlchgHIAEoBRIhCgNzdXIYCCADKAsyFC5HRF9DR1NHYW1lU3VtUmVz",
          "dWx0IiMKEUdEX0NHU0dhbWVPdmVyTnRmEg4KBnJlYXNvbhgBIAEoBSJ9ChFH",
          "RF9DR1NTeW5jRGF0YU50ZhImCglnYW1lX2luZm8YASABKAsyEy5HRF9DR1NH",
          "YW1lSW5mb1JlYWwSKgoLcGxheWVyX2luZm8YAiADKAsyFS5HRF9DR1NQbGF5",
          "ZXJJbmZvUmVhbBIUCgxvcGVyYXRlX3R5cGUYAyABKAUiHgoOR0RfQ0dTQnJl",
          "YWtSZXESDAoEdHlwZRgBIAEoBSIgCg5HRF9DR1NCcmVha0FjaxIOCgZyZXN1",
          "bHQYASABKAUiKAoVR0RfQ0dTRGlzbWlzc1RhYmxlUmVxEg8KB2Rpc21pc3MY",
          "ASABKAUiJwoVR0RfQ0dTRGlzbWlzc1RhYmxlQWNrEg4KBnJlc3VsdBgBIAEo",
          "BSIkChNERFpfQ0dTSGFuZENhcmRJdGVtEg0KBWNhcmRzGAEgAygFIjMKFERE",
          "Wl9DR1NUYWJsZUNhcmRJdGVtEg0KBWNhcmRzGAEgAygFEgwKBHR5cGUYAiAB",
          "KAUivAEKFUREWl9DR1NQbGF5ZXJJbmZvUmVhbBIpCgpjYXJkX3RhYmxlGAEg",
          "ASgLMhUuRERaX0NHU1RhYmxlQ2FyZEl0ZW0SEgoKdGltZV90aGluaxgCIAEo",
          "BRIRCgljYXJkX2hhbmQYAyADKAUSFwoPbGVmdF9jYXJkX2NvdW50GAQgASgF",
          "EhIKCmNhbGxfc2NvcmUYBSABKAUSEQoJY2FsbF9sb3JkGAYgASgFEhEKCWdy",
          "YWJfbG9yZBgHIAEoBSLJAgoTRERaX0NHU0dhbWVJbmZvUmVhbBITCgtzdGF0",
          "dXNfZ2FtZRgBIAEoBRIRCglzZWF0X2xvcmQYAiABKAUSEwoLc2VhdF9hY3Rp",
          "dmUYAyABKAUSEQoJY2FsbF90eXBlGAQgASgFEhIKCmNhbGxfc2NvcmUYBSAB",
          "KAUSFAoMZ3JhYl9tdWx0aXBlGAYgASgFEhIKCmJvbWJfY291bnQYByABKAUS",
          "EQoJZ2FtZV90eXBlGAggASgFEhIKCmxhaXppX2NhcmQYCSABKAUSFQoNYm9t",
          "Yl9tdWx0aXBsZRgKIAEoBRIQCgh0d2VfbXVjaBgLIAEoBRIWCg50b3RhbF9t",
          "dWx0aXBsZRgMIAEoBRIRCgltaW5nX3NlYXQYDSABKAUSEQoJbWluZ19jYXJk",
          "GA4gASgFEhYKDmxldF9jYXJkX2NvdW50GA8gASgFIkYKE0REWl9DR1NIZWFy",
          "dEJlYXRSZXESDAoEdGltZRgBIAEoAxINCgVkZWxheRgCIAEoBRISCgpoZWFy",
          "dENvdW50GAMgASgFIlsKE0REWl9DR1NIZWFydEJlYXRBY2sSDAoEdGltZRgB",
          "IAEoAxINCgVkZWxheRgCIAEoBRISCgpoZWFydENvdW50GAMgASgFEhMKC3Rp",
          "bWVfZXhwZW5kGAQgASgFIlgKE0REWl9DR1NHYW1lRW50ZXJSZXESDwoHdGFi",
          "bGVpZBgBIAEoBRIQCgh1c2VybmFtZRgCIAEoCRIOCgZ0aWNrZXQYAyABKAkS",
          "DgoGdXNlcmlkGAQgASgFIr0BChFERFpfQ0dTUGxheWVySW5mbxIOCgZ1c2Vy",
          "aWQYASABKAUSDAoEc2VhdBgCIAEoBRIQCghuaWNrbmFtZRgDIAEoCRILCgNz",
          "ZXgYBCABKAUSDwoHaGVhZGltZxgFIAEoCRIKCgJpcBgGIAEoDRIVCg1zdGF0",
          "dXNfb25saW5lGAcgASgFEhIKCmJyZWFrX3R5cGUYCCABKAUSDQoFc2NvcmUY",
          "CSABKAUSFAoMc3RhdHVzX3JlYWR5GAogASgFIs0BChBERFpfQ0dTVGFibGVS",
          "dWxlEhQKDHBsYXllcl9jb3VudBgBIAEoBRINCgVyb3VuZBgCIAEoBRISCgp0",
          "aW1lX3RoaW5rGAMgASgFEhEKCXN1aXRfY2FyZBgEIAEoBRINCgVCaUdlbhgF",
          "IAEoBRIRCgljdXJfcm91bmQYBiABKAUSFAoMU3RyYWlnaHRDYXJkGAcgASgF",
          "Eg8KB01peENhcmQYCCABKAUSEAoIR2FtZU1vZGUYCSABKAUSEgoKQm9tYkNh",
          "cHBlZBgKIAEoBSKbAQoTRERaX0NHU0dhbWVFbnRlckFjaxIOCgZyZXN1bHQY",
          "ASABKAUSEwoLc3RhdHVzX2dhbWUYAiABKAUSDAoEc2VhdBgDIAEoBRIfCgNw",
          "aXMYBCADKAsyEi5ERFpfQ0dTUGxheWVySW5mbxIeCgNwdHIYBSABKAsyES5E",
          "RFpfQ0dTVGFibGVSdWxlEhAKCHJ1bGVfc3RyGAYgASgJIiUKFUREWl9DR1NQ",
          "bGF5ZXJSZWFkeVJlcRIMCgR0eXBlGAEgASgFIicKFUREWl9DR1NQbGF5ZXJS",
          "ZWFkeUFjaxIOCgZyZXN1bHQYASABKAUiJAoTRERaX0NHU0NhbGxTY29yZVJl",
          "cRINCgVzY29yZRgBIAEoBSIlChNERFpfQ0dTQ2FsbFNjb3JlQWNrEg4KBnJl",
          "c3VsdBgBIAEoBSInChJERFpfQ0dTQ2FsbExvcmRSZXESEQoJY2FsbF9sb3Jk",
          "GAEgASgFIiQKEkREWl9DR1NDYWxsTG9yZEFjaxIOCgZyZXN1bHQYASABKAUi",
          "JwoSRERaX0NHU0dyYWJMb3JkUmVxEhEKCWdyYWJfbG9yZBgBIAEoBSIkChJE",
          "RFpfQ0dTR3JhYkxvcmRBY2sSDgoGcmVzdWx0GAEgASgFIiYKFUREWl9DR1NU",
          "YWtlb3V0Q2FyZFJlcRINCgVjYXJkcxgBIAMoBSJVChVERFpfQ0dTVGFrZW91",
          "dENhcmRBY2sSDgoGcmVzdWx0GAEgASgFEhYKDnNlbGZfY2FyZF9pbmZvGAIg",
          "AygFEhQKDGFsbF9jYXJkX251bRgDIAMoBSJBChpERFpfQ0dTVGFrZW91dExh",
          "aXppQ2FyZFJlcRINCgVjYXJkcxgBIAMoBRIUCgxyZXBsYWNlX2luZm8YAiAD",
          "KAUiWgoaRERaX0NHU1Rha2VvdXRMYWl6aUNhcmRBY2sSDgoGcmVzdWx0GAEg",
          "ASgFEhYKDnNlbGZfY2FyZF9pbmZvGAIgAygFEhQKDGFsbF9jYXJkX251bRgD",
          "IAMoBSItChZERFpfQ0dTU3RhdHVzVXBkYXRlTnRmEhMKC3N0YXR1c19nYW1l",
          "GAEgASgFIiYKFkREWl9DR1NQbGF5ZXJPbkxpbmVOdGYSDAoEc2VhdBgBIAEo",
          "BSInChdERFpfQ0dTUGxheWVyT2ZmTGluZU50ZhIMCgRzZWF0GAEgASgFIiUK",
          "FUREWl9DR1NQbGF5ZXJSZWFkeU50ZhIMCgRzZWF0GAEgASgFIsMBChJERFpf",
          "Q0dTRGVhbENhcmROdGYSDAoEc2VhdBgBIAEoBRIRCgljYWxsX3R5cGUYAiAB",
          "KAUSJwoJY2FyZF9oYW5kGAMgASgLMhQuRERaX0NHU0hhbmRDYXJkSXRlbRIR",
          "CgljYXJkX3J1bGUYBCABKAUSEgoKbGFpemlfY2FyZBgFIAEoBRIRCgltaW5n",
          "X3NlYXQYBiABKAUSEQoJbWluZ19jYXJkGAcgASgFEhYKDnJlbWFpbmRlcl9j",
          "YXJkGAggAygFIioKFUREWl9DR1NTZXRCYXNlQ2FyZFJlcRIRCgljYXJkc19y",
          "ZXMYASADKAUiOgoVRERaX0NHU1NldEJhc2VDYXJkQWNrEg4KBnJlc3VsdBgB",
          "IAEoBRIRCgljYXJkc19yZXMYAiADKAUiJQoVRERaX0NHU1NldEJhc2VDYXJk",
          "TnRmEgwKBHNlYXQYASABKAUiWQoTRERaX0NHU0NhbGxTY29yZU50ZhIMCgRz",
          "ZWF0GAEgASgFEhEKCXNlYXRfbmV4dBgCIAEoBRINCgVzY29yZRgDIAEoBRIS",
          "Cgp0aW1lX3RoaW5rGAQgASgFIlwKEkREWl9DR1NDYWxsTG9yZE50ZhIMCgRz",
          "ZWF0GAEgASgFEhEKCWNhbGxfbG9yZBgCIAEoBRIRCglzZWF0X25leHQYAyAB",
          "KAUSEgoKdGltZV90aGluaxgEIAEoBSJuChJERFpfQ0dTR3JhYkxvcmROdGYS",
          "DAoEc2VhdBgBIAEoBRIRCglncmFiX2xvcmQYAiABKAUSEQoJc2VhdF9uZXh0",
          "GAMgASgFEhIKCnRpbWVfdGhpbmsYBCABKAUSEAoIbXVsdGlwbGUYBSABKAUi",
          "UQoTRERaX0NHU1Bva2VyRmxvd050ZhInCgljYXJkX2hhbmQYASADKAsyFC5E",
          "RFpfQ0dTSGFuZENhcmRJdGVtEhEKCWNhcmRzX3JlcxgCIAMoBSKkAQoRRERa",
          "X0NHU1NldExvcmROdGYSEQoJc2VhdF9sb3JkGAEgASgFEhIKCnRpbWVfdGhp",
          "bmsYAiABKAUSEAoIbXVsdGlwbGUYAyABKAUSEgoKbGFpemlfY2FyZBgEIAEo",
          "BRIRCgljYXJkc19yZXMYBSADKAUSFgoObGV0X2NhcmRfY291bnQYBiABKAUS",
          "FwoPZ3JhYl9sb3JkX2NvdW50GAcgASgFIlYKFUREWl9DR1NTZXRDYWxsTG9y",
          "ZE50ZhIVCg1zZWF0X2NhbGxsb3JkGAEgASgFEhIKCmZpcnN0X2dyYWIYAiAB",
          "KAUSEgoKdGltZV90aGluaxgDIAEoBSKhAQoVRERaX0NHU1Rha2VvdXRDYXJk",
          "TnRmEgwKBHNlYXQYASABKAUSEQoJc2VhdF9uZXh0GAIgASgFEhIKCnRpbWVf",
          "dGhpbmsYAyABKAUSFQoNY2FyZHNfdGFrZW91dBgEIAMoBRIQCghtdWx0aXBs",
          "ZRgFIAEoBRISCgpib21iX2NvdW50GAYgASgFEhYKDnJlbWFpbmRlcl9jYXJk",
          "GAcgAygFIrcBChpERFpfQ0dTVGFrZW91dExhaXppQ2FyZE50ZhIMCgRzZWF0",
          "GAEgASgFEhEKCXNlYXRfbmV4dBgCIAEoBRISCgp0aW1lX3RoaW5rGAMgASgF",
          "EhUKDWNhcmRzX3Rha2VvdXQYBCADKAUSFQoNY2FyZHNfcmVwbGFjZRgFIAMo",
          "BRIQCghtdWx0aXBsZRgGIAEoBRISCgpib21iX2NvdW50GAcgASgFEhAKCGNh",
          "cmRzbnVtGAggAygFIsYCChRERFpfQ0dTR2FtZVJlc3VsdE50ZhIRCglzZWF0",
          "X2xvcmQYASABKAUSEAoIc2VhdF93aW4YAiABKAUSFQoNbXVsdGlwbGVfYmFz",
          "ZRgDIAEoBRIVCg1tdWx0aXBsZV9ib21iGAQgASgFEhcKD211bHRpcGxlX3Nw",
          "cmluZxgFIAEoBRIYChBtdWx0aXBsZV90d2VtdWNoGAYgASgFEhEKCWN1cl9y",
          "b3VuZBgHIAEoBRITCgt0b3RhbF9yb3VuZBgIIAEoBRIQCgh1c2VfdGltZRgJ",
          "IAEoBRIiCgJ1chgKIAMoCzIWLkREWl9DR1NHYW1lVXNlclJlc3VsdBITCgtp",
          "c19nYW1lb3ZlchgLIAEoBRIiCgNzdXIYDCADKAsyFS5ERFpfQ0dTR2FtZVN1",
          "bVJlc3VsdBIRCgljYXJkc19yZXMYDSADKAUibAoURERaX0NHU0dhbWVTdW1S",
          "ZXN1bHQSFQoNaGlnaGVzdF9zY29yZRgBIAEoBRIRCgl3aW5fY291bnQYAiAB",
          "KAUSFQoNZmFpbHVyZV9jb3VudBgDIAEoBRITCgt0b3RhbF9zY29yZRgEIAEo",
          "BSJoChVERFpfQ0dTR2FtZVVzZXJSZXN1bHQSJwoJY2FyZF9oYW5kGAEgASgL",
          "MhQuRERaX0NHU0hhbmRDYXJkSXRlbRIRCgljdXJfc2NvcmUYAiABKAUSEwoL",
          "dG90YWxfc2NvcmUYAyABKAUiJAoSRERaX0NHU0dhbWVPdmVyTnRmEg4KBnJl",
          "YXNvbhgBIAEoBSJ8ChJERFpfQ0dTU3luY0RhdGFOdGYSJwoJZ2FtZV9pbmZv",
          "GAEgASgLMhQuRERaX0NHU0dhbWVJbmZvUmVhbBIrCgtwbGF5ZXJfaW5mbxgC",
          "IAMoCzIWLkREWl9DR1NQbGF5ZXJJbmZvUmVhbBIQCghjYXJkX3JlcxgDIAMo",
          "BSIkChBERFpfQ0dTRG91YmxlUmVxEhAKCGlzZG91YmxlGAEgASgFIiIKEERE",
          "Wl9DR1NEb3VibGVBY2sSDgoGcmVzdWx0GAEgASgFIlsKEEREWl9DR1NEb3Vi",
          "bGVOdGYSDAoEc2VhdBgBIAEoBRIQCghpc2RvdWJsZRgCIAEoBRIQCghpdGVt",
          "X3VzZRgDIAEoBRIVCg1pdGVtX3VzZV9uZXh0GAQgASgFImQKF0REWl9DR1NT",
          "cGVjaWFsU3RhdHVzTnRmEg4KBnN0YXR1cxgBIAEoBRIRCgl0aGlua3RpbWUY",
          "AiABKAUSEwoLc2VhdF9hY3RpdmUYAyABKAUSEQoJY2FuZG91YmxlGAQgASgF",
          "IjYKE0REWl9DR1NMb29rQ2FyZHNOdGYSDAoEc2VhdBgBIAEoBRIRCgljYXJk",
          "c19yZXMYAiADKAUiHwoPRERaX0NHU0JyZWFrUmVxEgwKBHR5cGUYASABKAUi",
          "IQoPRERaX0NHU0JyZWFrQWNrEg4KBnJlc3VsdBgBIAEoBSIwChJERFpfQ0dT",
          "QnJlYWtSZXFOdGYSDAoEc2VhdBgBIAEoBRIMCgR0eXBlGAIgASgFIikKFkRE",
          "Wl9DR1NEaXNtaXNzVGFibGVSZXESDwoHZGlzbWlzcxgBIAEoBSIoChZERFpf",
          "Q0dTRGlzbWlzc1RhYmxlQWNrEg4KBnJlc3VsdBgBIAEoBSJiChRERFpfQ0dT",
          "RGlzbWlzc1JlcU50ZhIMCgRzZWF0GAEgASgFEhEKCWxlYWRfc2VhdBgCIAEo",
          "BRIRCglsZWZ0X3RpbWUYAyABKAUSFgoOcGxheWVyX2Rpc21pc3MYBCADKAUi",
          "UwoQUmVxQXBwbHlDbHViUm9vbRIOCgZVc2VySUQYASABKAUSDgoGUm9vbUlE",
          "GAIgASgFEgwKBHR5cGUYAyABKAUSEQoJUm9vbUFkbWluGAQgASgFImAKEEFj",
          "a0FwcGx5Q2x1YlJvb20SDgoGUmVzdWx0GAEgASgFEgwKBHR5cGUYAiABKAUS",
          "DgoGRXJyTXNnGAMgASgJEg4KBlJvb21JRBgEIAEoBRIOCgZJc1Bhc3MYBSAB",
          "KAUiYwoQUmVxRW50ZXJDbHViUm9vbRIOCgZVc2VySUQYASABKAUSDgoGUm9v",
          "bUlEGAIgASgFEhoKA2N1aRgDIAEoCzINLkNsdWJVc2VySW5mbxITCgtBZG1p",
          "blVzZXJJRBgEIAEoBSIyChBBY2tFbnRlckNsdWJSb29tEg4KBlJlc3VsdBgB",
          "IAEoBRIOCgZFcnJNc2cYAiABKAkiWwoTTnRmQ2x1YlJvb21TeW5jRGF0YRIO",
          "CgZSb29tSUQYASABKAUSEAoITGVmdENhcmQYAiABKAUSDgoGU3RhdHVzGAMg",
          "ASgFEhIKCkFwcGx5Q291bnQYBCABKAUihQEKE050ZkNsdWJSb29tQmFzZURh",
          "dGESDgoGUm9vbUlEGAEgASgFEhoKA2NyaRgCIAEoCzINLkNsdWJSb29tSW5m",
          "bxIhCglUYWJsZUxpc3QYAyADKAsyDi5DbHViVGFibGVJbmZvEh8KCFVzZXJM",
          "aXN0GAQgAygLMg0uQ2x1YlVzZXJJbmZvIpUCCgxDbHViUm9vbUluZm8SDgoG",
          "Um9vbUlEGAEgASgFEhAKCFJvb21OYW1lGAIgASgJEg8KB1J1bGVTdHIYAyAB",
          "KAkSGgoDdGltGAQgASgLMg0uVGFibGVJbmZvTXNnEhAKCEF1dGhDYXJkGAUg",
          "ASgFEhQKDEF1dG9BdXRoQ2FyZBgGIAEoBRIQCghMZWZ0Q2FyZBgHIAEoBRIU",
          "CgxDcmVhdGVVc2VySUQYCCABKAUSEwoLQWRtaW5Vc2VySUQYCSABKAUSDgoG",
          "U3RhdHVzGAogASgFEg4KBkdhbWVJRBgLIAEoBRIMCgRub3RlGAwgASgJEhAK",
          "CGJWaXBSb29tGA0gASgFEhEKCU1heFRhYmxlcxgOIAEoBSK4AQoNQ2x1YlRh",
          "YmxlSW5mbxITCgtDbHViVGFibGVJRBgBIAEoBRIPCgdUYWJsZUlEGAIgASgF",
          "EhIKClRhYmxlU3RhdGUYAyABKAUSEgoKVG90YWxSb3VuZBgEIAEoBRISCgpD",
          "cmVhdGVUaW1lGAUgASgFEhQKDEN1cnJlbnRSb3VuZBgGIAEoBRIOCgZHYW1l",
          "SUQYByABKAUSDgoGUm9vbUlEGAggASgFEg8KB1RhYmxlTk8YCSABKAUiogEK",
          "DENsdWJVc2VySW5mbxIOCgZVc2VySUQYASABKAUSEAoITmlja05hbWUYAiAB",
          "KAkSEgoKSGVhZEltZ1VybBgDIAEoCRIPCgdVc2VyU2l0GAQgASgFEhMKC0Ns",
          "dWJUYWJsZUlEGAUgASgFEhUKDXN0YXR1c19vbmxpbmUYBiABKAUSDgoGUm9v",
          "bUlEGAcgASgFEg8KB1RhYmxlTk8YCCABKAUiXAoQTnRmRW50ZXJDbHViUm9v",
          "bRIOCgZVc2VySUQYASABKAUSDAoEdHlwZRgCIAEoBRIaCgNjdWkYAyABKAsy",
          "DS5DbHViVXNlckluZm8SDgoGUm9vbUlEGAQgASgFIlcKD050ZlNpdENsdWJU",
          "YWJsZRIOCgZVc2VySUQYASABKAUSDwoHVXNlclNpdBgCIAEoBRITCgtDbHVi",
          "VGFibGVJRBgDIAEoBRIOCgZSb29tSUQYBCABKAUiMAoQTnRmQ2x1YlVzZXJC",
          "cmVhaxIOCgZVc2VySUQYASABKAUSDAoEdHlwZRgCIAEoBSJNChFOdGZDbHVi",
          "Um9vbUNoYW5nZRIMCgR0eXBlGAEgASgFEhoKA2NyaRgCIAEoCzINLkNsdWJS",
          "b29tSW5mbxIOCgZSb29tSUQYAyABKAUirQEKEk50ZkNsdWJUYWJsZVN0YXR1",
          "cxITCgtDbHViVGFibGVJRBgBIAEoBRIPCgdUYWJsZU5PGAIgASgFEg8KB1Rh",
          "YmxlSUQYAyABKAUSEgoKVGFibGVTdGF0ZRgEIAEoBRISCgpUb3RhbFJvdW5k",
          "GAUgASgFEhIKCkNyZWF0ZVRpbWUYBiABKAUSFAoMQ3VycmVudFJvdW5kGAcg",
          "ASgFEg4KBlJvb21JRBgIIAEoBSJTChFOdGZDbHViUGxheWVyRXhpdBIeCgNt",
          "c2cYASABKAsyES5BY2tBcHBseUNsdWJSb29tEg4KBlJvb21JRBgCIAEoBRIO",
          "CgZVc2VySUQYAyABKAUiYAoPUmVxU2l0Q2x1YlRhYmxlEgwKBHR5cGUYASAB",
          "KAUSDgoGVXNlcklEGAIgASgFEg4KBlJvb21JRBgDIAEoBRIOCgZHYW1lSUQY",
          "BCABKAUSDwoHVGFibGVOTxgFIAEoBSI/Cg9BY2tTaXRDbHViVGFibGUSDAoE",
          "dHlwZRgBIAEoBRIOCgZSZXN1bHQYAiABKAUSDgoGRXJyTXNnGAMgASgJIjEK",
          "D1JlcUV4aXRDbHViUm9vbRIOCgZVc2VySUQYASABKAUSDgoGUm9vbUlEGAIg",
          "ASgFIkEKD0Fja0V4aXRDbHViUm9vbRIOCgZSZXN1bHQYASABKAUSDgoGRXJy",
          "TXNnGAIgASgJEg4KBlJvb21JRBgDIAEoBSI/ChFSZXFDcmVhdGVDbHViUm9v",
          "bRIOCgZVc2VySUQYASABKAUSGgoDY3JpGAIgASgLMg0uQ2x1YlJvb21JbmZv",
          "IkMKEUFja0NyZWF0ZUNsdWJSb29tEg4KBlJlc3VsdBgBIAEoBRIOCgZFcnJN",
          "c2cYAiABKAkSDgoGUm9vbUlEGAMgASgFIj8KEVJlcU1vZGlmeUNsdWJSb29t",
          "Eg4KBlVzZXJJRBgBIAEoBRIaCgNjcmkYAiABKAsyDS5DbHViUm9vbUluZm8i",
          "MwoRQWNrTW9kaWZ5Q2x1YlJvb20SDgoGUmVzdWx0GAEgASgFEg4KBkVyck1z",
          "ZxgCIAEoCSIwCg5SZXFEZWxDbHViUm9vbRIOCgZVc2VySUQYASABKAUSDgoG",
          "Um9vbUlEGAIgASgFIjAKDkFja0RlbENsdWJSb29tEg4KBlJlc3VsdBgBIAEo",
          "BRIOCgZFcnJNc2cYAiABKAkiXQoTUmVxQ2x1YlJvb21BdXRoQ2FyZBIOCgZV",
          "c2VySUQYASABKAUSDgoGUm9vbUlEGAIgASgFEhAKCEF1dGhDYXJkGAMgASgF",
          "EhQKDEF1dG9BdXRoQ2FyZBgEIAEoBSJ/ChNBY2tDbHViUm9vbUF1dGhDYXJk",
          "Eg4KBlJlc3VsdBgBIAEoBRIOCgZFcnJNc2cYAiABKAkSEAoIQXV0aENhcmQY",
          "AyABKAUSFAoMQXV0b0F1dGhDYXJkGAQgASgFEhAKCExlZnRDYXJkGAUgASgF",
          "Eg4KBlJvb21JRBgGIAEoBSJVChJSZXFDbHViQWRtaW5NZW1iZXISDgoGVXNl",
          "cklEGAEgASgFEg4KBlJvb21JRBgCIAEoBRIRCglPcHRVc2VySUQYAyABKAUS",
          "DAoEdHlwZRgEIAEoBSJlChJBY2tDbHViQWRtaW5NZW1iZXISDgoGUmVzdWx0",
          "GAEgASgFEgwKBHR5cGUYAiABKAUSDgoGRXJyTXNnGAMgASgJEhEKCU9wdFVz",
          "ZXJJRBgEIAEoBRIOCgZSb29tSUQYBSABKAUiQwoSUmVxQ2x1YkFkbWluU3Rh",
          "dHVzEg4KBlVzZXJJRBgBIAEoBRINCgVvbm9mZhgCIAEoBRIOCgZSb29tSUQY",
          "AyABKAUiUwoSQWNrQ2x1YkFkbWluU3RhdHVzEg4KBlJlc3VsdBgBIAEoBRIN",
          "CgVvbm9mZhgCIAEoBRIOCgZFcnJNc2cYAyABKAkSDgoGUm9vbUlEGAQgASgF",
          "ImoKDlVzZXJTdGF0dXNJbmZvEg4KBlVzZXJJRBgBIAEoBRIQCghOaWNrTmFt",
          "ZRgCIAEoCRISCgpIZWFkSW1nVXJsGAMgASgJEg4KBlN0YXR1cxgEIAEoBRIS",
          "CgpVcGRhdGVUaW1lGAUgASgFIj8KD1JlcVBsYXllclN0YXR1cxIOCgZVc2Vy",
          "SUQYASABKAUSDgoGUm9vbUlEGAIgASgFEgwKBFR5cGUYAyABKAUiUAoPQWNr",
          "UGxheWVyU3RhdHVzEg4KBlJlc3VsdBgBIAEoBRIOCgZFcnJNc2cYAiABKAkS",
          "HQoEdXNpcxgDIAMoCzIPLlVzZXJTdGF0dXNJbmZvImkKD1JlcUludml0ZVBs",
          "YXllchIOCgZVc2VySUQYASABKAUSFAoMSW52aXRlVXNlcklEGAIgASgFEg4K",
          "BlJvb21JRBgDIAEoBRIPCgdUYWJsZUlEGAQgASgFEg8KB1RhYmxlTk8YBSAB",
          "KAUiQQoPQWNrSW52aXRlUGxheWVyEg4KBlJlc3VsdBgBIAEoBRIOCgZFcnJN",
          "c2cYAiABKAkSDgoGUm9vbUlEGAMgASgFIpMBCg9OdGZJbnZpdGVQbGF5ZXIS",
          "DgoGVXNlcklEGAEgASgFEhAKCE5pY2tOYW1lGAIgASgJEhIKCkhlYWRJbWdV",
          "cmwYAyABKAkSDgoGUm9vbUlEGAQgASgFEhQKDENsdWJSb29tTmFtZRgFIAEo",
          "CRITCgtDbHViUnVsZVN0chgGIAEoCRIPCgdUYWJsZUlEGAcgASgFIkQKE050",
          "ZkNsdWJQbGF5ZXJTdGF0dXMSDgoGUm9vbUlEGAEgASgFEh0KBHVzaXMYAiAD",
          "KAsyDy5Vc2VyU3RhdHVzSW5mb2IGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::HallCommonNtf), global::HallCommonNtf.Parser, new[]{ "Type", "UserID", "TargetUserID", "Status", "GameID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqPlayerLogin), global::ReqPlayerLogin.Parser, new[]{ "UserName", "Channel", "Token", "Region", "GameID", "Pi", "UserID", "GpsX", "GpsY", "VersionJS", "VersionApk" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckPlayerLogin), global::AckPlayerLogin.Parser, new[]{ "UserID", "Result", "Pi", "CardCount", "OwnTableID", "TableID", "GameID", "OwnGameID", "AssistStatus", "ClubList", "ClubID", "RoomID", "MaxRoomCount", "MaxVipRoomCount", "RoomAdmin" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OGGateReqKickPeople), global::OGGateReqKickPeople.Parser, new[]{ "UserID", "Reason" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqBreak), global::ReqBreak.Parser, new[]{ "UserID", "TableID", "GameID", "TargetUserID", "BreakType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqChangePos), global::ReqChangePos.Parser, new[]{ "UserID", "TargetUserID", "GpsX", "GpsY", "TableID", "GameID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerInfo), global::PlayerInfo.Parser, new[]{ "UserID", "Channel", "NickName", "Sex", "HeadImgUrl", "IpAddress", "GateIpAddress", "UserName", "UserSit", "TableID", "CardCount", "GameID", "City", "IdNumber", "RealName", "GpsX", "GpsY", "PromotID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerTableInfo), global::PlayerTableInfo.Parser, new[]{ "UserID", "Status", "Seat", "IsPayed", "IsReady" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqRefreshCard), global::ReqRefreshCard.Parser, new[]{ "UserID", "GameID", "Channel" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckRefreshCard), global::AckRefreshCard.Parser, new[]{ "UserID", "Result", "CardCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqNotice), global::ReqNotice.Parser, new[]{ "Time", "GameID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckNotice), global::AckNotice.Parser, new[]{ "Result", "Notice", "NewVersion", "RollingMsg", "TickCount", "CacheTime", "GameID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqChatMsg), global::ReqChatMsg.Parser, new[]{ "UserID", "TableID", "Result", "IndexMsg", "TextMsg", "SoundMsg", "TargetUserID", "GameID", "UserIDTo", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TableRule), global::TableRule.Parser, new[]{ "RuleID", "PlayerCount", "PlayerCountMin", "Round", "Rulerunout", "Rulerddz", "RuleJS", "Rulergd", "RuleStr", "RuleCY", "Ruledda5" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RuleJS), global::RuleJS.Parser, new[]{ "HunCount", "HuType", "Feng", "BaoTing", "XiaZuiType", "YiPaoDuoXiang", "HuFanlimit", "NZiMoType", "NGangHuaType", "NHuanZhangType", "NYaoJiuJiangDui", "NMenQingZhongZhang", "NTianDiHu", "NTingPai" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RuleCY), global::RuleCY.Parser, new[]{ "HunCount", "HuType", "FZ", "HuPX", "Feng", "BaoTing", "DoubleQingYiSe", "DunLaPao", "Peng", "PengTing", "Chi", "ChiTing", "DiFen", "YiPaoDuoXiang", "HuangZhuangHuangGang", "QiangGangHu", "HuangZhuangCount", "DoubleMenqing", "DoubleZimo", "KanFen", "HuaHu", "LianZhuang", "HaiDiLaoYue", "PingLong", "JiuLianBaoDeng", "Ganghua", "DuanYao", "GouZhang", "QueYiMen", "DaiHua", "BianKD", "HuFanlimit", "NZiMoType", "NGangHuaType", "NHuanZhangType", "NYaoJiuJiangDui", "NMenQingZhongZhang", "NTianDiHu", "NTingPai" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FanZhong), global::FanZhong.Parser, new[]{ "QiDui", "HaoQiDUI", "PengPengHu", "GangHuaMing", "GangHuaAn", "GangPao", "ShuangHaoHua", "Menqing", "BianKD", "YiTiaoLong", "GenZhuang", "GouZhang", "QueYiMen", "ChuangWuWan", "XiaoLian", "DaLian", "LaoShao", "SiGuiYi", "DuanYao", "ShouBaYi", "TeDaHu", "ShiSanYao" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HuPaiXing), global::HuPaiXing.Parser, new[]{ "PuTong", "QiDui", "ShiSanYao" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ShangQiuZui), global::ShangQiuZui.Parser, new[]{ "DuanMen", "QiaZhang", "MenQing", "AnKa", "ZiMoJiaZui", "QiHu", "QiangGang", "QiDui" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TableRulePoker), global::TableRulePoker.Parser, new[]{ "RuleID", "PlayerCount", "PlayerCountMin", "Round", "Runout", "RuleDDZ" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RuleRunout), global::RuleRunout.Parser, new[]{ "LeadSeat", "ScoreType", "ScoreMore", "ScoreLess", "ScoreBomb", "BombType", "BombResult", "LianduiLimit", "SanYiDui", "SiYiDan", "SiErDan", "BiGen" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Rule510K), global::Rule510K.Parser, new[]{ "PackCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RuleBlack7), global::RuleBlack7.Parser, new[]{ "ScoreMax" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RuleDDZ), global::RuleDDZ.Parser, new[]{ "Landlord", "Bomb", "Shun" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RuleGD), global::RuleGD.Parser, new[]{ "PlayType", "RoundType", "UpgradeType", "StraightFlush", "SixBombDouble", "SixBombLottery", "RemianCard" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RuleDDA5), global::RuleDDA5.Parser, new[]{ "DiScore", "FanPai", "FanPaiNoZou", "DoubleLiang", "DoubleLiangNoZou", "GuessA", "DrawCard", "GuessAChu", "ShowHandCount", "LeftWarning" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TableInfoMsg), global::TableInfoMsg.Parser, new[]{ "TableID", "OwnerID", "OwnerName", "Round", "TR", "Ptis", "GameID", "TotalPan", "TotalTime", "TablelogID", "Type", "Creator", "Status", "TRP", "ChargeType", "AdminID", "VoiceChatType", "PrepareType", "ExpressionType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqTableCreate), global::ReqTableCreate.Parser, new[]{ "UserID", "TableInfo", "IpAddr", "GameID", "Type", "BEnter", "AuthID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckTableCreate), global::AckTableCreate.Parser, new[]{ "UserID", "Result", "TableID", "LeftCardCount", "OwnerName", "GameID", "TableLogID", "AuthID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqTableDismiss), global::ReqTableDismiss.Parser, new[]{ "UserID", "TableID", "LeftCardCount", "BDissmiss", "TargetUserID", "BAgreeDissmiss", "IpAddr", "GameID", "Ul", "AACard", "WinMsg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UserList), global::UserList.Parser, new[]{ "UserID", "CardRecord" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckTableDismiss), global::AckTableDismiss.Parser, new[]{ "UserID", "TableID", "Result", "LeftCardCount", "GameID", "AddCardUser" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqUserInfoChange), global::ReqUserInfoChange.Parser, new[]{ "UserID", "TargetUserID", "CardCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckMessage), global::AckMessage.Parser, new[]{ "UserID", "Result", "GameID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqEnterLeaveTable), global::ReqEnterLeaveTable.Parser, new[]{ "UserID", "TableID", "ActionType", "Pi", "TargetUserID", "Seat", "GameID", "ClubID", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckEnterLeaveTable), global::AckEnterLeaveTable.Parser, new[]{ "UserID", "TableID", "ActionType", "Result", "TargetSeat", "TableInfo", "Pis", "GameID", "Seat", "ClubID", "TableStart", "ShowCharge", "RoomID", "ErrMsg", "TableNo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqReady), global::ReqReady.Parser, new[]{ "UserID", "TableID", "ActionType", "TargetUserID", "GameID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckReady), global::AckReady.Parser, new[]{ "UserID", "Result", "TableID", "ActionType", "GameID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OGGateReqBreak), global::OGGateReqBreak.Parser, new[]{ "UserID", "TableID", "TargetUserID", "GameID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OGPlayerGameOver), global::OGPlayerGameOver.Parser, new[]{ "UserID", "TableID", "GameID", "RuleID", "WinMsg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OGPlayerInfoChange), global::OGPlayerInfoChange.Parser, new[]{ "UserID", "LeftCardCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqGameResult), global::ReqGameResult.Parser, new[]{ "Round", "StartTime", "EndTime", "TableInfos", "UR" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UserResult), global::UserResult.Parser, new[]{ "UserID", "Score" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OGClientStartGame), global::OGClientStartGame.Parser, new[]{ "UserID", "TableID", "Gamesvrip", "Gamesvrport", "Gamecontinue", "GameID", "Domain", "RuleID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OGCreatorGameStart), global::OGCreatorGameStart.Parser, new[]{ "UserID", "TableID", "GameID", "RuleID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSHandCardItem), global::CGSHandCardItem.Parser, new[]{ "Cards" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSTableCardItem), global::CGSTableCardItem.Parser, new[]{ "Cards", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSPlayerInfoReal), global::CGSPlayerInfoReal.Parser, new[]{ "CardTable", "TimeThink", "CardHand", "LeftCardCount", "BombCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSGameInfoReal), global::CGSGameInfoReal.Parser, new[]{ "StatusGame", "SeatActive", "BombCount", "BombMultiple", "CurRound", "TotalRound" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSHeartBeatReq), global::CGSHeartBeatReq.Parser, new[]{ "Time", "Userid", "Delay", "HeartCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSHeartBeatAck), global::CGSHeartBeatAck.Parser, new[]{ "Time", "Userid", "Delay", "HeartCount", "TimeExpend" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSGameEnterReq), global::CGSGameEnterReq.Parser, new[]{ "Tableid", "Username", "Ticket", "Userid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSPlayerInfo), global::CGSPlayerInfo.Parser, new[]{ "Userid", "Seat", "Nickname", "Sex", "Headimg", "Ip", "StatusOnline", "BreakType", "Score", "StatusReady" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSTableRule), global::CGSTableRule.Parser, new[]{ "PlayerCount", "Round", "LeadSeat", "ScoreType", "ScoreMore", "ScoreLess", "ScoreBomb", "BombType", "BombResult", "LianduiLimit", "SanYiDui", "SiYiDan", "SiErDan", "BiGen", "TimeThink" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSGameEnterAck), global::CGSGameEnterAck.Parser, new[]{ "Result", "StatusGame", "Seat", "Pis", "Ptr", "RuleStr", "GameInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSPlayerReadyReq), global::CGSPlayerReadyReq.Parser, new[]{ "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSPlayerReadyAck), global::CGSPlayerReadyAck.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSTakeoutCardReq), global::CGSTakeoutCardReq.Parser, new[]{ "Cards" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSTakeoutCardAck), global::CGSTakeoutCardAck.Parser, new[]{ "Result", "SelfCardInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSDismissTableReq), global::CGSDismissTableReq.Parser, new[]{ "Dismiss" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSDismissTableAck), global::CGSDismissTableAck.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSBreakReq), global::CGSBreakReq.Parser, new[]{ "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSBreakAck), global::CGSBreakAck.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSStatusUpdateNtf), global::CGSStatusUpdateNtf.Parser, new[]{ "StatusGame" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSPlayerOnLineNtf), global::CGSPlayerOnLineNtf.Parser, new[]{ "Seat" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSPlayerOffLineNtf), global::CGSPlayerOffLineNtf.Parser, new[]{ "Seat" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSPlayerReadyNtf), global::CGSPlayerReadyNtf.Parser, new[]{ "Seat" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSDealCardNtf), global::CGSDealCardNtf.Parser, new[]{ "Seat", "CardHand", "OperateType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSTakeoutCardNtf), global::CGSTakeoutCardNtf.Parser, new[]{ "Seat", "SeatNext", "TimeThink", "CardsTakeout", "Multiple", "BombCount", "LeftCardCount", "OperateType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSGameUserResult), global::CGSGameUserResult.Parser, new[]{ "CardHand", "BombCount", "CurScore", "TotalScore", "Isspring", "Isbaopei" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSGameSumResult), global::CGSGameSumResult.Parser, new[]{ "HighestScore", "BombCount", "WinCount", "FailureCount", "TotalScore" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSGameResultNtf), global::CGSGameResultNtf.Parser, new[]{ "SeatWin", "MultipleBase", "MultipleBomb", "MultipleSpring", "CurRound", "TotalRound", "UseTime", "Ur", "IsGameover", "Sur" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSGameOverNtf), global::CGSGameOverNtf.Parser, new[]{ "Reason" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSSyncDataNtf), global::CGSSyncDataNtf.Parser, new[]{ "PlayerInfo", "OperateType", "TakeoutIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSBreakReqNtf), global::CGSBreakReqNtf.Parser, new[]{ "Seat", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGSDismissReqNtf), global::CGSDismissReqNtf.Parser, new[]{ "Seat", "LeadSeat", "LeftTime", "PlayerDismiss" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSHandCardItem), global::GD_CGSHandCardItem.Parser, new[]{ "Cards" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSTableCardItem), global::GD_CGSTableCardItem.Parser, new[]{ "Cards", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSPlayerInfoReal), global::GD_CGSPlayerInfoReal.Parser, new[]{ "CardTable", "TimeThink", "CardHand", "LeftCardCount", "WhetherTribute", "TributeCard" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSGameInfoReal), global::GD_CGSGameInfoReal.Parser, new[]{ "StatusGame", "SeatActive", "CurCard", "ScoreBothParties", "IsNextLead" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSHeartBeatReq), global::GD_CGSHeartBeatReq.Parser, new[]{ "Time", "Delay", "HeartCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSHeartBeatAck), global::GD_CGSHeartBeatAck.Parser, new[]{ "Time", "Delay", "HeartCount", "TimeExpend" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSGameEnterReq), global::GD_CGSGameEnterReq.Parser, new[]{ "Tableid", "Username", "Ticket", "Userid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSPlayerInfo), global::GD_CGSPlayerInfo.Parser, new[]{ "Userid", "Seat", "Nickname", "Sex", "Headimg", "Ip", "StatusOnline", "BreakType", "Score", "StatusReady", "Score510K", "WinOrder" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSTableRule), global::GD_CGSTableRule.Parser, new[]{ "PlayerCount", "Round", "TimeThink", "CurRound", "PlayType", "UpgradeType", "StraightFlush", "SixBombDouble", "SixBombLottery", "RemianCard" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSGameEnterAck), global::GD_CGSGameEnterAck.Parser, new[]{ "Result", "StatusGame", "Seat", "Pis", "Ptr", "RuleStr", "GameInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSPlayerReadyReq), global::GD_CGSPlayerReadyReq.Parser, new[]{ "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSPlayerReadyAck), global::GD_CGSPlayerReadyAck.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSTakeoutCardReq), global::GD_CGSTakeoutCardReq.Parser, new[]{ "Cards" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSTakeoutCardAck), global::GD_CGSTakeoutCardAck.Parser, new[]{ "Result", "SelfCardInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSStatusUpdateNtf), global::GD_CGSStatusUpdateNtf.Parser, new[]{ "StatusGame" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSPlayerOnLineNtf), global::GD_CGSPlayerOnLineNtf.Parser, new[]{ "Seat" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSPlayerOffLineNtf), global::GD_CGSPlayerOffLineNtf.Parser, new[]{ "Seat" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSPlayerReadyNtf), global::GD_CGSPlayerReadyNtf.Parser, new[]{ "Seat" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSDealCardNtf), global::GD_CGSDealCardNtf.Parser, new[]{ "Seat", "WhetherTribute", "CurCard", "CardHand", "ScoreBothParties", "MingCardSeat", "OperateType", "MingCard", "ChangePosSeat", "CurPowerPos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSAckOperateDataNtf), global::GD_CGSAckOperateDataNtf.Parser, new[]{ "TributeSeat", "TributeCard" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSOperateDataNtf), global::GD_CGSOperateDataNtf.Parser, new[]{ "TributeSeat", "TributeCard" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSTributeNtf), global::GD_CGSTributeNtf.Parser, new[]{ "TributeSeat", "TributeCard", "HuangongSeat", "HuangongCard", "ActiveSeat", "TimeThink" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSTribudeAck), global::GD_CGSTribudeAck.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSTakeoutCardNtf), global::GD_CGSTakeoutCardNtf.Parser, new[]{ "Seat", "SeatNext", "TimeThink", "CardsTakeout", "Multiple", "BombCount", "RemainderCard", "SeatRanking", "OppositeCards", "OperateType", "IsNextLead" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSBreakReqNtf), global::GD_CGSBreakReqNtf.Parser, new[]{ "Seat", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSDismissReqNtf), global::GD_CGSDismissReqNtf.Parser, new[]{ "Seat", "LeadSeat", "LeftTime", "PlayerDismiss" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSGameUserResult), global::GD_CGSGameUserResult.Parser, new[]{ "CardHand", "CurScore", "TotalScore", "WinOrder", "Score510K" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSGameSumResult), global::GD_CGSGameSumResult.Parser, new[]{ "HighestScore", "WinCount", "FailureCount", "TotalScore", "HeadTourCnt", "LastTourCnt" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSGameResultNtf), global::GD_CGSGameResultNtf.Parser, new[]{ "SeatWin", "MultipleBase", "CurRound", "TotalRound", "UseTime", "Ur", "IsGameover", "Sur" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSGameOverNtf), global::GD_CGSGameOverNtf.Parser, new[]{ "Reason" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSSyncDataNtf), global::GD_CGSSyncDataNtf.Parser, new[]{ "GameInfo", "PlayerInfo", "OperateType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSBreakReq), global::GD_CGSBreakReq.Parser, new[]{ "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSBreakAck), global::GD_CGSBreakAck.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSDismissTableReq), global::GD_CGSDismissTableReq.Parser, new[]{ "Dismiss" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GD_CGSDismissTableAck), global::GD_CGSDismissTableAck.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSHandCardItem), global::DDZ_CGSHandCardItem.Parser, new[]{ "Cards" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSTableCardItem), global::DDZ_CGSTableCardItem.Parser, new[]{ "Cards", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSPlayerInfoReal), global::DDZ_CGSPlayerInfoReal.Parser, new[]{ "CardTable", "TimeThink", "CardHand", "LeftCardCount", "CallScore", "CallLord", "GrabLord" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSGameInfoReal), global::DDZ_CGSGameInfoReal.Parser, new[]{ "StatusGame", "SeatLord", "SeatActive", "CallType", "CallScore", "GrabMultipe", "BombCount", "GameType", "LaiziCard", "BombMultiple", "TweMuch", "TotalMultiple", "MingSeat", "MingCard", "LetCardCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSHeartBeatReq), global::DDZ_CGSHeartBeatReq.Parser, new[]{ "Time", "Delay", "HeartCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSHeartBeatAck), global::DDZ_CGSHeartBeatAck.Parser, new[]{ "Time", "Delay", "HeartCount", "TimeExpend" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSGameEnterReq), global::DDZ_CGSGameEnterReq.Parser, new[]{ "Tableid", "Username", "Ticket", "Userid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSPlayerInfo), global::DDZ_CGSPlayerInfo.Parser, new[]{ "Userid", "Seat", "Nickname", "Sex", "Headimg", "Ip", "StatusOnline", "BreakType", "Score", "StatusReady" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSTableRule), global::DDZ_CGSTableRule.Parser, new[]{ "PlayerCount", "Round", "TimeThink", "SuitCard", "BiGen", "CurRound", "StraightCard", "MixCard", "GameMode", "BombCapped" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSGameEnterAck), global::DDZ_CGSGameEnterAck.Parser, new[]{ "Result", "StatusGame", "Seat", "Pis", "Ptr", "RuleStr" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSPlayerReadyReq), global::DDZ_CGSPlayerReadyReq.Parser, new[]{ "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSPlayerReadyAck), global::DDZ_CGSPlayerReadyAck.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSCallScoreReq), global::DDZ_CGSCallScoreReq.Parser, new[]{ "Score" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSCallScoreAck), global::DDZ_CGSCallScoreAck.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSCallLordReq), global::DDZ_CGSCallLordReq.Parser, new[]{ "CallLord" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSCallLordAck), global::DDZ_CGSCallLordAck.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSGrabLordReq), global::DDZ_CGSGrabLordReq.Parser, new[]{ "GrabLord" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSGrabLordAck), global::DDZ_CGSGrabLordAck.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSTakeoutCardReq), global::DDZ_CGSTakeoutCardReq.Parser, new[]{ "Cards" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSTakeoutCardAck), global::DDZ_CGSTakeoutCardAck.Parser, new[]{ "Result", "SelfCardInfo", "AllCardNum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSTakeoutLaiziCardReq), global::DDZ_CGSTakeoutLaiziCardReq.Parser, new[]{ "Cards", "ReplaceInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSTakeoutLaiziCardAck), global::DDZ_CGSTakeoutLaiziCardAck.Parser, new[]{ "Result", "SelfCardInfo", "AllCardNum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSStatusUpdateNtf), global::DDZ_CGSStatusUpdateNtf.Parser, new[]{ "StatusGame" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSPlayerOnLineNtf), global::DDZ_CGSPlayerOnLineNtf.Parser, new[]{ "Seat" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSPlayerOffLineNtf), global::DDZ_CGSPlayerOffLineNtf.Parser, new[]{ "Seat" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSPlayerReadyNtf), global::DDZ_CGSPlayerReadyNtf.Parser, new[]{ "Seat" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSDealCardNtf), global::DDZ_CGSDealCardNtf.Parser, new[]{ "Seat", "CallType", "CardHand", "CardRule", "LaiziCard", "MingSeat", "MingCard", "RemainderCard" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSSetBaseCardReq), global::DDZ_CGSSetBaseCardReq.Parser, new[]{ "CardsRes" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSSetBaseCardAck), global::DDZ_CGSSetBaseCardAck.Parser, new[]{ "Result", "CardsRes" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSSetBaseCardNtf), global::DDZ_CGSSetBaseCardNtf.Parser, new[]{ "Seat" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSCallScoreNtf), global::DDZ_CGSCallScoreNtf.Parser, new[]{ "Seat", "SeatNext", "Score", "TimeThink" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSCallLordNtf), global::DDZ_CGSCallLordNtf.Parser, new[]{ "Seat", "CallLord", "SeatNext", "TimeThink" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSGrabLordNtf), global::DDZ_CGSGrabLordNtf.Parser, new[]{ "Seat", "GrabLord", "SeatNext", "TimeThink", "Multiple" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSPokerFlowNtf), global::DDZ_CGSPokerFlowNtf.Parser, new[]{ "CardHand", "CardsRes" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSSetLordNtf), global::DDZ_CGSSetLordNtf.Parser, new[]{ "SeatLord", "TimeThink", "Multiple", "LaiziCard", "CardsRes", "LetCardCount", "GrabLordCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSSetCallLordNtf), global::DDZ_CGSSetCallLordNtf.Parser, new[]{ "SeatCalllord", "FirstGrab", "TimeThink" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSTakeoutCardNtf), global::DDZ_CGSTakeoutCardNtf.Parser, new[]{ "Seat", "SeatNext", "TimeThink", "CardsTakeout", "Multiple", "BombCount", "RemainderCard" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSTakeoutLaiziCardNtf), global::DDZ_CGSTakeoutLaiziCardNtf.Parser, new[]{ "Seat", "SeatNext", "TimeThink", "CardsTakeout", "CardsReplace", "Multiple", "BombCount", "Cardsnum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSGameResultNtf), global::DDZ_CGSGameResultNtf.Parser, new[]{ "SeatLord", "SeatWin", "MultipleBase", "MultipleBomb", "MultipleSpring", "MultipleTwemuch", "CurRound", "TotalRound", "UseTime", "Ur", "IsGameover", "Sur", "CardsRes" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSGameSumResult), global::DDZ_CGSGameSumResult.Parser, new[]{ "HighestScore", "WinCount", "FailureCount", "TotalScore" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSGameUserResult), global::DDZ_CGSGameUserResult.Parser, new[]{ "CardHand", "CurScore", "TotalScore" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSGameOverNtf), global::DDZ_CGSGameOverNtf.Parser, new[]{ "Reason" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSSyncDataNtf), global::DDZ_CGSSyncDataNtf.Parser, new[]{ "GameInfo", "PlayerInfo", "CardRes" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSDoubleReq), global::DDZ_CGSDoubleReq.Parser, new[]{ "Isdouble" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSDoubleAck), global::DDZ_CGSDoubleAck.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSDoubleNtf), global::DDZ_CGSDoubleNtf.Parser, new[]{ "Seat", "Isdouble", "ItemUse", "ItemUseNext" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSSpecialStatusNtf), global::DDZ_CGSSpecialStatusNtf.Parser, new[]{ "Status", "Thinktime", "SeatActive", "Candouble" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSLookCardsNtf), global::DDZ_CGSLookCardsNtf.Parser, new[]{ "Seat", "CardsRes" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSBreakReq), global::DDZ_CGSBreakReq.Parser, new[]{ "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSBreakAck), global::DDZ_CGSBreakAck.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSBreakReqNtf), global::DDZ_CGSBreakReqNtf.Parser, new[]{ "Seat", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSDismissTableReq), global::DDZ_CGSDismissTableReq.Parser, new[]{ "Dismiss" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSDismissTableAck), global::DDZ_CGSDismissTableAck.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DDZ_CGSDismissReqNtf), global::DDZ_CGSDismissReqNtf.Parser, new[]{ "Seat", "LeadSeat", "LeftTime", "PlayerDismiss" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqApplyClubRoom), global::ReqApplyClubRoom.Parser, new[]{ "UserID", "RoomID", "Type", "RoomAdmin" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckApplyClubRoom), global::AckApplyClubRoom.Parser, new[]{ "Result", "Type", "ErrMsg", "RoomID", "IsPass" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqEnterClubRoom), global::ReqEnterClubRoom.Parser, new[]{ "UserID", "RoomID", "Cui", "AdminUserID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckEnterClubRoom), global::AckEnterClubRoom.Parser, new[]{ "Result", "ErrMsg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NtfClubRoomSyncData), global::NtfClubRoomSyncData.Parser, new[]{ "RoomID", "LeftCard", "Status", "ApplyCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NtfClubRoomBaseData), global::NtfClubRoomBaseData.Parser, new[]{ "RoomID", "Cri", "TableList", "UserList" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClubRoomInfo), global::ClubRoomInfo.Parser, new[]{ "RoomID", "RoomName", "RuleStr", "Tim", "AuthCard", "AutoAuthCard", "LeftCard", "CreateUserID", "AdminUserID", "Status", "GameID", "Note", "BVipRoom", "MaxTables" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClubTableInfo), global::ClubTableInfo.Parser, new[]{ "ClubTableID", "TableID", "TableState", "TotalRound", "CreateTime", "CurrentRound", "GameID", "RoomID", "TableNO" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClubUserInfo), global::ClubUserInfo.Parser, new[]{ "UserID", "NickName", "HeadImgUrl", "UserSit", "ClubTableID", "StatusOnline", "RoomID", "TableNO" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NtfEnterClubRoom), global::NtfEnterClubRoom.Parser, new[]{ "UserID", "Type", "Cui", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NtfSitClubTable), global::NtfSitClubTable.Parser, new[]{ "UserID", "UserSit", "ClubTableID", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NtfClubUserBreak), global::NtfClubUserBreak.Parser, new[]{ "UserID", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NtfClubRoomChange), global::NtfClubRoomChange.Parser, new[]{ "Type", "Cri", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NtfClubTableStatus), global::NtfClubTableStatus.Parser, new[]{ "ClubTableID", "TableNO", "TableID", "TableState", "TotalRound", "CreateTime", "CurrentRound", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NtfClubPlayerExit), global::NtfClubPlayerExit.Parser, new[]{ "Msg", "RoomID", "UserID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqSitClubTable), global::ReqSitClubTable.Parser, new[]{ "Type", "UserID", "RoomID", "GameID", "TableNO" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckSitClubTable), global::AckSitClubTable.Parser, new[]{ "Type", "Result", "ErrMsg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqExitClubRoom), global::ReqExitClubRoom.Parser, new[]{ "UserID", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckExitClubRoom), global::AckExitClubRoom.Parser, new[]{ "Result", "ErrMsg", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqCreateClubRoom), global::ReqCreateClubRoom.Parser, new[]{ "UserID", "Cri" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckCreateClubRoom), global::AckCreateClubRoom.Parser, new[]{ "Result", "ErrMsg", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqModifyClubRoom), global::ReqModifyClubRoom.Parser, new[]{ "UserID", "Cri" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckModifyClubRoom), global::AckModifyClubRoom.Parser, new[]{ "Result", "ErrMsg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqDelClubRoom), global::ReqDelClubRoom.Parser, new[]{ "UserID", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckDelClubRoom), global::AckDelClubRoom.Parser, new[]{ "Result", "ErrMsg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqClubRoomAuthCard), global::ReqClubRoomAuthCard.Parser, new[]{ "UserID", "RoomID", "AuthCard", "AutoAuthCard" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckClubRoomAuthCard), global::AckClubRoomAuthCard.Parser, new[]{ "Result", "ErrMsg", "AuthCard", "AutoAuthCard", "LeftCard", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqClubAdminMember), global::ReqClubAdminMember.Parser, new[]{ "UserID", "RoomID", "OptUserID", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckClubAdminMember), global::AckClubAdminMember.Parser, new[]{ "Result", "Type", "ErrMsg", "OptUserID", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqClubAdminStatus), global::ReqClubAdminStatus.Parser, new[]{ "UserID", "Onoff", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckClubAdminStatus), global::AckClubAdminStatus.Parser, new[]{ "Result", "Onoff", "ErrMsg", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UserStatusInfo), global::UserStatusInfo.Parser, new[]{ "UserID", "NickName", "HeadImgUrl", "Status", "UpdateTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqPlayerStatus), global::ReqPlayerStatus.Parser, new[]{ "UserID", "RoomID", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckPlayerStatus), global::AckPlayerStatus.Parser, new[]{ "Result", "ErrMsg", "Usis" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqInvitePlayer), global::ReqInvitePlayer.Parser, new[]{ "UserID", "InviteUserID", "RoomID", "TableID", "TableNO" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckInvitePlayer), global::AckInvitePlayer.Parser, new[]{ "Result", "ErrMsg", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NtfInvitePlayer), global::NtfInvitePlayer.Parser, new[]{ "UserID", "NickName", "HeadImgUrl", "RoomID", "ClubRoomName", "ClubRuleStr", "TableID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NtfClubPlayerStatus), global::NtfClubPlayerStatus.Parser, new[]{ "RoomID", "Usis" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣//
/// ------------------------------------hall------------------------------------------//
/// __________________________________________________________________________________//
/// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// 通用通知
/// </summary>
public sealed partial class HallCommonNtf : pb::IMessage<HallCommonNtf> {
  private static readonly pb::MessageParser<HallCommonNtf> _parser = new pb::MessageParser<HallCommonNtf>(() => new HallCommonNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HallCommonNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HallCommonNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HallCommonNtf(HallCommonNtf other) : this() {
    type_ = other.type_;
    userID_ = other.userID_;
    targetUserID_ = other.targetUserID_;
    status_ = other.status_;
    gameID_ = other.gameID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HallCommonNtf Clone() {
    return new HallCommonNtf(this);
  }

  /// <summary>Field number for the "Type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  /// 1：小秘书，2：其他
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 2;
  private int userID_;
  /// <summary>
  /// 用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "TargetUserID" field.</summary>
  public const int TargetUserIDFieldNumber = 3;
  private int targetUserID_;
  /// <summary>
  /// 新版本说明 服务器用
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TargetUserID {
    get { return targetUserID_; }
    set {
      targetUserID_ = value;
    }
  }

  /// <summary>Field number for the "Status" field.</summary>
  public const int StatusFieldNumber = 4;
  private int status_;
  /// <summary>
  /// 状态 0：正常 1：删除
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 5;
  private int gameID_;
  /// <summary>
  /// 游戏id备用
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HallCommonNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HallCommonNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (UserID != other.UserID) return false;
    if (TargetUserID != other.TargetUserID) return false;
    if (Status != other.Status) return false;
    if (GameID != other.GameID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (TargetUserID != 0) hash ^= TargetUserID.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (UserID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UserID);
    }
    if (TargetUserID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TargetUserID);
    }
    if (Status != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Status);
    }
    if (GameID != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(GameID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (TargetUserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetUserID);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HallCommonNtf other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.TargetUserID != 0) {
      TargetUserID = other.TargetUserID;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 16: {
          UserID = input.ReadInt32();
          break;
        }
        case 24: {
          TargetUserID = input.ReadInt32();
          break;
        }
        case 32: {
          Status = input.ReadInt32();
          break;
        }
        case 40: {
          GameID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 请求游戏玩家信息
/// </summary>
public sealed partial class ReqPlayerLogin : pb::IMessage<ReqPlayerLogin> {
  private static readonly pb::MessageParser<ReqPlayerLogin> _parser = new pb::MessageParser<ReqPlayerLogin>(() => new ReqPlayerLogin());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqPlayerLogin> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqPlayerLogin() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqPlayerLogin(ReqPlayerLogin other) : this() {
    userName_ = other.userName_;
    channel_ = other.channel_;
    token_ = other.token_;
    region_ = other.region_;
    gameID_ = other.gameID_;
    Pi = other.pi_ != null ? other.Pi.Clone() : null;
    userID_ = other.userID_;
    gpsX_ = other.gpsX_;
    gpsY_ = other.gpsY_;
    versionJS_ = other.versionJS_;
    versionApk_ = other.versionApk_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqPlayerLogin Clone() {
    return new ReqPlayerLogin(this);
  }

  /// <summary>Field number for the "UserName" field.</summary>
  public const int UserNameFieldNumber = 1;
  private string userName_ = "";
  /// <summary>
  ///  用户名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserName {
    get { return userName_; }
    set {
      userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Channel" field.</summary>
  public const int ChannelFieldNumber = 2;
  private int channel_;
  /// <summary>
  /// 用户渠道 1=微信
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Channel {
    get { return channel_; }
    set {
      channel_ = value;
    }
  }

  /// <summary>Field number for the "Token" field.</summary>
  public const int TokenFieldNumber = 3;
  private string token_ = "";
  /// <summary>
  /// 用户token
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Token {
    get { return token_; }
    set {
      token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Region" field.</summary>
  public const int RegionFieldNumber = 4;
  private string region_ = "";
  /// <summary>
  /// 地区区分规则和房间（待定）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Region {
    get { return region_; }
    set {
      region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 5;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "pi" field.</summary>
  public const int PiFieldNumber = 6;
  private global::PlayerInfo pi_;
  /// <summary>
  /// 用户信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerInfo Pi {
    get { return pi_; }
    set {
      pi_ = value;
    }
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 7;
  private int userID_;
  /// <summary>
  /// userid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "GpsX" field.</summary>
  public const int GpsXFieldNumber = 8;
  private string gpsX_ = "";
  /// <summary>
  /// GPS 经纬
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GpsX {
    get { return gpsX_; }
    set {
      gpsX_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "GpsY" field.</summary>
  public const int GpsYFieldNumber = 9;
  private string gpsY_ = "";
  /// <summary>
  /// GPS 经纬
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GpsY {
    get { return gpsY_; }
    set {
      gpsY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "VersionJS" field.</summary>
  public const int VersionJSFieldNumber = 10;
  private string versionJS_ = "";
  /// <summary>
  /// 热更新版本号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VersionJS {
    get { return versionJS_; }
    set {
      versionJS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "VersionApk" field.</summary>
  public const int VersionApkFieldNumber = 11;
  private string versionApk_ = "";
  /// <summary>
  /// apk&amp; app版本号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VersionApk {
    get { return versionApk_; }
    set {
      versionApk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqPlayerLogin);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqPlayerLogin other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserName != other.UserName) return false;
    if (Channel != other.Channel) return false;
    if (Token != other.Token) return false;
    if (Region != other.Region) return false;
    if (GameID != other.GameID) return false;
    if (!object.Equals(Pi, other.Pi)) return false;
    if (UserID != other.UserID) return false;
    if (GpsX != other.GpsX) return false;
    if (GpsY != other.GpsY) return false;
    if (VersionJS != other.VersionJS) return false;
    if (VersionApk != other.VersionApk) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserName.Length != 0) hash ^= UserName.GetHashCode();
    if (Channel != 0) hash ^= Channel.GetHashCode();
    if (Token.Length != 0) hash ^= Token.GetHashCode();
    if (Region.Length != 0) hash ^= Region.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (pi_ != null) hash ^= Pi.GetHashCode();
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (GpsX.Length != 0) hash ^= GpsX.GetHashCode();
    if (GpsY.Length != 0) hash ^= GpsY.GetHashCode();
    if (VersionJS.Length != 0) hash ^= VersionJS.GetHashCode();
    if (VersionApk.Length != 0) hash ^= VersionApk.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(UserName);
    }
    if (Channel != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Channel);
    }
    if (Token.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Token);
    }
    if (Region.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Region);
    }
    if (GameID != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(GameID);
    }
    if (pi_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Pi);
    }
    if (UserID != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(UserID);
    }
    if (GpsX.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(GpsX);
    }
    if (GpsY.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(GpsY);
    }
    if (VersionJS.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(VersionJS);
    }
    if (VersionApk.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(VersionApk);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
    }
    if (Channel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
    }
    if (Token.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
    }
    if (Region.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (pi_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pi);
    }
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (GpsX.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GpsX);
    }
    if (GpsY.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GpsY);
    }
    if (VersionJS.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionJS);
    }
    if (VersionApk.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionApk);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqPlayerLogin other) {
    if (other == null) {
      return;
    }
    if (other.UserName.Length != 0) {
      UserName = other.UserName;
    }
    if (other.Channel != 0) {
      Channel = other.Channel;
    }
    if (other.Token.Length != 0) {
      Token = other.Token;
    }
    if (other.Region.Length != 0) {
      Region = other.Region;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.pi_ != null) {
      if (pi_ == null) {
        pi_ = new global::PlayerInfo();
      }
      Pi.MergeFrom(other.Pi);
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.GpsX.Length != 0) {
      GpsX = other.GpsX;
    }
    if (other.GpsY.Length != 0) {
      GpsY = other.GpsY;
    }
    if (other.VersionJS.Length != 0) {
      VersionJS = other.VersionJS;
    }
    if (other.VersionApk.Length != 0) {
      VersionApk = other.VersionApk;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          UserName = input.ReadString();
          break;
        }
        case 16: {
          Channel = input.ReadInt32();
          break;
        }
        case 26: {
          Token = input.ReadString();
          break;
        }
        case 34: {
          Region = input.ReadString();
          break;
        }
        case 40: {
          GameID = input.ReadInt32();
          break;
        }
        case 50: {
          if (pi_ == null) {
            pi_ = new global::PlayerInfo();
          }
          input.ReadMessage(pi_);
          break;
        }
        case 56: {
          UserID = input.ReadInt32();
          break;
        }
        case 66: {
          GpsX = input.ReadString();
          break;
        }
        case 74: {
          GpsY = input.ReadString();
          break;
        }
        case 82: {
          VersionJS = input.ReadString();
          break;
        }
        case 90: {
          VersionApk = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 返回游戏玩家信息
/// </summary>
public sealed partial class AckPlayerLogin : pb::IMessage<AckPlayerLogin> {
  private static readonly pb::MessageParser<AckPlayerLogin> _parser = new pb::MessageParser<AckPlayerLogin>(() => new AckPlayerLogin());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckPlayerLogin> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckPlayerLogin() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckPlayerLogin(AckPlayerLogin other) : this() {
    userID_ = other.userID_;
    result_ = other.result_;
    Pi = other.pi_ != null ? other.Pi.Clone() : null;
    cardCount_ = other.cardCount_;
    ownTableID_ = other.ownTableID_;
    tableID_ = other.tableID_;
    gameID_ = other.gameID_;
    ownGameID_ = other.ownGameID_;
    assistStatus_ = other.assistStatus_;
    clubList_ = other.clubList_.Clone();
    clubID_ = other.clubID_;
    roomID_ = other.roomID_;
    maxRoomCount_ = other.maxRoomCount_;
    maxVipRoomCount_ = other.maxVipRoomCount_;
    roomAdmin_ = other.roomAdmin_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckPlayerLogin Clone() {
    return new AckPlayerLogin(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 2;
  private int result_;
  /// <summary>
  /// 返回结果（0:成功 != 0失败错误码）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "pi" field.</summary>
  public const int PiFieldNumber = 3;
  private global::PlayerInfo pi_;
  /// <summary>
  /// 用户信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerInfo Pi {
    get { return pi_; }
    set {
      pi_ = value;
    }
  }

  /// <summary>Field number for the "CardCount" field.</summary>
  public const int CardCountFieldNumber = 4;
  private int cardCount_;
  /// <summary>
  /// 用户房卡数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CardCount {
    get { return cardCount_; }
    set {
      cardCount_ = value;
    }
  }

  /// <summary>Field number for the "OwnTableID" field.</summary>
  public const int OwnTableIDFieldNumber = 5;
  private int ownTableID_;
  /// <summary>
  /// 已经创建的房间id	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OwnTableID {
    get { return ownTableID_; }
    set {
      ownTableID_ = value;
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 6;
  private int tableID_;
  /// <summary>
  /// 玩家所在tableid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 7;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "OwnGameID" field.</summary>
  public const int OwnGameIDFieldNumber = 8;
  private int ownGameID_;
  /// <summary>
  /// 已经创建的房间所属gameid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OwnGameID {
    get { return ownGameID_; }
    set {
      ownGameID_ = value;
    }
  }

  /// <summary>Field number for the "AssistStatus" field.</summary>
  public const int AssistStatusFieldNumber = 9;
  private int assistStatus_;
  /// <summary>
  /// 小秘书状态0：创建 1 删除
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AssistStatus {
    get { return assistStatus_; }
    set {
      assistStatus_ = value;
    }
  }

  /// <summary>Field number for the "ClubList" field.</summary>
  public const int ClubListFieldNumber = 10;
  private static readonly pb::FieldCodec<int> _repeated_clubList_codec
      = pb::FieldCodec.ForInt32(82);
  private readonly pbc::RepeatedField<int> clubList_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 用户加入的亲友圈包间列表（作为直接进入房间的鉴权使用）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> ClubList {
    get { return clubList_; }
  }

  /// <summary>Field number for the "ClubID" field.</summary>
  public const int ClubIDFieldNumber = 11;
  private int clubID_;
  /// <summary>
  /// 已经进入的亲友圈id---------------废弃
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClubID {
    get { return clubID_; }
    set {
      clubID_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 12;
  private int roomID_;
  /// <summary>
  /// 已经进入的亲友圈房间-------------废弃
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "MaxRoomCount" field.</summary>
  public const int MaxRoomCountFieldNumber = 13;
  private int maxRoomCount_;
  /// <summary>
  /// 最大能开的亲友圈数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxRoomCount {
    get { return maxRoomCount_; }
    set {
      maxRoomCount_ = value;
    }
  }

  /// <summary>Field number for the "MaxVipRoomCount" field.</summary>
  public const int MaxVipRoomCountFieldNumber = 14;
  private int maxVipRoomCount_;
  /// <summary>
  /// 最大能开的vip包房数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxVipRoomCount {
    get { return maxVipRoomCount_; }
    set {
      maxVipRoomCount_ = value;
    }
  }

  /// <summary>Field number for the "RoomAdmin" field.</summary>
  public const int RoomAdminFieldNumber = 15;
  private int roomAdmin_;
  /// <summary>
  /// 是几个亲友圈的管理员
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomAdmin {
    get { return roomAdmin_; }
    set {
      roomAdmin_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckPlayerLogin);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckPlayerLogin other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (Result != other.Result) return false;
    if (!object.Equals(Pi, other.Pi)) return false;
    if (CardCount != other.CardCount) return false;
    if (OwnTableID != other.OwnTableID) return false;
    if (TableID != other.TableID) return false;
    if (GameID != other.GameID) return false;
    if (OwnGameID != other.OwnGameID) return false;
    if (AssistStatus != other.AssistStatus) return false;
    if(!clubList_.Equals(other.clubList_)) return false;
    if (ClubID != other.ClubID) return false;
    if (RoomID != other.RoomID) return false;
    if (MaxRoomCount != other.MaxRoomCount) return false;
    if (MaxVipRoomCount != other.MaxVipRoomCount) return false;
    if (RoomAdmin != other.RoomAdmin) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (pi_ != null) hash ^= Pi.GetHashCode();
    if (CardCount != 0) hash ^= CardCount.GetHashCode();
    if (OwnTableID != 0) hash ^= OwnTableID.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (OwnGameID != 0) hash ^= OwnGameID.GetHashCode();
    if (AssistStatus != 0) hash ^= AssistStatus.GetHashCode();
    hash ^= clubList_.GetHashCode();
    if (ClubID != 0) hash ^= ClubID.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    if (MaxRoomCount != 0) hash ^= MaxRoomCount.GetHashCode();
    if (MaxVipRoomCount != 0) hash ^= MaxVipRoomCount.GetHashCode();
    if (RoomAdmin != 0) hash ^= RoomAdmin.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (Result != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Result);
    }
    if (pi_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Pi);
    }
    if (CardCount != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(CardCount);
    }
    if (OwnTableID != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(OwnTableID);
    }
    if (TableID != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(TableID);
    }
    if (GameID != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(GameID);
    }
    if (OwnGameID != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(OwnGameID);
    }
    if (AssistStatus != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(AssistStatus);
    }
    clubList_.WriteTo(output, _repeated_clubList_codec);
    if (ClubID != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(ClubID);
    }
    if (RoomID != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(RoomID);
    }
    if (MaxRoomCount != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(MaxRoomCount);
    }
    if (MaxVipRoomCount != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(MaxVipRoomCount);
    }
    if (RoomAdmin != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(RoomAdmin);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (pi_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pi);
    }
    if (CardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardCount);
    }
    if (OwnTableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnTableID);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (OwnGameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnGameID);
    }
    if (AssistStatus != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssistStatus);
    }
    size += clubList_.CalculateSize(_repeated_clubList_codec);
    if (ClubID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClubID);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    if (MaxRoomCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRoomCount);
    }
    if (MaxVipRoomCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxVipRoomCount);
    }
    if (RoomAdmin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomAdmin);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckPlayerLogin other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.pi_ != null) {
      if (pi_ == null) {
        pi_ = new global::PlayerInfo();
      }
      Pi.MergeFrom(other.Pi);
    }
    if (other.CardCount != 0) {
      CardCount = other.CardCount;
    }
    if (other.OwnTableID != 0) {
      OwnTableID = other.OwnTableID;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.OwnGameID != 0) {
      OwnGameID = other.OwnGameID;
    }
    if (other.AssistStatus != 0) {
      AssistStatus = other.AssistStatus;
    }
    clubList_.Add(other.clubList_);
    if (other.ClubID != 0) {
      ClubID = other.ClubID;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
    if (other.MaxRoomCount != 0) {
      MaxRoomCount = other.MaxRoomCount;
    }
    if (other.MaxVipRoomCount != 0) {
      MaxVipRoomCount = other.MaxVipRoomCount;
    }
    if (other.RoomAdmin != 0) {
      RoomAdmin = other.RoomAdmin;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          Result = input.ReadInt32();
          break;
        }
        case 26: {
          if (pi_ == null) {
            pi_ = new global::PlayerInfo();
          }
          input.ReadMessage(pi_);
          break;
        }
        case 32: {
          CardCount = input.ReadInt32();
          break;
        }
        case 40: {
          OwnTableID = input.ReadInt32();
          break;
        }
        case 48: {
          TableID = input.ReadInt32();
          break;
        }
        case 56: {
          GameID = input.ReadInt32();
          break;
        }
        case 64: {
          OwnGameID = input.ReadInt32();
          break;
        }
        case 72: {
          AssistStatus = input.ReadInt32();
          break;
        }
        case 82:
        case 80: {
          clubList_.AddEntriesFrom(input, _repeated_clubList_codec);
          break;
        }
        case 88: {
          ClubID = input.ReadInt32();
          break;
        }
        case 96: {
          RoomID = input.ReadInt32();
          break;
        }
        case 104: {
          MaxRoomCount = input.ReadInt32();
          break;
        }
        case 112: {
          MaxVipRoomCount = input.ReadInt32();
          break;
        }
        case 120: {
          RoomAdmin = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 用户被踢告知
/// </summary>
public sealed partial class OGGateReqKickPeople : pb::IMessage<OGGateReqKickPeople> {
  private static readonly pb::MessageParser<OGGateReqKickPeople> _parser = new pb::MessageParser<OGGateReqKickPeople>(() => new OGGateReqKickPeople());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OGGateReqKickPeople> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OGGateReqKickPeople() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OGGateReqKickPeople(OGGateReqKickPeople other) : this() {
    userID_ = other.userID_;
    reason_ = other.reason_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OGGateReqKickPeople Clone() {
    return new OGGateReqKickPeople(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户名 代理专用
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "Reason" field.</summary>
  public const int ReasonFieldNumber = 2;
  private int reason_;
  /// <summary>
  /// 用户被踢原因
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Reason {
    get { return reason_; }
    set {
      reason_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OGGateReqKickPeople);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OGGateReqKickPeople other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (Reason != other.Reason) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (Reason != 0) hash ^= Reason.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (Reason != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Reason);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (Reason != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reason);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OGGateReqKickPeople other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.Reason != 0) {
      Reason = other.Reason;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          Reason = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 桌内动作，切出/切入
/// </summary>
public sealed partial class ReqBreak : pb::IMessage<ReqBreak> {
  private static readonly pb::MessageParser<ReqBreak> _parser = new pb::MessageParser<ReqBreak>(() => new ReqBreak());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqBreak> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqBreak() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqBreak(ReqBreak other) : this() {
    userID_ = other.userID_;
    tableID_ = other.tableID_;
    gameID_ = other.gameID_;
    targetUserID_ = other.targetUserID_;
    breakType_ = other.breakType_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqBreak Clone() {
    return new ReqBreak(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 2;
  private int tableID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 3;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "TargetUserID" field.</summary>
  public const int TargetUserIDFieldNumber = 4;
  private int targetUserID_;
  /// <summary>
  /// gate用给谁广播
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TargetUserID {
    get { return targetUserID_; }
    set {
      targetUserID_ = value;
    }
  }

  /// <summary>Field number for the "BreakType" field.</summary>
  public const int BreakTypeFieldNumber = 5;
  private int breakType_;
  /// <summary>
  ///  0:切回  2:切走	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BreakType {
    get { return breakType_; }
    set {
      breakType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqBreak);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqBreak other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (TableID != other.TableID) return false;
    if (GameID != other.GameID) return false;
    if (TargetUserID != other.TargetUserID) return false;
    if (BreakType != other.BreakType) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (TargetUserID != 0) hash ^= TargetUserID.GetHashCode();
    if (BreakType != 0) hash ^= BreakType.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (TableID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableID);
    }
    if (GameID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(GameID);
    }
    if (TargetUserID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TargetUserID);
    }
    if (BreakType != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(BreakType);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (TargetUserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetUserID);
    }
    if (BreakType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakType);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqBreak other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.TargetUserID != 0) {
      TargetUserID = other.TargetUserID;
    }
    if (other.BreakType != 0) {
      BreakType = other.BreakType;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          TableID = input.ReadInt32();
          break;
        }
        case 24: {
          GameID = input.ReadInt32();
          break;
        }
        case 32: {
          TargetUserID = input.ReadInt32();
          break;
        }
        case 40: {
          BreakType = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 用户位置变化
/// </summary>
public sealed partial class ReqChangePos : pb::IMessage<ReqChangePos> {
  private static readonly pb::MessageParser<ReqChangePos> _parser = new pb::MessageParser<ReqChangePos>(() => new ReqChangePos());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqChangePos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqChangePos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqChangePos(ReqChangePos other) : this() {
    userID_ = other.userID_;
    targetUserID_ = other.targetUserID_;
    gpsX_ = other.gpsX_;
    gpsY_ = other.gpsY_;
    tableID_ = other.tableID_;
    gameID_ = other.gameID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqChangePos Clone() {
    return new ReqChangePos(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "TargetUserID" field.</summary>
  public const int TargetUserIDFieldNumber = 2;
  private int targetUserID_;
  /// <summary>
  /// gate用给谁广播
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TargetUserID {
    get { return targetUserID_; }
    set {
      targetUserID_ = value;
    }
  }

  /// <summary>Field number for the "GpsX" field.</summary>
  public const int GpsXFieldNumber = 3;
  private string gpsX_ = "";
  /// <summary>
  /// GPS 经纬
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GpsX {
    get { return gpsX_; }
    set {
      gpsX_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "GpsY" field.</summary>
  public const int GpsYFieldNumber = 4;
  private string gpsY_ = "";
  /// <summary>
  /// GPS 经纬
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GpsY {
    get { return gpsY_; }
    set {
      gpsY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 5;
  private int tableID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 6;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqChangePos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqChangePos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (TargetUserID != other.TargetUserID) return false;
    if (GpsX != other.GpsX) return false;
    if (GpsY != other.GpsY) return false;
    if (TableID != other.TableID) return false;
    if (GameID != other.GameID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (TargetUserID != 0) hash ^= TargetUserID.GetHashCode();
    if (GpsX.Length != 0) hash ^= GpsX.GetHashCode();
    if (GpsY.Length != 0) hash ^= GpsY.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (TargetUserID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TargetUserID);
    }
    if (GpsX.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(GpsX);
    }
    if (GpsY.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(GpsY);
    }
    if (TableID != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(TableID);
    }
    if (GameID != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(GameID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (TargetUserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetUserID);
    }
    if (GpsX.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GpsX);
    }
    if (GpsY.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GpsY);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqChangePos other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.TargetUserID != 0) {
      TargetUserID = other.TargetUserID;
    }
    if (other.GpsX.Length != 0) {
      GpsX = other.GpsX;
    }
    if (other.GpsY.Length != 0) {
      GpsY = other.GpsY;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          TargetUserID = input.ReadInt32();
          break;
        }
        case 26: {
          GpsX = input.ReadString();
          break;
        }
        case 34: {
          GpsY = input.ReadString();
          break;
        }
        case 40: {
          TableID = input.ReadInt32();
          break;
        }
        case 48: {
          GameID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
  private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo(PlayerInfo other) : this() {
    userID_ = other.userID_;
    channel_ = other.channel_;
    nickName_ = other.nickName_;
    sex_ = other.sex_;
    headImgUrl_ = other.headImgUrl_;
    ipAddress_ = other.ipAddress_;
    gateIpAddress_ = other.gateIpAddress_;
    userName_ = other.userName_;
    userSit_ = other.userSit_;
    tableID_ = other.tableID_;
    cardCount_ = other.cardCount_;
    gameID_ = other.gameID_;
    city_ = other.city_;
    idNumber_ = other.idNumber_;
    realName_ = other.realName_;
    gpsX_ = other.gpsX_;
    gpsY_ = other.gpsY_;
    promotID_ = other.promotID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo Clone() {
    return new PlayerInfo(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  ///  用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "Channel" field.</summary>
  public const int ChannelFieldNumber = 2;
  private int channel_;
  /// <summary>
  /// 用户渠道 1=微信	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Channel {
    get { return channel_; }
    set {
      channel_ = value;
    }
  }

  /// <summary>Field number for the "NickName" field.</summary>
  public const int NickNameFieldNumber = 3;
  private string nickName_ = "";
  /// <summary>
  /// 昵称
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NickName {
    get { return nickName_; }
    set {
      nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Sex" field.</summary>
  public const int SexFieldNumber = 4;
  private int sex_;
  /// <summary>
  /// 用户性别
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Sex {
    get { return sex_; }
    set {
      sex_ = value;
    }
  }

  /// <summary>Field number for the "HeadImgUrl" field.</summary>
  public const int HeadImgUrlFieldNumber = 5;
  private string headImgUrl_ = "";
  /// <summary>
  /// 头像地址
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HeadImgUrl {
    get { return headImgUrl_; }
    set {
      headImgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "IpAddress" field.</summary>
  public const int IpAddressFieldNumber = 6;
  private uint ipAddress_;
  /// <summary>
  /// ip地址
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint IpAddress {
    get { return ipAddress_; }
    set {
      ipAddress_ = value;
    }
  }

  /// <summary>Field number for the "GateIpAddress" field.</summary>
  public const int GateIpAddressFieldNumber = 7;
  private uint gateIpAddress_;
  /// <summary>
  /// 登陆的代理ip地址
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GateIpAddress {
    get { return gateIpAddress_; }
    set {
      gateIpAddress_ = value;
    }
  }

  /// <summary>Field number for the "UserName" field.</summary>
  public const int UserNameFieldNumber = 8;
  private string userName_ = "";
  /// <summary>
  /// 玩家名称
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserName {
    get { return userName_; }
    set {
      userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "UserSit" field.</summary>
  public const int UserSitFieldNumber = 9;
  private int userSit_;
  /// <summary>
  /// 玩家座位    0东 1南 2西 3北
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserSit {
    get { return userSit_; }
    set {
      userSit_ = value;
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 10;
  private int tableID_;
  /// <summary>
  /// 玩家所在tableid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "CardCount" field.</summary>
  public const int CardCountFieldNumber = 11;
  private int cardCount_;
  /// <summary>
  /// 用户房卡数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CardCount {
    get { return cardCount_; }
    set {
      cardCount_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 12;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "City" field.</summary>
  public const int CityFieldNumber = 13;
  private string city_ = "";
  /// <summary>
  /// 用户城市
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string City {
    get { return city_; }
    set {
      city_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "IdNumber" field.</summary>
  public const int IdNumberFieldNumber = 14;
  private string idNumber_ = "";
  /// <summary>
  /// 身份证号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string IdNumber {
    get { return idNumber_; }
    set {
      idNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "RealName" field.</summary>
  public const int RealNameFieldNumber = 15;
  private string realName_ = "";
  /// <summary>
  /// 姓名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RealName {
    get { return realName_; }
    set {
      realName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "GpsX" field.</summary>
  public const int GpsXFieldNumber = 16;
  private string gpsX_ = "";
  /// <summary>
  /// GPS 经纬
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GpsX {
    get { return gpsX_; }
    set {
      gpsX_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "GpsY" field.</summary>
  public const int GpsYFieldNumber = 17;
  private string gpsY_ = "";
  /// <summary>
  /// GPS 经纬
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GpsY {
    get { return gpsY_; }
    set {
      gpsY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "PromotID" field.</summary>
  public const int PromotIDFieldNumber = 18;
  private int promotID_;
  /// <summary>
  /// 推广员id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PromotID {
    get { return promotID_; }
    set {
      promotID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (Channel != other.Channel) return false;
    if (NickName != other.NickName) return false;
    if (Sex != other.Sex) return false;
    if (HeadImgUrl != other.HeadImgUrl) return false;
    if (IpAddress != other.IpAddress) return false;
    if (GateIpAddress != other.GateIpAddress) return false;
    if (UserName != other.UserName) return false;
    if (UserSit != other.UserSit) return false;
    if (TableID != other.TableID) return false;
    if (CardCount != other.CardCount) return false;
    if (GameID != other.GameID) return false;
    if (City != other.City) return false;
    if (IdNumber != other.IdNumber) return false;
    if (RealName != other.RealName) return false;
    if (GpsX != other.GpsX) return false;
    if (GpsY != other.GpsY) return false;
    if (PromotID != other.PromotID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (Channel != 0) hash ^= Channel.GetHashCode();
    if (NickName.Length != 0) hash ^= NickName.GetHashCode();
    if (Sex != 0) hash ^= Sex.GetHashCode();
    if (HeadImgUrl.Length != 0) hash ^= HeadImgUrl.GetHashCode();
    if (IpAddress != 0) hash ^= IpAddress.GetHashCode();
    if (GateIpAddress != 0) hash ^= GateIpAddress.GetHashCode();
    if (UserName.Length != 0) hash ^= UserName.GetHashCode();
    if (UserSit != 0) hash ^= UserSit.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (CardCount != 0) hash ^= CardCount.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (City.Length != 0) hash ^= City.GetHashCode();
    if (IdNumber.Length != 0) hash ^= IdNumber.GetHashCode();
    if (RealName.Length != 0) hash ^= RealName.GetHashCode();
    if (GpsX.Length != 0) hash ^= GpsX.GetHashCode();
    if (GpsY.Length != 0) hash ^= GpsY.GetHashCode();
    if (PromotID != 0) hash ^= PromotID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (Channel != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Channel);
    }
    if (NickName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(NickName);
    }
    if (Sex != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Sex);
    }
    if (HeadImgUrl.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(HeadImgUrl);
    }
    if (IpAddress != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(IpAddress);
    }
    if (GateIpAddress != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(GateIpAddress);
    }
    if (UserName.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(UserName);
    }
    if (UserSit != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(UserSit);
    }
    if (TableID != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(TableID);
    }
    if (CardCount != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(CardCount);
    }
    if (GameID != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(GameID);
    }
    if (City.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(City);
    }
    if (IdNumber.Length != 0) {
      output.WriteRawTag(114);
      output.WriteString(IdNumber);
    }
    if (RealName.Length != 0) {
      output.WriteRawTag(122);
      output.WriteString(RealName);
    }
    if (GpsX.Length != 0) {
      output.WriteRawTag(130, 1);
      output.WriteString(GpsX);
    }
    if (GpsY.Length != 0) {
      output.WriteRawTag(138, 1);
      output.WriteString(GpsY);
    }
    if (PromotID != 0) {
      output.WriteRawTag(144, 1);
      output.WriteInt32(PromotID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (Channel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
    }
    if (NickName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
    }
    if (Sex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
    }
    if (HeadImgUrl.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadImgUrl);
    }
    if (IpAddress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpAddress);
    }
    if (GateIpAddress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GateIpAddress);
    }
    if (UserName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
    }
    if (UserSit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserSit);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (CardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardCount);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (City.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
    }
    if (IdNumber.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(IdNumber);
    }
    if (RealName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RealName);
    }
    if (GpsX.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(GpsX);
    }
    if (GpsY.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(GpsY);
    }
    if (PromotID != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(PromotID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerInfo other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.Channel != 0) {
      Channel = other.Channel;
    }
    if (other.NickName.Length != 0) {
      NickName = other.NickName;
    }
    if (other.Sex != 0) {
      Sex = other.Sex;
    }
    if (other.HeadImgUrl.Length != 0) {
      HeadImgUrl = other.HeadImgUrl;
    }
    if (other.IpAddress != 0) {
      IpAddress = other.IpAddress;
    }
    if (other.GateIpAddress != 0) {
      GateIpAddress = other.GateIpAddress;
    }
    if (other.UserName.Length != 0) {
      UserName = other.UserName;
    }
    if (other.UserSit != 0) {
      UserSit = other.UserSit;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.CardCount != 0) {
      CardCount = other.CardCount;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.City.Length != 0) {
      City = other.City;
    }
    if (other.IdNumber.Length != 0) {
      IdNumber = other.IdNumber;
    }
    if (other.RealName.Length != 0) {
      RealName = other.RealName;
    }
    if (other.GpsX.Length != 0) {
      GpsX = other.GpsX;
    }
    if (other.GpsY.Length != 0) {
      GpsY = other.GpsY;
    }
    if (other.PromotID != 0) {
      PromotID = other.PromotID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          Channel = input.ReadInt32();
          break;
        }
        case 26: {
          NickName = input.ReadString();
          break;
        }
        case 32: {
          Sex = input.ReadInt32();
          break;
        }
        case 42: {
          HeadImgUrl = input.ReadString();
          break;
        }
        case 48: {
          IpAddress = input.ReadUInt32();
          break;
        }
        case 56: {
          GateIpAddress = input.ReadUInt32();
          break;
        }
        case 66: {
          UserName = input.ReadString();
          break;
        }
        case 72: {
          UserSit = input.ReadInt32();
          break;
        }
        case 80: {
          TableID = input.ReadInt32();
          break;
        }
        case 88: {
          CardCount = input.ReadInt32();
          break;
        }
        case 96: {
          GameID = input.ReadInt32();
          break;
        }
        case 106: {
          City = input.ReadString();
          break;
        }
        case 114: {
          IdNumber = input.ReadString();
          break;
        }
        case 122: {
          RealName = input.ReadString();
          break;
        }
        case 130: {
          GpsX = input.ReadString();
          break;
        }
        case 138: {
          GpsY = input.ReadString();
          break;
        }
        case 144: {
          PromotID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerTableInfo : pb::IMessage<PlayerTableInfo> {
  private static readonly pb::MessageParser<PlayerTableInfo> _parser = new pb::MessageParser<PlayerTableInfo>(() => new PlayerTableInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerTableInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerTableInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerTableInfo(PlayerTableInfo other) : this() {
    userID_ = other.userID_;
    status_ = other.status_;
    seat_ = other.seat_;
    isPayed_ = other.isPayed_;
    isReady_ = other.isReady_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerTableInfo Clone() {
    return new PlayerTableInfo(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  ///  用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "Status" field.</summary>
  public const int StatusFieldNumber = 2;
  private int status_;
  /// <summary>
  ///  用户状态	在线断线状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "Seat" field.</summary>
  public const int SeatFieldNumber = 3;
  private int seat_;
  /// <summary>
  ///  用户方位	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "IsPayed" field.</summary>
  public const int IsPayedFieldNumber = 4;
  private int isPayed_;
  /// <summary>
  ///  均摊房卡付费标志	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsPayed {
    get { return isPayed_; }
    set {
      isPayed_ = value;
    }
  }

  /// <summary>Field number for the "IsReady" field.</summary>
  public const int IsReadyFieldNumber = 5;
  private int isReady_;
  /// <summary>
  ///  用户准备状态	0:未准备 1:已准备
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsReady {
    get { return isReady_; }
    set {
      isReady_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerTableInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerTableInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (Status != other.Status) return false;
    if (Seat != other.Seat) return false;
    if (IsPayed != other.IsPayed) return false;
    if (IsReady != other.IsReady) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (IsPayed != 0) hash ^= IsPayed.GetHashCode();
    if (IsReady != 0) hash ^= IsReady.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (Status != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Status);
    }
    if (Seat != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Seat);
    }
    if (IsPayed != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(IsPayed);
    }
    if (IsReady != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(IsReady);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (IsPayed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsPayed);
    }
    if (IsReady != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsReady);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerTableInfo other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.IsPayed != 0) {
      IsPayed = other.IsPayed;
    }
    if (other.IsReady != 0) {
      IsReady = other.IsReady;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          Status = input.ReadInt32();
          break;
        }
        case 24: {
          Seat = input.ReadInt32();
          break;
        }
        case 32: {
          IsPayed = input.ReadInt32();
          break;
        }
        case 40: {
          IsReady = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 请求游戏玩家信息
/// </summary>
public sealed partial class ReqRefreshCard : pb::IMessage<ReqRefreshCard> {
  private static readonly pb::MessageParser<ReqRefreshCard> _parser = new pb::MessageParser<ReqRefreshCard>(() => new ReqRefreshCard());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqRefreshCard> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqRefreshCard() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqRefreshCard(ReqRefreshCard other) : this() {
    userID_ = other.userID_;
    gameID_ = other.gameID_;
    channel_ = other.channel_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqRefreshCard Clone() {
    return new ReqRefreshCard(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  ///  用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 2;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "Channel" field.</summary>
  public const int ChannelFieldNumber = 3;
  private int channel_;
  /// <summary>
  /// 用户渠道 1=微信
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Channel {
    get { return channel_; }
    set {
      channel_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqRefreshCard);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqRefreshCard other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (GameID != other.GameID) return false;
    if (Channel != other.Channel) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (Channel != 0) hash ^= Channel.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (GameID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GameID);
    }
    if (Channel != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Channel);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (Channel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqRefreshCard other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.Channel != 0) {
      Channel = other.Channel;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          GameID = input.ReadInt32();
          break;
        }
        case 24: {
          Channel = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 返回游戏玩家信息
/// </summary>
public sealed partial class AckRefreshCard : pb::IMessage<AckRefreshCard> {
  private static readonly pb::MessageParser<AckRefreshCard> _parser = new pb::MessageParser<AckRefreshCard>(() => new AckRefreshCard());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckRefreshCard> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckRefreshCard() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckRefreshCard(AckRefreshCard other) : this() {
    userID_ = other.userID_;
    result_ = other.result_;
    cardCount_ = other.cardCount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckRefreshCard Clone() {
    return new AckRefreshCard(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 2;
  private int result_;
  /// <summary>
  /// 返回结果（0:成功 != 0失败错误码）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "CardCount" field.</summary>
  public const int CardCountFieldNumber = 3;
  private int cardCount_;
  /// <summary>
  /// 房卡数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CardCount {
    get { return cardCount_; }
    set {
      cardCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckRefreshCard);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckRefreshCard other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (Result != other.Result) return false;
    if (CardCount != other.CardCount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (CardCount != 0) hash ^= CardCount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (Result != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Result);
    }
    if (CardCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(CardCount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (CardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardCount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckRefreshCard other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.CardCount != 0) {
      CardCount = other.CardCount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          Result = input.ReadInt32();
          break;
        }
        case 24: {
          CardCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 公告通知
/// </summary>
public sealed partial class ReqNotice : pb::IMessage<ReqNotice> {
  private static readonly pb::MessageParser<ReqNotice> _parser = new pb::MessageParser<ReqNotice>(() => new ReqNotice());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqNotice> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqNotice() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqNotice(ReqNotice other) : this() {
    time_ = other.time_;
    gameID_ = other.gameID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqNotice Clone() {
    return new ReqNotice(this);
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 1;
  private string time_ = "";
  /// <summary>
  /// 当前时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Time {
    get { return time_; }
    set {
      time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 2;
  private int gameID_;
  /// <summary>
  /// 游戏id		
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqNotice);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqNotice other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Time != other.Time) return false;
    if (GameID != other.GameID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Time.Length != 0) hash ^= Time.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Time.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Time);
    }
    if (GameID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GameID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Time.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqNotice other) {
    if (other == null) {
      return;
    }
    if (other.Time.Length != 0) {
      Time = other.Time;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Time = input.ReadString();
          break;
        }
        case 16: {
          GameID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class AckNotice : pb::IMessage<AckNotice> {
  private static readonly pb::MessageParser<AckNotice> _parser = new pb::MessageParser<AckNotice>(() => new AckNotice());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckNotice> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckNotice() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckNotice(AckNotice other) : this() {
    result_ = other.result_;
    notice_ = other.notice_;
    newVersion_ = other.newVersion_;
    rollingMsg_ = other.rollingMsg_;
    tickCount_ = other.tickCount_;
    cacheTime_ = other.cacheTime_;
    gameID_ = other.gameID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckNotice Clone() {
    return new AckNotice(this);
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "Notice" field.</summary>
  public const int NoticeFieldNumber = 2;
  private string notice_ = "";
  /// <summary>
  /// 官方公告
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Notice {
    get { return notice_; }
    set {
      notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "NewVersion" field.</summary>
  public const int NewVersionFieldNumber = 3;
  private string newVersion_ = "";
  /// <summary>
  /// 新版本说明
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NewVersion {
    get { return newVersion_; }
    set {
      newVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "RollingMsg" field.</summary>
  public const int RollingMsgFieldNumber = 4;
  private string rollingMsg_ = "";
  /// <summary>
  /// 小喇叭
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RollingMsg {
    get { return rollingMsg_; }
    set {
      rollingMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "TickCount" field.</summary>
  public const int TickCountFieldNumber = 5;
  private int tickCount_;
  /// <summary>
  /// 用于时间戳校验
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TickCount {
    get { return tickCount_; }
    set {
      tickCount_ = value;
    }
  }

  /// <summary>Field number for the "CacheTime" field.</summary>
  public const int CacheTimeFieldNumber = 6;
  private int cacheTime_;
  /// <summary>
  /// 缓存时间配置单位s
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CacheTime {
    get { return cacheTime_; }
    set {
      cacheTime_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 7;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckNotice);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckNotice other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Notice != other.Notice) return false;
    if (NewVersion != other.NewVersion) return false;
    if (RollingMsg != other.RollingMsg) return false;
    if (TickCount != other.TickCount) return false;
    if (CacheTime != other.CacheTime) return false;
    if (GameID != other.GameID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Notice.Length != 0) hash ^= Notice.GetHashCode();
    if (NewVersion.Length != 0) hash ^= NewVersion.GetHashCode();
    if (RollingMsg.Length != 0) hash ^= RollingMsg.GetHashCode();
    if (TickCount != 0) hash ^= TickCount.GetHashCode();
    if (CacheTime != 0) hash ^= CacheTime.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Notice.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Notice);
    }
    if (NewVersion.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(NewVersion);
    }
    if (RollingMsg.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(RollingMsg);
    }
    if (TickCount != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(TickCount);
    }
    if (CacheTime != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(CacheTime);
    }
    if (GameID != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(GameID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Notice.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Notice);
    }
    if (NewVersion.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NewVersion);
    }
    if (RollingMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RollingMsg);
    }
    if (TickCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TickCount);
    }
    if (CacheTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CacheTime);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckNotice other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Notice.Length != 0) {
      Notice = other.Notice;
    }
    if (other.NewVersion.Length != 0) {
      NewVersion = other.NewVersion;
    }
    if (other.RollingMsg.Length != 0) {
      RollingMsg = other.RollingMsg;
    }
    if (other.TickCount != 0) {
      TickCount = other.TickCount;
    }
    if (other.CacheTime != 0) {
      CacheTime = other.CacheTime;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          Notice = input.ReadString();
          break;
        }
        case 26: {
          NewVersion = input.ReadString();
          break;
        }
        case 34: {
          RollingMsg = input.ReadString();
          break;
        }
        case 40: {
          TickCount = input.ReadInt32();
          break;
        }
        case 48: {
          CacheTime = input.ReadInt32();
          break;
        }
        case 56: {
          GameID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 请求聊天
/// </summary>
public sealed partial class ReqChatMsg : pb::IMessage<ReqChatMsg> {
  private static readonly pb::MessageParser<ReqChatMsg> _parser = new pb::MessageParser<ReqChatMsg>(() => new ReqChatMsg());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqChatMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqChatMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqChatMsg(ReqChatMsg other) : this() {
    userID_ = other.userID_;
    tableID_ = other.tableID_;
    result_ = other.result_;
    indexMsg_ = other.indexMsg_;
    textMsg_ = other.textMsg_;
    soundMsg_ = other.soundMsg_;
    targetUserID_ = other.targetUserID_;
    gameID_ = other.gameID_;
    userIDTo_ = other.userIDTo_;
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqChatMsg Clone() {
    return new ReqChatMsg(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  ///  用户名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 2;
  private int tableID_;
  /// <summary>
  /// 聊天通道，桌子号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 3;
  private int result_;
  /// <summary>
  /// 聊天结果 0成功，!=0错误码
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "IndexMsg" field.</summary>
  public const int IndexMsgFieldNumber = 4;
  private int indexMsg_;
  /// <summary>
  /// 配置好的场景语音/或者互动表情序号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IndexMsg {
    get { return indexMsg_; }
    set {
      indexMsg_ = value;
    }
  }

  /// <summary>Field number for the "TextMsg" field.</summary>
  public const int TextMsgFieldNumber = 5;
  private string textMsg_ = "";
  /// <summary>
  /// 文本消息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TextMsg {
    get { return textMsg_; }
    set {
      textMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "SoundMsg" field.</summary>
  public const int SoundMsgFieldNumber = 6;
  private string soundMsg_ = "";
  /// <summary>
  /// 声音消息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SoundMsg {
    get { return soundMsg_; }
    set {
      soundMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "TargetUserID" field.</summary>
  public const int TargetUserIDFieldNumber = 7;
  private int targetUserID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TargetUserID {
    get { return targetUserID_; }
    set {
      targetUserID_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 8;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "UserIDTo" field.</summary>
  public const int UserIDToFieldNumber = 9;
  private int userIDTo_;
  /// <summary>
  /// 谁给谁发	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserIDTo {
    get { return userIDTo_; }
    set {
      userIDTo_ = value;
    }
  }

  /// <summary>Field number for the "Type" field.</summary>
  public const int TypeFieldNumber = 10;
  private int type_;
  /// <summary>
  /// 聊天类型 0:互动表情 1:文字 2:场景语音 3:语音	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqChatMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqChatMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (TableID != other.TableID) return false;
    if (Result != other.Result) return false;
    if (IndexMsg != other.IndexMsg) return false;
    if (TextMsg != other.TextMsg) return false;
    if (SoundMsg != other.SoundMsg) return false;
    if (TargetUserID != other.TargetUserID) return false;
    if (GameID != other.GameID) return false;
    if (UserIDTo != other.UserIDTo) return false;
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (IndexMsg != 0) hash ^= IndexMsg.GetHashCode();
    if (TextMsg.Length != 0) hash ^= TextMsg.GetHashCode();
    if (SoundMsg.Length != 0) hash ^= SoundMsg.GetHashCode();
    if (TargetUserID != 0) hash ^= TargetUserID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (UserIDTo != 0) hash ^= UserIDTo.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (TableID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableID);
    }
    if (Result != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Result);
    }
    if (IndexMsg != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(IndexMsg);
    }
    if (TextMsg.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(TextMsg);
    }
    if (SoundMsg.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(SoundMsg);
    }
    if (TargetUserID != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(TargetUserID);
    }
    if (GameID != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(GameID);
    }
    if (UserIDTo != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(UserIDTo);
    }
    if (Type != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (IndexMsg != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IndexMsg);
    }
    if (TextMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TextMsg);
    }
    if (SoundMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SoundMsg);
    }
    if (TargetUserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetUserID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (UserIDTo != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserIDTo);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqChatMsg other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.IndexMsg != 0) {
      IndexMsg = other.IndexMsg;
    }
    if (other.TextMsg.Length != 0) {
      TextMsg = other.TextMsg;
    }
    if (other.SoundMsg.Length != 0) {
      SoundMsg = other.SoundMsg;
    }
    if (other.TargetUserID != 0) {
      TargetUserID = other.TargetUserID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.UserIDTo != 0) {
      UserIDTo = other.UserIDTo;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          TableID = input.ReadInt32();
          break;
        }
        case 24: {
          Result = input.ReadInt32();
          break;
        }
        case 32: {
          IndexMsg = input.ReadInt32();
          break;
        }
        case 42: {
          TextMsg = input.ReadString();
          break;
        }
        case 50: {
          SoundMsg = input.ReadString();
          break;
        }
        case 56: {
          TargetUserID = input.ReadInt32();
          break;
        }
        case 64: {
          GameID = input.ReadInt32();
          break;
        }
        case 72: {
          UserIDTo = input.ReadInt32();
          break;
        }
        case 80: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 红运桌子规则定义扩展
/// </summary>
public sealed partial class TableRule : pb::IMessage<TableRule> {
  private static readonly pb::MessageParser<TableRule> _parser = new pb::MessageParser<TableRule>(() => new TableRule());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TableRule> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TableRule() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TableRule(TableRule other) : this() {
    ruleID_ = other.ruleID_;
    playerCount_ = other.playerCount_;
    playerCountMin_ = other.playerCountMin_;
    round_ = other.round_;
    Rulerunout = other.rulerunout_ != null ? other.Rulerunout.Clone() : null;
    Rulerddz = other.rulerddz_ != null ? other.Rulerddz.Clone() : null;
    RuleJS = other.ruleJS_ != null ? other.RuleJS.Clone() : null;
    Rulergd = other.rulergd_ != null ? other.Rulergd.Clone() : null;
    ruleStr_ = other.ruleStr_;
    RuleCY = other.ruleCY_ != null ? other.RuleCY.Clone() : null;
    Ruledda5 = other.ruledda5_ != null ? other.Ruledda5.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TableRule Clone() {
    return new TableRule(this);
  }

  /// <summary>Field number for the "RuleID" field.</summary>
  public const int RuleIDFieldNumber = 1;
  private int ruleID_;
  /// <summary>
  /// 11:推到胡，12：呼和浩特，13：划水，14：一口香，15：包头，16：鄂尔多斯，17：通辽 ，10000（跑的快），13000(斗地主) 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RuleID {
    get { return ruleID_; }
    set {
      ruleID_ = value;
    }
  }

  /// <summary>Field number for the "PlayerCount" field.</summary>
  public const int PlayerCountFieldNumber = 2;
  private int playerCount_;
  /// <summary>
  /// 玩家数 2，3，4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerCount {
    get { return playerCount_; }
    set {
      playerCount_ = value;
    }
  }

  /// <summary>Field number for the "PlayerCountMin" field.</summary>
  public const int PlayerCountMinFieldNumber = 3;
  private int playerCountMin_;
  /// <summary>
  /// 最少玩家数 2，3，4，少于等于playercount，达到这个人数即可开牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerCountMin {
    get { return playerCountMin_; }
    set {
      playerCountMin_ = value;
    }
  }

  /// <summary>Field number for the "Round" field.</summary>
  public const int RoundFieldNumber = 4;
  private int round_;
  /// <summary>
  /// 该桌子的圈数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Round {
    get { return round_; }
    set {
      round_ = value;
    }
  }

  /// <summary>Field number for the "rulerunout" field.</summary>
  public const int RulerunoutFieldNumber = 5;
  private global::RuleRunout rulerunout_;
  /// <summary>
  /// 跑得快规则定义
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RuleRunout Rulerunout {
    get { return rulerunout_; }
    set {
      rulerunout_ = value;
    }
  }

  /// <summary>Field number for the "rulerddz" field.</summary>
  public const int RulerddzFieldNumber = 6;
  private global::RuleDDZ rulerddz_;
  /// <summary>
  /// 斗地主规则定义
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RuleDDZ Rulerddz {
    get { return rulerddz_; }
    set {
      rulerddz_ = value;
    }
  }

  /// <summary>Field number for the "ruleJS" field.</summary>
  public const int RuleJSFieldNumber = 7;
  private global::RuleJS ruleJS_;
  /// <summary>
  /// 江苏专区
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RuleJS RuleJS {
    get { return ruleJS_; }
    set {
      ruleJS_ = value;
    }
  }

  /// <summary>Field number for the "rulergd" field.</summary>
  public const int RulergdFieldNumber = 8;
  private global::RuleGD rulergd_;
  /// <summary>
  /// 掼蛋 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RuleGD Rulergd {
    get { return rulergd_; }
    set {
      rulergd_ = value;
    }
  }

  /// <summary>Field number for the "ruleStr" field.</summary>
  public const int RuleStrFieldNumber = 9;
  private string ruleStr_ = "";
  /// <summary>
  /// 规则描述
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RuleStr {
    get { return ruleStr_; }
    set {
      ruleStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ruleCY" field.</summary>
  public const int RuleCYFieldNumber = 10;
  private global::RuleCY ruleCY_;
  /// <summary>
  /// 草原麻将
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RuleCY RuleCY {
    get { return ruleCY_; }
    set {
      ruleCY_ = value;
    }
  }

  /// <summary>Field number for the "ruledda5" field.</summary>
  public const int Ruledda5FieldNumber = 11;
  private global::RuleDDA5 ruledda5_;
  /// <summary>
  /// 打大A规则定义
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RuleDDA5 Ruledda5 {
    get { return ruledda5_; }
    set {
      ruledda5_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TableRule);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TableRule other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RuleID != other.RuleID) return false;
    if (PlayerCount != other.PlayerCount) return false;
    if (PlayerCountMin != other.PlayerCountMin) return false;
    if (Round != other.Round) return false;
    if (!object.Equals(Rulerunout, other.Rulerunout)) return false;
    if (!object.Equals(Rulerddz, other.Rulerddz)) return false;
    if (!object.Equals(RuleJS, other.RuleJS)) return false;
    if (!object.Equals(Rulergd, other.Rulergd)) return false;
    if (RuleStr != other.RuleStr) return false;
    if (!object.Equals(RuleCY, other.RuleCY)) return false;
    if (!object.Equals(Ruledda5, other.Ruledda5)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RuleID != 0) hash ^= RuleID.GetHashCode();
    if (PlayerCount != 0) hash ^= PlayerCount.GetHashCode();
    if (PlayerCountMin != 0) hash ^= PlayerCountMin.GetHashCode();
    if (Round != 0) hash ^= Round.GetHashCode();
    if (rulerunout_ != null) hash ^= Rulerunout.GetHashCode();
    if (rulerddz_ != null) hash ^= Rulerddz.GetHashCode();
    if (ruleJS_ != null) hash ^= RuleJS.GetHashCode();
    if (rulergd_ != null) hash ^= Rulergd.GetHashCode();
    if (RuleStr.Length != 0) hash ^= RuleStr.GetHashCode();
    if (ruleCY_ != null) hash ^= RuleCY.GetHashCode();
    if (ruledda5_ != null) hash ^= Ruledda5.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RuleID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RuleID);
    }
    if (PlayerCount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PlayerCount);
    }
    if (PlayerCountMin != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(PlayerCountMin);
    }
    if (Round != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Round);
    }
    if (rulerunout_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Rulerunout);
    }
    if (rulerddz_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Rulerddz);
    }
    if (ruleJS_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(RuleJS);
    }
    if (rulergd_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Rulergd);
    }
    if (RuleStr.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(RuleStr);
    }
    if (ruleCY_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(RuleCY);
    }
    if (ruledda5_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(Ruledda5);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RuleID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RuleID);
    }
    if (PlayerCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerCount);
    }
    if (PlayerCountMin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerCountMin);
    }
    if (Round != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
    }
    if (rulerunout_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rulerunout);
    }
    if (rulerddz_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rulerddz);
    }
    if (ruleJS_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RuleJS);
    }
    if (rulergd_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rulergd);
    }
    if (RuleStr.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RuleStr);
    }
    if (ruleCY_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RuleCY);
    }
    if (ruledda5_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ruledda5);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TableRule other) {
    if (other == null) {
      return;
    }
    if (other.RuleID != 0) {
      RuleID = other.RuleID;
    }
    if (other.PlayerCount != 0) {
      PlayerCount = other.PlayerCount;
    }
    if (other.PlayerCountMin != 0) {
      PlayerCountMin = other.PlayerCountMin;
    }
    if (other.Round != 0) {
      Round = other.Round;
    }
    if (other.rulerunout_ != null) {
      if (rulerunout_ == null) {
        rulerunout_ = new global::RuleRunout();
      }
      Rulerunout.MergeFrom(other.Rulerunout);
    }
    if (other.rulerddz_ != null) {
      if (rulerddz_ == null) {
        rulerddz_ = new global::RuleDDZ();
      }
      Rulerddz.MergeFrom(other.Rulerddz);
    }
    if (other.ruleJS_ != null) {
      if (ruleJS_ == null) {
        ruleJS_ = new global::RuleJS();
      }
      RuleJS.MergeFrom(other.RuleJS);
    }
    if (other.rulergd_ != null) {
      if (rulergd_ == null) {
        rulergd_ = new global::RuleGD();
      }
      Rulergd.MergeFrom(other.Rulergd);
    }
    if (other.RuleStr.Length != 0) {
      RuleStr = other.RuleStr;
    }
    if (other.ruleCY_ != null) {
      if (ruleCY_ == null) {
        ruleCY_ = new global::RuleCY();
      }
      RuleCY.MergeFrom(other.RuleCY);
    }
    if (other.ruledda5_ != null) {
      if (ruledda5_ == null) {
        ruledda5_ = new global::RuleDDA5();
      }
      Ruledda5.MergeFrom(other.Ruledda5);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RuleID = input.ReadInt32();
          break;
        }
        case 16: {
          PlayerCount = input.ReadInt32();
          break;
        }
        case 24: {
          PlayerCountMin = input.ReadInt32();
          break;
        }
        case 32: {
          Round = input.ReadInt32();
          break;
        }
        case 42: {
          if (rulerunout_ == null) {
            rulerunout_ = new global::RuleRunout();
          }
          input.ReadMessage(rulerunout_);
          break;
        }
        case 50: {
          if (rulerddz_ == null) {
            rulerddz_ = new global::RuleDDZ();
          }
          input.ReadMessage(rulerddz_);
          break;
        }
        case 58: {
          if (ruleJS_ == null) {
            ruleJS_ = new global::RuleJS();
          }
          input.ReadMessage(ruleJS_);
          break;
        }
        case 66: {
          if (rulergd_ == null) {
            rulergd_ = new global::RuleGD();
          }
          input.ReadMessage(rulergd_);
          break;
        }
        case 74: {
          RuleStr = input.ReadString();
          break;
        }
        case 82: {
          if (ruleCY_ == null) {
            ruleCY_ = new global::RuleCY();
          }
          input.ReadMessage(ruleCY_);
          break;
        }
        case 90: {
          if (ruledda5_ == null) {
            ruledda5_ = new global::RuleDDA5();
          }
          input.ReadMessage(ruledda5_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 江苏徐州规则定义
/// </summary>
public sealed partial class RuleJS : pb::IMessage<RuleJS> {
  private static readonly pb::MessageParser<RuleJS> _parser = new pb::MessageParser<RuleJS>(() => new RuleJS());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RuleJS> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleJS() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleJS(RuleJS other) : this() {
    hunCount_ = other.hunCount_;
    huType_ = other.huType_;
    feng_ = other.feng_;
    baoTing_ = other.baoTing_;
    xiaZuiType_ = other.xiaZuiType_;
    yiPaoDuoXiang_ = other.yiPaoDuoXiang_;
    huFanlimit_ = other.huFanlimit_;
    nZiMoType_ = other.nZiMoType_;
    nGangHuaType_ = other.nGangHuaType_;
    nHuanZhangType_ = other.nHuanZhangType_;
    nYaoJiuJiangDui_ = other.nYaoJiuJiangDui_;
    nMenQingZhongZhang_ = other.nMenQingZhongZhang_;
    nTianDiHu_ = other.nTianDiHu_;
    nTingPai_ = other.nTingPai_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleJS Clone() {
    return new RuleJS(this);
  }

  /// <summary>Field number for the "HunCount" field.</summary>
  public const int HunCountFieldNumber = 1;
  private int hunCount_;
  /// <summary>
  /// 混牌数量0，1，2，3，4， Ruleid = 6是红中乱顶0,4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HunCount {
    get { return hunCount_; }
    set {
      hunCount_ = value;
    }
  }

  /// <summary>Field number for the "HuType" field.</summary>
  public const int HuTypeFieldNumber = 2;
  private int huType_;
  /// <summary>
  /// 和牌类型  0:点炮和，1:自摸, 2: 软次 3:硬次  4：点炮赢三家（平胡）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HuType {
    get { return huType_; }
    set {
      huType_ = value;
    }
  }

  /// <summary>Field number for the "Feng" field.</summary>
  public const int FengFieldNumber = 3;
  private int feng_;
  /// <summary>
  /// 是否带风（0不带风，1带风）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Feng {
    get { return feng_; }
    set {
      feng_ = value;
    }
  }

  /// <summary>Field number for the "BaoTing" field.</summary>
  public const int BaoTingFieldNumber = 4;
  private int baoTing_;
  /// <summary>
  /// 是否报听（0不报听，1报听）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BaoTing {
    get { return baoTing_; }
    set {
      baoTing_ = value;
    }
  }

  /// <summary>Field number for the "XiaZuiType" field.</summary>
  public const int XiaZuiTypeFieldNumber = 5;
  private int xiaZuiType_;
  /// <summary>
  /// 下嘴（0不下嘴，1下嘴，2最多下一嘴）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int XiaZuiType {
    get { return xiaZuiType_; }
    set {
      xiaZuiType_ = value;
    }
  }

  /// <summary>Field number for the "YiPaoDuoXiang" field.</summary>
  public const int YiPaoDuoXiangFieldNumber = 6;
  private int yiPaoDuoXiang_;
  /// <summary>
  /// 是否一炮多响（0截胡，1一炮多响）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int YiPaoDuoXiang {
    get { return yiPaoDuoXiang_; }
    set {
      yiPaoDuoXiang_ = value;
    }
  }

  /// <summary>Field number for the "HuFanlimit" field.</summary>
  public const int HuFanlimitFieldNumber = 7;
  private int huFanlimit_;
  /// <summary>
  /// 血战麻将 胡番封顶
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HuFanlimit {
    get { return huFanlimit_; }
    set {
      huFanlimit_ = value;
    }
  }

  /// <summary>Field number for the "nZiMoType" field.</summary>
  public const int NZiMoTypeFieldNumber = 8;
  private int nZiMoType_;
  /// <summary>
  /// 血战麻将 自摸加分类型(0自摸加底，1自摸加番)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NZiMoType {
    get { return nZiMoType_; }
    set {
      nZiMoType_ = value;
    }
  }

  /// <summary>Field number for the "nGangHuaType" field.</summary>
  public const int NGangHuaTypeFieldNumber = 9;
  private int nGangHuaType_;
  /// <summary>
  /// 血战麻将 杠花胡牌类型(0点炮，1自摸)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NGangHuaType {
    get { return nGangHuaType_; }
    set {
      nGangHuaType_ = value;
    }
  }

  /// <summary>Field number for the "nHuanZhangType" field.</summary>
  public const int NHuanZhangTypeFieldNumber = 10;
  private int nHuanZhangType_;
  /// <summary>
  /// 血战麻将 自摸加分类型(0换3张，1换四张)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NHuanZhangType {
    get { return nHuanZhangType_; }
    set {
      nHuanZhangType_ = value;
    }
  }

  /// <summary>Field number for the "nYaoJiuJiangDui" field.</summary>
  public const int NYaoJiuJiangDuiFieldNumber = 11;
  private int nYaoJiuJiangDui_;
  /// <summary>
  /// 血战麻将 幺九将对
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NYaoJiuJiangDui {
    get { return nYaoJiuJiangDui_; }
    set {
      nYaoJiuJiangDui_ = value;
    }
  }

  /// <summary>Field number for the "nMenQingZhongZhang" field.</summary>
  public const int NMenQingZhongZhangFieldNumber = 12;
  private int nMenQingZhongZhang_;
  /// <summary>
  /// 血战麻将 门清中张
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NMenQingZhongZhang {
    get { return nMenQingZhongZhang_; }
    set {
      nMenQingZhongZhang_ = value;
    }
  }

  /// <summary>Field number for the "nTianDiHu" field.</summary>
  public const int NTianDiHuFieldNumber = 13;
  private int nTianDiHu_;
  /// <summary>
  /// 血战麻将 天地胡
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NTianDiHu {
    get { return nTianDiHu_; }
    set {
      nTianDiHu_ = value;
    }
  }

  /// <summary>Field number for the "nTingPai" field.</summary>
  public const int NTingPaiFieldNumber = 14;
  private int nTingPai_;
  /// <summary>
  /// 血战麻将 听牌提示
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NTingPai {
    get { return nTingPai_; }
    set {
      nTingPai_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RuleJS);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RuleJS other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HunCount != other.HunCount) return false;
    if (HuType != other.HuType) return false;
    if (Feng != other.Feng) return false;
    if (BaoTing != other.BaoTing) return false;
    if (XiaZuiType != other.XiaZuiType) return false;
    if (YiPaoDuoXiang != other.YiPaoDuoXiang) return false;
    if (HuFanlimit != other.HuFanlimit) return false;
    if (NZiMoType != other.NZiMoType) return false;
    if (NGangHuaType != other.NGangHuaType) return false;
    if (NHuanZhangType != other.NHuanZhangType) return false;
    if (NYaoJiuJiangDui != other.NYaoJiuJiangDui) return false;
    if (NMenQingZhongZhang != other.NMenQingZhongZhang) return false;
    if (NTianDiHu != other.NTianDiHu) return false;
    if (NTingPai != other.NTingPai) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HunCount != 0) hash ^= HunCount.GetHashCode();
    if (HuType != 0) hash ^= HuType.GetHashCode();
    if (Feng != 0) hash ^= Feng.GetHashCode();
    if (BaoTing != 0) hash ^= BaoTing.GetHashCode();
    if (XiaZuiType != 0) hash ^= XiaZuiType.GetHashCode();
    if (YiPaoDuoXiang != 0) hash ^= YiPaoDuoXiang.GetHashCode();
    if (HuFanlimit != 0) hash ^= HuFanlimit.GetHashCode();
    if (NZiMoType != 0) hash ^= NZiMoType.GetHashCode();
    if (NGangHuaType != 0) hash ^= NGangHuaType.GetHashCode();
    if (NHuanZhangType != 0) hash ^= NHuanZhangType.GetHashCode();
    if (NYaoJiuJiangDui != 0) hash ^= NYaoJiuJiangDui.GetHashCode();
    if (NMenQingZhongZhang != 0) hash ^= NMenQingZhongZhang.GetHashCode();
    if (NTianDiHu != 0) hash ^= NTianDiHu.GetHashCode();
    if (NTingPai != 0) hash ^= NTingPai.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HunCount != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(HunCount);
    }
    if (HuType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(HuType);
    }
    if (Feng != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Feng);
    }
    if (BaoTing != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(BaoTing);
    }
    if (XiaZuiType != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(XiaZuiType);
    }
    if (YiPaoDuoXiang != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(YiPaoDuoXiang);
    }
    if (HuFanlimit != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(HuFanlimit);
    }
    if (NZiMoType != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(NZiMoType);
    }
    if (NGangHuaType != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(NGangHuaType);
    }
    if (NHuanZhangType != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(NHuanZhangType);
    }
    if (NYaoJiuJiangDui != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(NYaoJiuJiangDui);
    }
    if (NMenQingZhongZhang != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(NMenQingZhongZhang);
    }
    if (NTianDiHu != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(NTianDiHu);
    }
    if (NTingPai != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(NTingPai);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HunCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HunCount);
    }
    if (HuType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HuType);
    }
    if (Feng != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Feng);
    }
    if (BaoTing != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaoTing);
    }
    if (XiaZuiType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(XiaZuiType);
    }
    if (YiPaoDuoXiang != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(YiPaoDuoXiang);
    }
    if (HuFanlimit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HuFanlimit);
    }
    if (NZiMoType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NZiMoType);
    }
    if (NGangHuaType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NGangHuaType);
    }
    if (NHuanZhangType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NHuanZhangType);
    }
    if (NYaoJiuJiangDui != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NYaoJiuJiangDui);
    }
    if (NMenQingZhongZhang != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NMenQingZhongZhang);
    }
    if (NTianDiHu != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NTianDiHu);
    }
    if (NTingPai != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NTingPai);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RuleJS other) {
    if (other == null) {
      return;
    }
    if (other.HunCount != 0) {
      HunCount = other.HunCount;
    }
    if (other.HuType != 0) {
      HuType = other.HuType;
    }
    if (other.Feng != 0) {
      Feng = other.Feng;
    }
    if (other.BaoTing != 0) {
      BaoTing = other.BaoTing;
    }
    if (other.XiaZuiType != 0) {
      XiaZuiType = other.XiaZuiType;
    }
    if (other.YiPaoDuoXiang != 0) {
      YiPaoDuoXiang = other.YiPaoDuoXiang;
    }
    if (other.HuFanlimit != 0) {
      HuFanlimit = other.HuFanlimit;
    }
    if (other.NZiMoType != 0) {
      NZiMoType = other.NZiMoType;
    }
    if (other.NGangHuaType != 0) {
      NGangHuaType = other.NGangHuaType;
    }
    if (other.NHuanZhangType != 0) {
      NHuanZhangType = other.NHuanZhangType;
    }
    if (other.NYaoJiuJiangDui != 0) {
      NYaoJiuJiangDui = other.NYaoJiuJiangDui;
    }
    if (other.NMenQingZhongZhang != 0) {
      NMenQingZhongZhang = other.NMenQingZhongZhang;
    }
    if (other.NTianDiHu != 0) {
      NTianDiHu = other.NTianDiHu;
    }
    if (other.NTingPai != 0) {
      NTingPai = other.NTingPai;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          HunCount = input.ReadInt32();
          break;
        }
        case 16: {
          HuType = input.ReadInt32();
          break;
        }
        case 24: {
          Feng = input.ReadInt32();
          break;
        }
        case 32: {
          BaoTing = input.ReadInt32();
          break;
        }
        case 40: {
          XiaZuiType = input.ReadInt32();
          break;
        }
        case 48: {
          YiPaoDuoXiang = input.ReadInt32();
          break;
        }
        case 56: {
          HuFanlimit = input.ReadInt32();
          break;
        }
        case 64: {
          NZiMoType = input.ReadInt32();
          break;
        }
        case 72: {
          NGangHuaType = input.ReadInt32();
          break;
        }
        case 80: {
          NHuanZhangType = input.ReadInt32();
          break;
        }
        case 88: {
          NYaoJiuJiangDui = input.ReadInt32();
          break;
        }
        case 96: {
          NMenQingZhongZhang = input.ReadInt32();
          break;
        }
        case 104: {
          NTianDiHu = input.ReadInt32();
          break;
        }
        case 112: {
          NTingPai = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 草原规则定义
/// </summary>
public sealed partial class RuleCY : pb::IMessage<RuleCY> {
  private static readonly pb::MessageParser<RuleCY> _parser = new pb::MessageParser<RuleCY>(() => new RuleCY());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RuleCY> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleCY() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleCY(RuleCY other) : this() {
    hunCount_ = other.hunCount_;
    huType_ = other.huType_;
    FZ = other.fZ_ != null ? other.FZ.Clone() : null;
    HuPX = other.huPX_ != null ? other.HuPX.Clone() : null;
    feng_ = other.feng_;
    baoTing_ = other.baoTing_;
    doubleQingYiSe_ = other.doubleQingYiSe_;
    dunLaPao_ = other.dunLaPao_;
    peng_ = other.peng_;
    pengTing_ = other.pengTing_;
    chi_ = other.chi_;
    chiTing_ = other.chiTing_;
    diFen_ = other.diFen_;
    yiPaoDuoXiang_ = other.yiPaoDuoXiang_;
    huangZhuangHuangGang_ = other.huangZhuangHuangGang_;
    qiangGangHu_ = other.qiangGangHu_;
    huangZhuangCount_ = other.huangZhuangCount_;
    doubleMenqing_ = other.doubleMenqing_;
    doubleZimo_ = other.doubleZimo_;
    kanFen_ = other.kanFen_;
    huaHu_ = other.huaHu_;
    lianZhuang_ = other.lianZhuang_;
    haiDiLaoYue_ = other.haiDiLaoYue_;
    pingLong_ = other.pingLong_;
    jiuLianBaoDeng_ = other.jiuLianBaoDeng_;
    ganghua_ = other.ganghua_;
    duanYao_ = other.duanYao_;
    gouZhang_ = other.gouZhang_;
    queYiMen_ = other.queYiMen_;
    daiHua_ = other.daiHua_;
    bianKD_ = other.bianKD_;
    huFanlimit_ = other.huFanlimit_;
    nZiMoType_ = other.nZiMoType_;
    nGangHuaType_ = other.nGangHuaType_;
    nHuanZhangType_ = other.nHuanZhangType_;
    nYaoJiuJiangDui_ = other.nYaoJiuJiangDui_;
    nMenQingZhongZhang_ = other.nMenQingZhongZhang_;
    nTianDiHu_ = other.nTianDiHu_;
    nTingPai_ = other.nTingPai_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleCY Clone() {
    return new RuleCY(this);
  }

  /// <summary>Field number for the "HunCount" field.</summary>
  public const int HunCountFieldNumber = 1;
  private int hunCount_;
  /// <summary>
  /// 混牌数量0，1，2，3，4， Ruleid = 6是红中乱顶0,4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HunCount {
    get { return hunCount_; }
    set {
      hunCount_ = value;
    }
  }

  /// <summary>Field number for the "HuType" field.</summary>
  public const int HuTypeFieldNumber = 2;
  private int huType_;
  /// <summary>
  /// 和牌类型  0:点炮和，1:自摸, 2: 软次 3:硬次  4：点炮赢三家（平胡）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HuType {
    get { return huType_; }
    set {
      huType_ = value;
    }
  }

  /// <summary>Field number for the "FZ" field.</summary>
  public const int FZFieldNumber = 3;
  private global::FanZhong fZ_;
  /// <summary>
  /// 蕃种翻倍定义
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FanZhong FZ {
    get { return fZ_; }
    set {
      fZ_ = value;
    }
  }

  /// <summary>Field number for the "HuPX" field.</summary>
  public const int HuPXFieldNumber = 4;
  private global::HuPaiXing huPX_;
  /// <summary>
  /// 胡牌牌型定义
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HuPaiXing HuPX {
    get { return huPX_; }
    set {
      huPX_ = value;
    }
  }

  /// <summary>Field number for the "Feng" field.</summary>
  public const int FengFieldNumber = 5;
  private int feng_;
  /// <summary>
  /// 是否带风
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Feng {
    get { return feng_; }
    set {
      feng_ = value;
    }
  }

  /// <summary>Field number for the "BaoTing" field.</summary>
  public const int BaoTingFieldNumber = 6;
  private int baoTing_;
  /// <summary>
  /// 是否报听，0,1 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BaoTing {
    get { return baoTing_; }
    set {
      baoTing_ = value;
    }
  }

  /// <summary>Field number for the "DoubleQingYiSe" field.</summary>
  public const int DoubleQingYiSeFieldNumber = 7;
  private int doubleQingYiSe_;
  /// <summary>
  /// 清一色翻倍 1 2
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DoubleQingYiSe {
    get { return doubleQingYiSe_; }
    set {
      doubleQingYiSe_ = value;
    }
  }

  /// <summary>Field number for the "DunLaPao" field.</summary>
  public const int DunLaPaoFieldNumber = 8;
  private int dunLaPao_;
  /// <summary>
  /// 是否蹲拉跑 0，1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DunLaPao {
    get { return dunLaPao_; }
    set {
      dunLaPao_ = value;
    }
  }

  /// <summary>Field number for the "Peng" field.</summary>
  public const int PengFieldNumber = 9;
  private int peng_;
  /// <summary>
  /// 能否碰牌 0，1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Peng {
    get { return peng_; }
    set {
      peng_ = value;
    }
  }

  /// <summary>Field number for the "PengTing" field.</summary>
  public const int PengTingFieldNumber = 10;
  private int pengTing_;
  /// <summary>
  /// 是否碰听 0，1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PengTing {
    get { return pengTing_; }
    set {
      pengTing_ = value;
    }
  }

  /// <summary>Field number for the "Chi" field.</summary>
  public const int ChiFieldNumber = 11;
  private int chi_;
  /// <summary>
  /// 能否吃牌 0，1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Chi {
    get { return chi_; }
    set {
      chi_ = value;
    }
  }

  /// <summary>Field number for the "ChiTing" field.</summary>
  public const int ChiTingFieldNumber = 12;
  private int chiTing_;
  /// <summary>
  /// 是否吃听 0，1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ChiTing {
    get { return chiTing_; }
    set {
      chiTing_ = value;
    }
  }

  /// <summary>Field number for the "DiFen" field.</summary>
  public const int DiFenFieldNumber = 13;
  private int diFen_;
  /// <summary>
  /// 底分 1，3，5，10，15
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DiFen {
    get { return diFen_; }
    set {
      diFen_ = value;
    }
  }

  /// <summary>Field number for the "YiPaoDuoXiang" field.</summary>
  public const int YiPaoDuoXiangFieldNumber = 14;
  private int yiPaoDuoXiang_;
  /// <summary>
  /// 是否一炮多响 0，1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int YiPaoDuoXiang {
    get { return yiPaoDuoXiang_; }
    set {
      yiPaoDuoXiang_ = value;
    }
  }

  /// <summary>Field number for the "HuangZhuangHuangGang" field.</summary>
  public const int HuangZhuangHuangGangFieldNumber = 15;
  private int huangZhuangHuangGang_;
  /// <summary>
  /// 是否荒庄荒杠 0，1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HuangZhuangHuangGang {
    get { return huangZhuangHuangGang_; }
    set {
      huangZhuangHuangGang_ = value;
    }
  }

  /// <summary>Field number for the "QiangGangHu" field.</summary>
  public const int QiangGangHuFieldNumber = 16;
  private int qiangGangHu_;
  /// <summary>
  /// 是否抢杠胡 0，1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int QiangGangHu {
    get { return qiangGangHu_; }
    set {
      qiangGangHu_ = value;
    }
  }

  /// <summary>Field number for the "HuangZhuangCount" field.</summary>
  public const int HuangZhuangCountFieldNumber = 17;
  private int huangZhuangCount_;
  /// <summary>
  /// 剩余几张荒庄 0，18
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HuangZhuangCount {
    get { return huangZhuangCount_; }
    set {
      huangZhuangCount_ = value;
    }
  }

  /// <summary>Field number for the "DoubleMenqing" field.</summary>
  public const int DoubleMenqingFieldNumber = 18;
  private int doubleMenqing_;
  /// <summary>
  /// 是否门请翻倍 0 1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DoubleMenqing {
    get { return doubleMenqing_; }
    set {
      doubleMenqing_ = value;
    }
  }

  /// <summary>Field number for the "DoubleZimo" field.</summary>
  public const int DoubleZimoFieldNumber = 19;
  private int doubleZimo_;
  /// <summary>
  /// 是否自摸翻倍 0 1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DoubleZimo {
    get { return doubleZimo_; }
    set {
      doubleZimo_ = value;
    }
  }

  /// <summary>Field number for the "KanFen" field.</summary>
  public const int KanFenFieldNumber = 20;
  private int kanFen_;
  /// <summary>
  /// 坎不加分或者加1分 0 1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int KanFen {
    get { return kanFen_; }
    set {
      kanFen_ = value;
    }
  }

  /// <summary>Field number for the "HuaHu" field.</summary>
  public const int HuaHuFieldNumber = 21;
  private int huaHu_;
  /// <summary>
  /// 是否花胡 0 1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HuaHu {
    get { return huaHu_; }
    set {
      huaHu_ = value;
    }
  }

  /// <summary>Field number for the "LianZhuang" field.</summary>
  public const int LianZhuangFieldNumber = 22;
  private int lianZhuang_;
  /// <summary>
  /// 是否连庄 0 1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LianZhuang {
    get { return lianZhuang_; }
    set {
      lianZhuang_ = value;
    }
  }

  /// <summary>Field number for the "HaiDiLaoYue" field.</summary>
  public const int HaiDiLaoYueFieldNumber = 23;
  private int haiDiLaoYue_;
  /// <summary>
  /// 海底捞月0 1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HaiDiLaoYue {
    get { return haiDiLaoYue_; }
    set {
      haiDiLaoYue_ = value;
    }
  }

  /// <summary>Field number for the "PingLong" field.</summary>
  public const int PingLongFieldNumber = 24;
  private int pingLong_;
  /// <summary>
  /// 平龙0 1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PingLong {
    get { return pingLong_; }
    set {
      pingLong_ = value;
    }
  }

  /// <summary>Field number for the "JiuLianBaoDeng" field.</summary>
  public const int JiuLianBaoDengFieldNumber = 25;
  private int jiuLianBaoDeng_;
  /// <summary>
  /// 九莲宝灯0 1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int JiuLianBaoDeng {
    get { return jiuLianBaoDeng_; }
    set {
      jiuLianBaoDeng_ = value;
    }
  }

  /// <summary>Field number for the "Ganghua" field.</summary>
  public const int GanghuaFieldNumber = 26;
  private int ganghua_;
  /// <summary>
  /// 是否杠上开花0 1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Ganghua {
    get { return ganghua_; }
    set {
      ganghua_ = value;
    }
  }

  /// <summary>Field number for the "DuanYao" field.</summary>
  public const int DuanYaoFieldNumber = 27;
  private int duanYao_;
  /// <summary>
  /// 断幺 0 1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DuanYao {
    get { return duanYao_; }
    set {
      duanYao_ = value;
    }
  }

  /// <summary>Field number for the "GouZhang" field.</summary>
  public const int GouZhangFieldNumber = 28;
  private int gouZhang_;
  /// <summary>
  /// 够张
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GouZhang {
    get { return gouZhang_; }
    set {
      gouZhang_ = value;
    }
  }

  /// <summary>Field number for the "QueYiMen" field.</summary>
  public const int QueYiMenFieldNumber = 29;
  private int queYiMen_;
  /// <summary>
  /// 缺一门
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int QueYiMen {
    get { return queYiMen_; }
    set {
      queYiMen_ = value;
    }
  }

  /// <summary>Field number for the "DaiHua" field.</summary>
  public const int DaiHuaFieldNumber = 30;
  private int daiHua_;
  /// <summary>
  /// 是否带花
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DaiHua {
    get { return daiHua_; }
    set {
      daiHua_ = value;
    }
  }

  /// <summary>Field number for the "BianKD" field.</summary>
  public const int BianKDFieldNumber = 31;
  private int bianKD_;
  /// <summary>
  /// 边砍吊
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BianKD {
    get { return bianKD_; }
    set {
      bianKD_ = value;
    }
  }

  /// <summary>Field number for the "HuFanlimit" field.</summary>
  public const int HuFanlimitFieldNumber = 32;
  private int huFanlimit_;
  /// <summary>
  /// 血战麻将 胡番封顶
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HuFanlimit {
    get { return huFanlimit_; }
    set {
      huFanlimit_ = value;
    }
  }

  /// <summary>Field number for the "nZiMoType" field.</summary>
  public const int NZiMoTypeFieldNumber = 33;
  private int nZiMoType_;
  /// <summary>
  /// 血战麻将 自摸加分类型(0自摸加底，1自摸加番)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NZiMoType {
    get { return nZiMoType_; }
    set {
      nZiMoType_ = value;
    }
  }

  /// <summary>Field number for the "nGangHuaType" field.</summary>
  public const int NGangHuaTypeFieldNumber = 34;
  private int nGangHuaType_;
  /// <summary>
  /// 血战麻将 杠花胡牌类型(0点炮，1自摸)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NGangHuaType {
    get { return nGangHuaType_; }
    set {
      nGangHuaType_ = value;
    }
  }

  /// <summary>Field number for the "nHuanZhangType" field.</summary>
  public const int NHuanZhangTypeFieldNumber = 35;
  private int nHuanZhangType_;
  /// <summary>
  /// 血战麻将 自摸加分类型(0换3张，1换四张)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NHuanZhangType {
    get { return nHuanZhangType_; }
    set {
      nHuanZhangType_ = value;
    }
  }

  /// <summary>Field number for the "nYaoJiuJiangDui" field.</summary>
  public const int NYaoJiuJiangDuiFieldNumber = 36;
  private int nYaoJiuJiangDui_;
  /// <summary>
  /// 血战麻将 幺九将对
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NYaoJiuJiangDui {
    get { return nYaoJiuJiangDui_; }
    set {
      nYaoJiuJiangDui_ = value;
    }
  }

  /// <summary>Field number for the "nMenQingZhongZhang" field.</summary>
  public const int NMenQingZhongZhangFieldNumber = 37;
  private int nMenQingZhongZhang_;
  /// <summary>
  /// 血战麻将 门清中张
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NMenQingZhongZhang {
    get { return nMenQingZhongZhang_; }
    set {
      nMenQingZhongZhang_ = value;
    }
  }

  /// <summary>Field number for the "nTianDiHu" field.</summary>
  public const int NTianDiHuFieldNumber = 38;
  private int nTianDiHu_;
  /// <summary>
  /// 血战麻将 天地胡
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NTianDiHu {
    get { return nTianDiHu_; }
    set {
      nTianDiHu_ = value;
    }
  }

  /// <summary>Field number for the "nTingPai" field.</summary>
  public const int NTingPaiFieldNumber = 39;
  private int nTingPai_;
  /// <summary>
  /// 血战麻将 听牌提示
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NTingPai {
    get { return nTingPai_; }
    set {
      nTingPai_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RuleCY);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RuleCY other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HunCount != other.HunCount) return false;
    if (HuType != other.HuType) return false;
    if (!object.Equals(FZ, other.FZ)) return false;
    if (!object.Equals(HuPX, other.HuPX)) return false;
    if (Feng != other.Feng) return false;
    if (BaoTing != other.BaoTing) return false;
    if (DoubleQingYiSe != other.DoubleQingYiSe) return false;
    if (DunLaPao != other.DunLaPao) return false;
    if (Peng != other.Peng) return false;
    if (PengTing != other.PengTing) return false;
    if (Chi != other.Chi) return false;
    if (ChiTing != other.ChiTing) return false;
    if (DiFen != other.DiFen) return false;
    if (YiPaoDuoXiang != other.YiPaoDuoXiang) return false;
    if (HuangZhuangHuangGang != other.HuangZhuangHuangGang) return false;
    if (QiangGangHu != other.QiangGangHu) return false;
    if (HuangZhuangCount != other.HuangZhuangCount) return false;
    if (DoubleMenqing != other.DoubleMenqing) return false;
    if (DoubleZimo != other.DoubleZimo) return false;
    if (KanFen != other.KanFen) return false;
    if (HuaHu != other.HuaHu) return false;
    if (LianZhuang != other.LianZhuang) return false;
    if (HaiDiLaoYue != other.HaiDiLaoYue) return false;
    if (PingLong != other.PingLong) return false;
    if (JiuLianBaoDeng != other.JiuLianBaoDeng) return false;
    if (Ganghua != other.Ganghua) return false;
    if (DuanYao != other.DuanYao) return false;
    if (GouZhang != other.GouZhang) return false;
    if (QueYiMen != other.QueYiMen) return false;
    if (DaiHua != other.DaiHua) return false;
    if (BianKD != other.BianKD) return false;
    if (HuFanlimit != other.HuFanlimit) return false;
    if (NZiMoType != other.NZiMoType) return false;
    if (NGangHuaType != other.NGangHuaType) return false;
    if (NHuanZhangType != other.NHuanZhangType) return false;
    if (NYaoJiuJiangDui != other.NYaoJiuJiangDui) return false;
    if (NMenQingZhongZhang != other.NMenQingZhongZhang) return false;
    if (NTianDiHu != other.NTianDiHu) return false;
    if (NTingPai != other.NTingPai) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HunCount != 0) hash ^= HunCount.GetHashCode();
    if (HuType != 0) hash ^= HuType.GetHashCode();
    if (fZ_ != null) hash ^= FZ.GetHashCode();
    if (huPX_ != null) hash ^= HuPX.GetHashCode();
    if (Feng != 0) hash ^= Feng.GetHashCode();
    if (BaoTing != 0) hash ^= BaoTing.GetHashCode();
    if (DoubleQingYiSe != 0) hash ^= DoubleQingYiSe.GetHashCode();
    if (DunLaPao != 0) hash ^= DunLaPao.GetHashCode();
    if (Peng != 0) hash ^= Peng.GetHashCode();
    if (PengTing != 0) hash ^= PengTing.GetHashCode();
    if (Chi != 0) hash ^= Chi.GetHashCode();
    if (ChiTing != 0) hash ^= ChiTing.GetHashCode();
    if (DiFen != 0) hash ^= DiFen.GetHashCode();
    if (YiPaoDuoXiang != 0) hash ^= YiPaoDuoXiang.GetHashCode();
    if (HuangZhuangHuangGang != 0) hash ^= HuangZhuangHuangGang.GetHashCode();
    if (QiangGangHu != 0) hash ^= QiangGangHu.GetHashCode();
    if (HuangZhuangCount != 0) hash ^= HuangZhuangCount.GetHashCode();
    if (DoubleMenqing != 0) hash ^= DoubleMenqing.GetHashCode();
    if (DoubleZimo != 0) hash ^= DoubleZimo.GetHashCode();
    if (KanFen != 0) hash ^= KanFen.GetHashCode();
    if (HuaHu != 0) hash ^= HuaHu.GetHashCode();
    if (LianZhuang != 0) hash ^= LianZhuang.GetHashCode();
    if (HaiDiLaoYue != 0) hash ^= HaiDiLaoYue.GetHashCode();
    if (PingLong != 0) hash ^= PingLong.GetHashCode();
    if (JiuLianBaoDeng != 0) hash ^= JiuLianBaoDeng.GetHashCode();
    if (Ganghua != 0) hash ^= Ganghua.GetHashCode();
    if (DuanYao != 0) hash ^= DuanYao.GetHashCode();
    if (GouZhang != 0) hash ^= GouZhang.GetHashCode();
    if (QueYiMen != 0) hash ^= QueYiMen.GetHashCode();
    if (DaiHua != 0) hash ^= DaiHua.GetHashCode();
    if (BianKD != 0) hash ^= BianKD.GetHashCode();
    if (HuFanlimit != 0) hash ^= HuFanlimit.GetHashCode();
    if (NZiMoType != 0) hash ^= NZiMoType.GetHashCode();
    if (NGangHuaType != 0) hash ^= NGangHuaType.GetHashCode();
    if (NHuanZhangType != 0) hash ^= NHuanZhangType.GetHashCode();
    if (NYaoJiuJiangDui != 0) hash ^= NYaoJiuJiangDui.GetHashCode();
    if (NMenQingZhongZhang != 0) hash ^= NMenQingZhongZhang.GetHashCode();
    if (NTianDiHu != 0) hash ^= NTianDiHu.GetHashCode();
    if (NTingPai != 0) hash ^= NTingPai.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HunCount != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(HunCount);
    }
    if (HuType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(HuType);
    }
    if (fZ_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(FZ);
    }
    if (huPX_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(HuPX);
    }
    if (Feng != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Feng);
    }
    if (BaoTing != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(BaoTing);
    }
    if (DoubleQingYiSe != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(DoubleQingYiSe);
    }
    if (DunLaPao != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(DunLaPao);
    }
    if (Peng != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(Peng);
    }
    if (PengTing != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(PengTing);
    }
    if (Chi != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(Chi);
    }
    if (ChiTing != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(ChiTing);
    }
    if (DiFen != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(DiFen);
    }
    if (YiPaoDuoXiang != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(YiPaoDuoXiang);
    }
    if (HuangZhuangHuangGang != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(HuangZhuangHuangGang);
    }
    if (QiangGangHu != 0) {
      output.WriteRawTag(128, 1);
      output.WriteInt32(QiangGangHu);
    }
    if (HuangZhuangCount != 0) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(HuangZhuangCount);
    }
    if (DoubleMenqing != 0) {
      output.WriteRawTag(144, 1);
      output.WriteInt32(DoubleMenqing);
    }
    if (DoubleZimo != 0) {
      output.WriteRawTag(152, 1);
      output.WriteInt32(DoubleZimo);
    }
    if (KanFen != 0) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(KanFen);
    }
    if (HuaHu != 0) {
      output.WriteRawTag(168, 1);
      output.WriteInt32(HuaHu);
    }
    if (LianZhuang != 0) {
      output.WriteRawTag(176, 1);
      output.WriteInt32(LianZhuang);
    }
    if (HaiDiLaoYue != 0) {
      output.WriteRawTag(184, 1);
      output.WriteInt32(HaiDiLaoYue);
    }
    if (PingLong != 0) {
      output.WriteRawTag(192, 1);
      output.WriteInt32(PingLong);
    }
    if (JiuLianBaoDeng != 0) {
      output.WriteRawTag(200, 1);
      output.WriteInt32(JiuLianBaoDeng);
    }
    if (Ganghua != 0) {
      output.WriteRawTag(208, 1);
      output.WriteInt32(Ganghua);
    }
    if (DuanYao != 0) {
      output.WriteRawTag(216, 1);
      output.WriteInt32(DuanYao);
    }
    if (GouZhang != 0) {
      output.WriteRawTag(224, 1);
      output.WriteInt32(GouZhang);
    }
    if (QueYiMen != 0) {
      output.WriteRawTag(232, 1);
      output.WriteInt32(QueYiMen);
    }
    if (DaiHua != 0) {
      output.WriteRawTag(240, 1);
      output.WriteInt32(DaiHua);
    }
    if (BianKD != 0) {
      output.WriteRawTag(248, 1);
      output.WriteInt32(BianKD);
    }
    if (HuFanlimit != 0) {
      output.WriteRawTag(128, 2);
      output.WriteInt32(HuFanlimit);
    }
    if (NZiMoType != 0) {
      output.WriteRawTag(136, 2);
      output.WriteInt32(NZiMoType);
    }
    if (NGangHuaType != 0) {
      output.WriteRawTag(144, 2);
      output.WriteInt32(NGangHuaType);
    }
    if (NHuanZhangType != 0) {
      output.WriteRawTag(152, 2);
      output.WriteInt32(NHuanZhangType);
    }
    if (NYaoJiuJiangDui != 0) {
      output.WriteRawTag(160, 2);
      output.WriteInt32(NYaoJiuJiangDui);
    }
    if (NMenQingZhongZhang != 0) {
      output.WriteRawTag(168, 2);
      output.WriteInt32(NMenQingZhongZhang);
    }
    if (NTianDiHu != 0) {
      output.WriteRawTag(176, 2);
      output.WriteInt32(NTianDiHu);
    }
    if (NTingPai != 0) {
      output.WriteRawTag(184, 2);
      output.WriteInt32(NTingPai);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HunCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HunCount);
    }
    if (HuType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HuType);
    }
    if (fZ_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FZ);
    }
    if (huPX_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(HuPX);
    }
    if (Feng != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Feng);
    }
    if (BaoTing != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaoTing);
    }
    if (DoubleQingYiSe != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DoubleQingYiSe);
    }
    if (DunLaPao != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DunLaPao);
    }
    if (Peng != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Peng);
    }
    if (PengTing != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PengTing);
    }
    if (Chi != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chi);
    }
    if (ChiTing != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChiTing);
    }
    if (DiFen != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiFen);
    }
    if (YiPaoDuoXiang != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(YiPaoDuoXiang);
    }
    if (HuangZhuangHuangGang != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HuangZhuangHuangGang);
    }
    if (QiangGangHu != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(QiangGangHu);
    }
    if (HuangZhuangCount != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(HuangZhuangCount);
    }
    if (DoubleMenqing != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DoubleMenqing);
    }
    if (DoubleZimo != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DoubleZimo);
    }
    if (KanFen != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(KanFen);
    }
    if (HuaHu != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(HuaHu);
    }
    if (LianZhuang != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(LianZhuang);
    }
    if (HaiDiLaoYue != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(HaiDiLaoYue);
    }
    if (PingLong != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(PingLong);
    }
    if (JiuLianBaoDeng != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(JiuLianBaoDeng);
    }
    if (Ganghua != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ganghua);
    }
    if (DuanYao != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DuanYao);
    }
    if (GouZhang != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(GouZhang);
    }
    if (QueYiMen != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(QueYiMen);
    }
    if (DaiHua != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DaiHua);
    }
    if (BianKD != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(BianKD);
    }
    if (HuFanlimit != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(HuFanlimit);
    }
    if (NZiMoType != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(NZiMoType);
    }
    if (NGangHuaType != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(NGangHuaType);
    }
    if (NHuanZhangType != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(NHuanZhangType);
    }
    if (NYaoJiuJiangDui != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(NYaoJiuJiangDui);
    }
    if (NMenQingZhongZhang != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(NMenQingZhongZhang);
    }
    if (NTianDiHu != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(NTianDiHu);
    }
    if (NTingPai != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(NTingPai);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RuleCY other) {
    if (other == null) {
      return;
    }
    if (other.HunCount != 0) {
      HunCount = other.HunCount;
    }
    if (other.HuType != 0) {
      HuType = other.HuType;
    }
    if (other.fZ_ != null) {
      if (fZ_ == null) {
        fZ_ = new global::FanZhong();
      }
      FZ.MergeFrom(other.FZ);
    }
    if (other.huPX_ != null) {
      if (huPX_ == null) {
        huPX_ = new global::HuPaiXing();
      }
      HuPX.MergeFrom(other.HuPX);
    }
    if (other.Feng != 0) {
      Feng = other.Feng;
    }
    if (other.BaoTing != 0) {
      BaoTing = other.BaoTing;
    }
    if (other.DoubleQingYiSe != 0) {
      DoubleQingYiSe = other.DoubleQingYiSe;
    }
    if (other.DunLaPao != 0) {
      DunLaPao = other.DunLaPao;
    }
    if (other.Peng != 0) {
      Peng = other.Peng;
    }
    if (other.PengTing != 0) {
      PengTing = other.PengTing;
    }
    if (other.Chi != 0) {
      Chi = other.Chi;
    }
    if (other.ChiTing != 0) {
      ChiTing = other.ChiTing;
    }
    if (other.DiFen != 0) {
      DiFen = other.DiFen;
    }
    if (other.YiPaoDuoXiang != 0) {
      YiPaoDuoXiang = other.YiPaoDuoXiang;
    }
    if (other.HuangZhuangHuangGang != 0) {
      HuangZhuangHuangGang = other.HuangZhuangHuangGang;
    }
    if (other.QiangGangHu != 0) {
      QiangGangHu = other.QiangGangHu;
    }
    if (other.HuangZhuangCount != 0) {
      HuangZhuangCount = other.HuangZhuangCount;
    }
    if (other.DoubleMenqing != 0) {
      DoubleMenqing = other.DoubleMenqing;
    }
    if (other.DoubleZimo != 0) {
      DoubleZimo = other.DoubleZimo;
    }
    if (other.KanFen != 0) {
      KanFen = other.KanFen;
    }
    if (other.HuaHu != 0) {
      HuaHu = other.HuaHu;
    }
    if (other.LianZhuang != 0) {
      LianZhuang = other.LianZhuang;
    }
    if (other.HaiDiLaoYue != 0) {
      HaiDiLaoYue = other.HaiDiLaoYue;
    }
    if (other.PingLong != 0) {
      PingLong = other.PingLong;
    }
    if (other.JiuLianBaoDeng != 0) {
      JiuLianBaoDeng = other.JiuLianBaoDeng;
    }
    if (other.Ganghua != 0) {
      Ganghua = other.Ganghua;
    }
    if (other.DuanYao != 0) {
      DuanYao = other.DuanYao;
    }
    if (other.GouZhang != 0) {
      GouZhang = other.GouZhang;
    }
    if (other.QueYiMen != 0) {
      QueYiMen = other.QueYiMen;
    }
    if (other.DaiHua != 0) {
      DaiHua = other.DaiHua;
    }
    if (other.BianKD != 0) {
      BianKD = other.BianKD;
    }
    if (other.HuFanlimit != 0) {
      HuFanlimit = other.HuFanlimit;
    }
    if (other.NZiMoType != 0) {
      NZiMoType = other.NZiMoType;
    }
    if (other.NGangHuaType != 0) {
      NGangHuaType = other.NGangHuaType;
    }
    if (other.NHuanZhangType != 0) {
      NHuanZhangType = other.NHuanZhangType;
    }
    if (other.NYaoJiuJiangDui != 0) {
      NYaoJiuJiangDui = other.NYaoJiuJiangDui;
    }
    if (other.NMenQingZhongZhang != 0) {
      NMenQingZhongZhang = other.NMenQingZhongZhang;
    }
    if (other.NTianDiHu != 0) {
      NTianDiHu = other.NTianDiHu;
    }
    if (other.NTingPai != 0) {
      NTingPai = other.NTingPai;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          HunCount = input.ReadInt32();
          break;
        }
        case 16: {
          HuType = input.ReadInt32();
          break;
        }
        case 26: {
          if (fZ_ == null) {
            fZ_ = new global::FanZhong();
          }
          input.ReadMessage(fZ_);
          break;
        }
        case 34: {
          if (huPX_ == null) {
            huPX_ = new global::HuPaiXing();
          }
          input.ReadMessage(huPX_);
          break;
        }
        case 40: {
          Feng = input.ReadInt32();
          break;
        }
        case 48: {
          BaoTing = input.ReadInt32();
          break;
        }
        case 56: {
          DoubleQingYiSe = input.ReadInt32();
          break;
        }
        case 64: {
          DunLaPao = input.ReadInt32();
          break;
        }
        case 72: {
          Peng = input.ReadInt32();
          break;
        }
        case 80: {
          PengTing = input.ReadInt32();
          break;
        }
        case 88: {
          Chi = input.ReadInt32();
          break;
        }
        case 96: {
          ChiTing = input.ReadInt32();
          break;
        }
        case 104: {
          DiFen = input.ReadInt32();
          break;
        }
        case 112: {
          YiPaoDuoXiang = input.ReadInt32();
          break;
        }
        case 120: {
          HuangZhuangHuangGang = input.ReadInt32();
          break;
        }
        case 128: {
          QiangGangHu = input.ReadInt32();
          break;
        }
        case 136: {
          HuangZhuangCount = input.ReadInt32();
          break;
        }
        case 144: {
          DoubleMenqing = input.ReadInt32();
          break;
        }
        case 152: {
          DoubleZimo = input.ReadInt32();
          break;
        }
        case 160: {
          KanFen = input.ReadInt32();
          break;
        }
        case 168: {
          HuaHu = input.ReadInt32();
          break;
        }
        case 176: {
          LianZhuang = input.ReadInt32();
          break;
        }
        case 184: {
          HaiDiLaoYue = input.ReadInt32();
          break;
        }
        case 192: {
          PingLong = input.ReadInt32();
          break;
        }
        case 200: {
          JiuLianBaoDeng = input.ReadInt32();
          break;
        }
        case 208: {
          Ganghua = input.ReadInt32();
          break;
        }
        case 216: {
          DuanYao = input.ReadInt32();
          break;
        }
        case 224: {
          GouZhang = input.ReadInt32();
          break;
        }
        case 232: {
          QueYiMen = input.ReadInt32();
          break;
        }
        case 240: {
          DaiHua = input.ReadInt32();
          break;
        }
        case 248: {
          BianKD = input.ReadInt32();
          break;
        }
        case 256: {
          HuFanlimit = input.ReadInt32();
          break;
        }
        case 264: {
          NZiMoType = input.ReadInt32();
          break;
        }
        case 272: {
          NGangHuaType = input.ReadInt32();
          break;
        }
        case 280: {
          NHuanZhangType = input.ReadInt32();
          break;
        }
        case 288: {
          NYaoJiuJiangDui = input.ReadInt32();
          break;
        }
        case 296: {
          NMenQingZhongZhang = input.ReadInt32();
          break;
        }
        case 304: {
          NTianDiHu = input.ReadInt32();
          break;
        }
        case 312: {
          NTingPai = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 草原桌子规则蕃种定义
/// </summary>
public sealed partial class FanZhong : pb::IMessage<FanZhong> {
  private static readonly pb::MessageParser<FanZhong> _parser = new pb::MessageParser<FanZhong>(() => new FanZhong());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FanZhong> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FanZhong() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FanZhong(FanZhong other) : this() {
    qiDui_ = other.qiDui_;
    haoQiDUI_ = other.haoQiDUI_;
    pengPengHu_ = other.pengPengHu_;
    gangHuaMing_ = other.gangHuaMing_;
    gangHuaAn_ = other.gangHuaAn_;
    gangPao_ = other.gangPao_;
    shuangHaoHua_ = other.shuangHaoHua_;
    menqing_ = other.menqing_;
    bianKD_ = other.bianKD_;
    yiTiaoLong_ = other.yiTiaoLong_;
    genZhuang_ = other.genZhuang_;
    gouZhang_ = other.gouZhang_;
    queYiMen_ = other.queYiMen_;
    chuangWuWan_ = other.chuangWuWan_;
    xiaoLian_ = other.xiaoLian_;
    daLian_ = other.daLian_;
    laoShao_ = other.laoShao_;
    siGuiYi_ = other.siGuiYi_;
    duanYao_ = other.duanYao_;
    shouBaYi_ = other.shouBaYi_;
    teDaHu_ = other.teDaHu_;
    shiSanYao_ = other.shiSanYao_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FanZhong Clone() {
    return new FanZhong(this);
  }

  /// <summary>Field number for the "QiDui" field.</summary>
  public const int QiDuiFieldNumber = 1;
  private int qiDui_;
  /// <summary>
  /// 七对
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int QiDui {
    get { return qiDui_; }
    set {
      qiDui_ = value;
    }
  }

  /// <summary>Field number for the "HaoQiDUI" field.</summary>
  public const int HaoQiDUIFieldNumber = 2;
  private int haoQiDUI_;
  /// <summary>
  /// 豪七对
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HaoQiDUI {
    get { return haoQiDUI_; }
    set {
      haoQiDUI_ = value;
    }
  }

  /// <summary>Field number for the "PengPengHu" field.</summary>
  public const int PengPengHuFieldNumber = 3;
  private int pengPengHu_;
  /// <summary>
  /// 碰碰胡（大对子）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PengPengHu {
    get { return pengPengHu_; }
    set {
      pengPengHu_ = value;
    }
  }

  /// <summary>Field number for the "GangHuaMing" field.</summary>
  public const int GangHuaMingFieldNumber = 4;
  private int gangHuaMing_;
  /// <summary>
  /// 明杠杠上开花
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GangHuaMing {
    get { return gangHuaMing_; }
    set {
      gangHuaMing_ = value;
    }
  }

  /// <summary>Field number for the "GangHuaAn" field.</summary>
  public const int GangHuaAnFieldNumber = 5;
  private int gangHuaAn_;
  /// <summary>
  /// 暗杠杠上开花
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GangHuaAn {
    get { return gangHuaAn_; }
    set {
      gangHuaAn_ = value;
    }
  }

  /// <summary>Field number for the "GangPao" field.</summary>
  public const int GangPaoFieldNumber = 6;
  private int gangPao_;
  /// <summary>
  /// 杠上炮
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GangPao {
    get { return gangPao_; }
    set {
      gangPao_ = value;
    }
  }

  /// <summary>Field number for the "ShuangHaoHua" field.</summary>
  public const int ShuangHaoHuaFieldNumber = 7;
  private int shuangHaoHua_;
  /// <summary>
  /// 超豪华(双豪华)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ShuangHaoHua {
    get { return shuangHaoHua_; }
    set {
      shuangHaoHua_ = value;
    }
  }

  /// <summary>Field number for the "Menqing" field.</summary>
  public const int MenqingFieldNumber = 8;
  private int menqing_;
  /// <summary>
  /// 门清
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Menqing {
    get { return menqing_; }
    set {
      menqing_ = value;
    }
  }

  /// <summary>Field number for the "BianKD" field.</summary>
  public const int BianKDFieldNumber = 9;
  private int bianKD_;
  /// <summary>
  /// 边砍吊
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BianKD {
    get { return bianKD_; }
    set {
      bianKD_ = value;
    }
  }

  /// <summary>Field number for the "YiTiaoLong" field.</summary>
  public const int YiTiaoLongFieldNumber = 10;
  private int yiTiaoLong_;
  /// <summary>
  /// 一条龙
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int YiTiaoLong {
    get { return yiTiaoLong_; }
    set {
      yiTiaoLong_ = value;
    }
  }

  /// <summary>Field number for the "GenZhuang" field.</summary>
  public const int GenZhuangFieldNumber = 11;
  private int genZhuang_;
  /// <summary>
  /// 跟庄
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GenZhuang {
    get { return genZhuang_; }
    set {
      genZhuang_ = value;
    }
  }

  /// <summary>Field number for the "GouZhang" field.</summary>
  public const int GouZhangFieldNumber = 12;
  private int gouZhang_;
  /// <summary>
  /// 够张
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GouZhang {
    get { return gouZhang_; }
    set {
      gouZhang_ = value;
    }
  }

  /// <summary>Field number for the "QueYiMen" field.</summary>
  public const int QueYiMenFieldNumber = 13;
  private int queYiMen_;
  /// <summary>
  /// 缺一门
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int QueYiMen {
    get { return queYiMen_; }
    set {
      queYiMen_ = value;
    }
  }

  /// <summary>Field number for the "ChuangWuWan" field.</summary>
  public const int ChuangWuWanFieldNumber = 14;
  private int chuangWuWan_;
  /// <summary>
  /// 闯五万
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ChuangWuWan {
    get { return chuangWuWan_; }
    set {
      chuangWuWan_ = value;
    }
  }

  /// <summary>Field number for the "XiaoLian" field.</summary>
  public const int XiaoLianFieldNumber = 15;
  private int xiaoLian_;
  /// <summary>
  /// 小连
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int XiaoLian {
    get { return xiaoLian_; }
    set {
      xiaoLian_ = value;
    }
  }

  /// <summary>Field number for the "DaLian" field.</summary>
  public const int DaLianFieldNumber = 16;
  private int daLian_;
  /// <summary>
  /// 大连
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DaLian {
    get { return daLian_; }
    set {
      daLian_ = value;
    }
  }

  /// <summary>Field number for the "LaoShao" field.</summary>
  public const int LaoShaoFieldNumber = 17;
  private int laoShao_;
  /// <summary>
  /// 老少
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LaoShao {
    get { return laoShao_; }
    set {
      laoShao_ = value;
    }
  }

  /// <summary>Field number for the "SiGuiYi" field.</summary>
  public const int SiGuiYiFieldNumber = 18;
  private int siGuiYi_;
  /// <summary>
  /// 四归一
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SiGuiYi {
    get { return siGuiYi_; }
    set {
      siGuiYi_ = value;
    }
  }

  /// <summary>Field number for the "DuanYao" field.</summary>
  public const int DuanYaoFieldNumber = 19;
  private int duanYao_;
  /// <summary>
  /// 断幺
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DuanYao {
    get { return duanYao_; }
    set {
      duanYao_ = value;
    }
  }

  /// <summary>Field number for the "ShouBaYi" field.</summary>
  public const int ShouBaYiFieldNumber = 20;
  private int shouBaYi_;
  /// <summary>
  /// 手把一
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ShouBaYi {
    get { return shouBaYi_; }
    set {
      shouBaYi_ = value;
    }
  }

  /// <summary>Field number for the "TeDaHu" field.</summary>
  public const int TeDaHuFieldNumber = 21;
  private int teDaHu_;
  /// <summary>
  /// 特大胡
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TeDaHu {
    get { return teDaHu_; }
    set {
      teDaHu_ = value;
    }
  }

  /// <summary>Field number for the "ShiSanYao" field.</summary>
  public const int ShiSanYaoFieldNumber = 22;
  private int shiSanYao_;
  /// <summary>
  /// 十三幺
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ShiSanYao {
    get { return shiSanYao_; }
    set {
      shiSanYao_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FanZhong);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FanZhong other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (QiDui != other.QiDui) return false;
    if (HaoQiDUI != other.HaoQiDUI) return false;
    if (PengPengHu != other.PengPengHu) return false;
    if (GangHuaMing != other.GangHuaMing) return false;
    if (GangHuaAn != other.GangHuaAn) return false;
    if (GangPao != other.GangPao) return false;
    if (ShuangHaoHua != other.ShuangHaoHua) return false;
    if (Menqing != other.Menqing) return false;
    if (BianKD != other.BianKD) return false;
    if (YiTiaoLong != other.YiTiaoLong) return false;
    if (GenZhuang != other.GenZhuang) return false;
    if (GouZhang != other.GouZhang) return false;
    if (QueYiMen != other.QueYiMen) return false;
    if (ChuangWuWan != other.ChuangWuWan) return false;
    if (XiaoLian != other.XiaoLian) return false;
    if (DaLian != other.DaLian) return false;
    if (LaoShao != other.LaoShao) return false;
    if (SiGuiYi != other.SiGuiYi) return false;
    if (DuanYao != other.DuanYao) return false;
    if (ShouBaYi != other.ShouBaYi) return false;
    if (TeDaHu != other.TeDaHu) return false;
    if (ShiSanYao != other.ShiSanYao) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (QiDui != 0) hash ^= QiDui.GetHashCode();
    if (HaoQiDUI != 0) hash ^= HaoQiDUI.GetHashCode();
    if (PengPengHu != 0) hash ^= PengPengHu.GetHashCode();
    if (GangHuaMing != 0) hash ^= GangHuaMing.GetHashCode();
    if (GangHuaAn != 0) hash ^= GangHuaAn.GetHashCode();
    if (GangPao != 0) hash ^= GangPao.GetHashCode();
    if (ShuangHaoHua != 0) hash ^= ShuangHaoHua.GetHashCode();
    if (Menqing != 0) hash ^= Menqing.GetHashCode();
    if (BianKD != 0) hash ^= BianKD.GetHashCode();
    if (YiTiaoLong != 0) hash ^= YiTiaoLong.GetHashCode();
    if (GenZhuang != 0) hash ^= GenZhuang.GetHashCode();
    if (GouZhang != 0) hash ^= GouZhang.GetHashCode();
    if (QueYiMen != 0) hash ^= QueYiMen.GetHashCode();
    if (ChuangWuWan != 0) hash ^= ChuangWuWan.GetHashCode();
    if (XiaoLian != 0) hash ^= XiaoLian.GetHashCode();
    if (DaLian != 0) hash ^= DaLian.GetHashCode();
    if (LaoShao != 0) hash ^= LaoShao.GetHashCode();
    if (SiGuiYi != 0) hash ^= SiGuiYi.GetHashCode();
    if (DuanYao != 0) hash ^= DuanYao.GetHashCode();
    if (ShouBaYi != 0) hash ^= ShouBaYi.GetHashCode();
    if (TeDaHu != 0) hash ^= TeDaHu.GetHashCode();
    if (ShiSanYao != 0) hash ^= ShiSanYao.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (QiDui != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(QiDui);
    }
    if (HaoQiDUI != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(HaoQiDUI);
    }
    if (PengPengHu != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(PengPengHu);
    }
    if (GangHuaMing != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(GangHuaMing);
    }
    if (GangHuaAn != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(GangHuaAn);
    }
    if (GangPao != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(GangPao);
    }
    if (ShuangHaoHua != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(ShuangHaoHua);
    }
    if (Menqing != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Menqing);
    }
    if (BianKD != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(BianKD);
    }
    if (YiTiaoLong != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(YiTiaoLong);
    }
    if (GenZhuang != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(GenZhuang);
    }
    if (GouZhang != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(GouZhang);
    }
    if (QueYiMen != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(QueYiMen);
    }
    if (ChuangWuWan != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(ChuangWuWan);
    }
    if (XiaoLian != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(XiaoLian);
    }
    if (DaLian != 0) {
      output.WriteRawTag(128, 1);
      output.WriteInt32(DaLian);
    }
    if (LaoShao != 0) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(LaoShao);
    }
    if (SiGuiYi != 0) {
      output.WriteRawTag(144, 1);
      output.WriteInt32(SiGuiYi);
    }
    if (DuanYao != 0) {
      output.WriteRawTag(152, 1);
      output.WriteInt32(DuanYao);
    }
    if (ShouBaYi != 0) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(ShouBaYi);
    }
    if (TeDaHu != 0) {
      output.WriteRawTag(168, 1);
      output.WriteInt32(TeDaHu);
    }
    if (ShiSanYao != 0) {
      output.WriteRawTag(176, 1);
      output.WriteInt32(ShiSanYao);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (QiDui != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(QiDui);
    }
    if (HaoQiDUI != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HaoQiDUI);
    }
    if (PengPengHu != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PengPengHu);
    }
    if (GangHuaMing != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GangHuaMing);
    }
    if (GangHuaAn != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GangHuaAn);
    }
    if (GangPao != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GangPao);
    }
    if (ShuangHaoHua != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShuangHaoHua);
    }
    if (Menqing != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Menqing);
    }
    if (BianKD != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BianKD);
    }
    if (YiTiaoLong != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(YiTiaoLong);
    }
    if (GenZhuang != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GenZhuang);
    }
    if (GouZhang != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GouZhang);
    }
    if (QueYiMen != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(QueYiMen);
    }
    if (ChuangWuWan != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChuangWuWan);
    }
    if (XiaoLian != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(XiaoLian);
    }
    if (DaLian != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DaLian);
    }
    if (LaoShao != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(LaoShao);
    }
    if (SiGuiYi != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(SiGuiYi);
    }
    if (DuanYao != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DuanYao);
    }
    if (ShouBaYi != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShouBaYi);
    }
    if (TeDaHu != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(TeDaHu);
    }
    if (ShiSanYao != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShiSanYao);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FanZhong other) {
    if (other == null) {
      return;
    }
    if (other.QiDui != 0) {
      QiDui = other.QiDui;
    }
    if (other.HaoQiDUI != 0) {
      HaoQiDUI = other.HaoQiDUI;
    }
    if (other.PengPengHu != 0) {
      PengPengHu = other.PengPengHu;
    }
    if (other.GangHuaMing != 0) {
      GangHuaMing = other.GangHuaMing;
    }
    if (other.GangHuaAn != 0) {
      GangHuaAn = other.GangHuaAn;
    }
    if (other.GangPao != 0) {
      GangPao = other.GangPao;
    }
    if (other.ShuangHaoHua != 0) {
      ShuangHaoHua = other.ShuangHaoHua;
    }
    if (other.Menqing != 0) {
      Menqing = other.Menqing;
    }
    if (other.BianKD != 0) {
      BianKD = other.BianKD;
    }
    if (other.YiTiaoLong != 0) {
      YiTiaoLong = other.YiTiaoLong;
    }
    if (other.GenZhuang != 0) {
      GenZhuang = other.GenZhuang;
    }
    if (other.GouZhang != 0) {
      GouZhang = other.GouZhang;
    }
    if (other.QueYiMen != 0) {
      QueYiMen = other.QueYiMen;
    }
    if (other.ChuangWuWan != 0) {
      ChuangWuWan = other.ChuangWuWan;
    }
    if (other.XiaoLian != 0) {
      XiaoLian = other.XiaoLian;
    }
    if (other.DaLian != 0) {
      DaLian = other.DaLian;
    }
    if (other.LaoShao != 0) {
      LaoShao = other.LaoShao;
    }
    if (other.SiGuiYi != 0) {
      SiGuiYi = other.SiGuiYi;
    }
    if (other.DuanYao != 0) {
      DuanYao = other.DuanYao;
    }
    if (other.ShouBaYi != 0) {
      ShouBaYi = other.ShouBaYi;
    }
    if (other.TeDaHu != 0) {
      TeDaHu = other.TeDaHu;
    }
    if (other.ShiSanYao != 0) {
      ShiSanYao = other.ShiSanYao;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          QiDui = input.ReadInt32();
          break;
        }
        case 16: {
          HaoQiDUI = input.ReadInt32();
          break;
        }
        case 24: {
          PengPengHu = input.ReadInt32();
          break;
        }
        case 32: {
          GangHuaMing = input.ReadInt32();
          break;
        }
        case 40: {
          GangHuaAn = input.ReadInt32();
          break;
        }
        case 48: {
          GangPao = input.ReadInt32();
          break;
        }
        case 56: {
          ShuangHaoHua = input.ReadInt32();
          break;
        }
        case 64: {
          Menqing = input.ReadInt32();
          break;
        }
        case 72: {
          BianKD = input.ReadInt32();
          break;
        }
        case 80: {
          YiTiaoLong = input.ReadInt32();
          break;
        }
        case 88: {
          GenZhuang = input.ReadInt32();
          break;
        }
        case 96: {
          GouZhang = input.ReadInt32();
          break;
        }
        case 104: {
          QueYiMen = input.ReadInt32();
          break;
        }
        case 112: {
          ChuangWuWan = input.ReadInt32();
          break;
        }
        case 120: {
          XiaoLian = input.ReadInt32();
          break;
        }
        case 128: {
          DaLian = input.ReadInt32();
          break;
        }
        case 136: {
          LaoShao = input.ReadInt32();
          break;
        }
        case 144: {
          SiGuiYi = input.ReadInt32();
          break;
        }
        case 152: {
          DuanYao = input.ReadInt32();
          break;
        }
        case 160: {
          ShouBaYi = input.ReadInt32();
          break;
        }
        case 168: {
          TeDaHu = input.ReadInt32();
          break;
        }
        case 176: {
          ShiSanYao = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 桌子规则胡牌牌型定义
/// </summary>
public sealed partial class HuPaiXing : pb::IMessage<HuPaiXing> {
  private static readonly pb::MessageParser<HuPaiXing> _parser = new pb::MessageParser<HuPaiXing>(() => new HuPaiXing());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HuPaiXing> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HuPaiXing() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HuPaiXing(HuPaiXing other) : this() {
    puTong_ = other.puTong_;
    qiDui_ = other.qiDui_;
    shiSanYao_ = other.shiSanYao_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HuPaiXing Clone() {
    return new HuPaiXing(this);
  }

  /// <summary>Field number for the "PuTong" field.</summary>
  public const int PuTongFieldNumber = 1;
  private int puTong_;
  /// <summary>
  /// 普通牌型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PuTong {
    get { return puTong_; }
    set {
      puTong_ = value;
    }
  }

  /// <summary>Field number for the "QiDui" field.</summary>
  public const int QiDuiFieldNumber = 2;
  private int qiDui_;
  /// <summary>
  /// 七对
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int QiDui {
    get { return qiDui_; }
    set {
      qiDui_ = value;
    }
  }

  /// <summary>Field number for the "ShiSanYao" field.</summary>
  public const int ShiSanYaoFieldNumber = 3;
  private int shiSanYao_;
  /// <summary>
  /// 十三幺
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ShiSanYao {
    get { return shiSanYao_; }
    set {
      shiSanYao_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HuPaiXing);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HuPaiXing other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PuTong != other.PuTong) return false;
    if (QiDui != other.QiDui) return false;
    if (ShiSanYao != other.ShiSanYao) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PuTong != 0) hash ^= PuTong.GetHashCode();
    if (QiDui != 0) hash ^= QiDui.GetHashCode();
    if (ShiSanYao != 0) hash ^= ShiSanYao.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PuTong != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PuTong);
    }
    if (QiDui != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(QiDui);
    }
    if (ShiSanYao != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ShiSanYao);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PuTong != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PuTong);
    }
    if (QiDui != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(QiDui);
    }
    if (ShiSanYao != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShiSanYao);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HuPaiXing other) {
    if (other == null) {
      return;
    }
    if (other.PuTong != 0) {
      PuTong = other.PuTong;
    }
    if (other.QiDui != 0) {
      QiDui = other.QiDui;
    }
    if (other.ShiSanYao != 0) {
      ShiSanYao = other.ShiSanYao;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PuTong = input.ReadInt32();
          break;
        }
        case 16: {
          QiDui = input.ReadInt32();
          break;
        }
        case 24: {
          ShiSanYao = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 商丘嘴定义
/// </summary>
public sealed partial class ShangQiuZui : pb::IMessage<ShangQiuZui> {
  private static readonly pb::MessageParser<ShangQiuZui> _parser = new pb::MessageParser<ShangQiuZui>(() => new ShangQiuZui());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ShangQiuZui> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ShangQiuZui() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ShangQiuZui(ShangQiuZui other) : this() {
    duanMen_ = other.duanMen_;
    qiaZhang_ = other.qiaZhang_;
    menQing_ = other.menQing_;
    anKa_ = other.anKa_;
    ziMoJiaZui_ = other.ziMoJiaZui_;
    qiHu_ = other.qiHu_;
    qiangGang_ = other.qiangGang_;
    qiDui_ = other.qiDui_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ShangQiuZui Clone() {
    return new ShangQiuZui(this);
  }

  /// <summary>Field number for the "DuanMen" field.</summary>
  public const int DuanMenFieldNumber = 1;
  private int duanMen_;
  /// <summary>
  /// 绝门
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DuanMen {
    get { return duanMen_; }
    set {
      duanMen_ = value;
    }
  }

  /// <summary>Field number for the "QiaZhang" field.</summary>
  public const int QiaZhangFieldNumber = 2;
  private int qiaZhang_;
  /// <summary>
  /// 掐张
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int QiaZhang {
    get { return qiaZhang_; }
    set {
      qiaZhang_ = value;
    }
  }

  /// <summary>Field number for the "MenQing" field.</summary>
  public const int MenQingFieldNumber = 3;
  private int menQing_;
  /// <summary>
  /// 门清
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MenQing {
    get { return menQing_; }
    set {
      menQing_ = value;
    }
  }

  /// <summary>Field number for the "AnKa" field.</summary>
  public const int AnKaFieldNumber = 4;
  private int anKa_;
  /// <summary>
  /// 暗卡
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AnKa {
    get { return anKa_; }
    set {
      anKa_ = value;
    }
  }

  /// <summary>Field number for the "ZiMoJiaZui" field.</summary>
  public const int ZiMoJiaZuiFieldNumber = 5;
  private int ziMoJiaZui_;
  /// <summary>
  /// 自摸加嘴
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ZiMoJiaZui {
    get { return ziMoJiaZui_; }
    set {
      ziMoJiaZui_ = value;
    }
  }

  /// <summary>Field number for the "QiHu" field.</summary>
  public const int QiHuFieldNumber = 6;
  private int qiHu_;
  /// <summary>
  /// 弃胡
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int QiHu {
    get { return qiHu_; }
    set {
      qiHu_ = value;
    }
  }

  /// <summary>Field number for the "QiangGang" field.</summary>
  public const int QiangGangFieldNumber = 7;
  private int qiangGang_;
  /// <summary>
  /// 抢杠
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int QiangGang {
    get { return qiangGang_; }
    set {
      qiangGang_ = value;
    }
  }

  /// <summary>Field number for the "QiDui" field.</summary>
  public const int QiDuiFieldNumber = 8;
  private int qiDui_;
  /// <summary>
  /// 对对胡(七对）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int QiDui {
    get { return qiDui_; }
    set {
      qiDui_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ShangQiuZui);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ShangQiuZui other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DuanMen != other.DuanMen) return false;
    if (QiaZhang != other.QiaZhang) return false;
    if (MenQing != other.MenQing) return false;
    if (AnKa != other.AnKa) return false;
    if (ZiMoJiaZui != other.ZiMoJiaZui) return false;
    if (QiHu != other.QiHu) return false;
    if (QiangGang != other.QiangGang) return false;
    if (QiDui != other.QiDui) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DuanMen != 0) hash ^= DuanMen.GetHashCode();
    if (QiaZhang != 0) hash ^= QiaZhang.GetHashCode();
    if (MenQing != 0) hash ^= MenQing.GetHashCode();
    if (AnKa != 0) hash ^= AnKa.GetHashCode();
    if (ZiMoJiaZui != 0) hash ^= ZiMoJiaZui.GetHashCode();
    if (QiHu != 0) hash ^= QiHu.GetHashCode();
    if (QiangGang != 0) hash ^= QiangGang.GetHashCode();
    if (QiDui != 0) hash ^= QiDui.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DuanMen != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(DuanMen);
    }
    if (QiaZhang != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(QiaZhang);
    }
    if (MenQing != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(MenQing);
    }
    if (AnKa != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(AnKa);
    }
    if (ZiMoJiaZui != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(ZiMoJiaZui);
    }
    if (QiHu != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(QiHu);
    }
    if (QiangGang != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(QiangGang);
    }
    if (QiDui != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(QiDui);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DuanMen != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DuanMen);
    }
    if (QiaZhang != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(QiaZhang);
    }
    if (MenQing != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MenQing);
    }
    if (AnKa != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnKa);
    }
    if (ZiMoJiaZui != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZiMoJiaZui);
    }
    if (QiHu != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(QiHu);
    }
    if (QiangGang != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(QiangGang);
    }
    if (QiDui != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(QiDui);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ShangQiuZui other) {
    if (other == null) {
      return;
    }
    if (other.DuanMen != 0) {
      DuanMen = other.DuanMen;
    }
    if (other.QiaZhang != 0) {
      QiaZhang = other.QiaZhang;
    }
    if (other.MenQing != 0) {
      MenQing = other.MenQing;
    }
    if (other.AnKa != 0) {
      AnKa = other.AnKa;
    }
    if (other.ZiMoJiaZui != 0) {
      ZiMoJiaZui = other.ZiMoJiaZui;
    }
    if (other.QiHu != 0) {
      QiHu = other.QiHu;
    }
    if (other.QiangGang != 0) {
      QiangGang = other.QiangGang;
    }
    if (other.QiDui != 0) {
      QiDui = other.QiDui;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          DuanMen = input.ReadInt32();
          break;
        }
        case 16: {
          QiaZhang = input.ReadInt32();
          break;
        }
        case 24: {
          MenQing = input.ReadInt32();
          break;
        }
        case 32: {
          AnKa = input.ReadInt32();
          break;
        }
        case 40: {
          ZiMoJiaZui = input.ReadInt32();
          break;
        }
        case 48: {
          QiHu = input.ReadInt32();
          break;
        }
        case 56: {
          QiangGang = input.ReadInt32();
          break;
        }
        case 64: {
          QiDui = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 扑克桌子规则定义扩展
/// </summary>
public sealed partial class TableRulePoker : pb::IMessage<TableRulePoker> {
  private static readonly pb::MessageParser<TableRulePoker> _parser = new pb::MessageParser<TableRulePoker>(() => new TableRulePoker());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TableRulePoker> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TableRulePoker() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TableRulePoker(TableRulePoker other) : this() {
    ruleID_ = other.ruleID_;
    playerCount_ = other.playerCount_;
    playerCountMin_ = other.playerCountMin_;
    round_ = other.round_;
    Runout = other.runout_ != null ? other.Runout.Clone() : null;
    RuleDDZ = other.ruleDDZ_ != null ? other.RuleDDZ.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TableRulePoker Clone() {
    return new TableRulePoker(this);
  }

  /// <summary>Field number for the "RuleID" field.</summary>
  public const int RuleIDFieldNumber = 1;
  private int ruleID_;
  /// <summary>
  /// 110031000 跑得快 110031100五十K   110031200黑七  110031300 斗地主
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RuleID {
    get { return ruleID_; }
    set {
      ruleID_ = value;
    }
  }

  /// <summary>Field number for the "PlayerCount" field.</summary>
  public const int PlayerCountFieldNumber = 2;
  private int playerCount_;
  /// <summary>
  /// 玩家数 2，3，4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerCount {
    get { return playerCount_; }
    set {
      playerCount_ = value;
    }
  }

  /// <summary>Field number for the "PlayerCountMin" field.</summary>
  public const int PlayerCountMinFieldNumber = 3;
  private int playerCountMin_;
  /// <summary>
  /// 最少玩家数 2，3，4，少于等于playercount，达到这个人数即可开牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerCountMin {
    get { return playerCountMin_; }
    set {
      playerCountMin_ = value;
    }
  }

  /// <summary>Field number for the "Round" field.</summary>
  public const int RoundFieldNumber = 4;
  private int round_;
  /// <summary>
  /// 该桌子的圈数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Round {
    get { return round_; }
    set {
      round_ = value;
    }
  }

  /// <summary>Field number for the "runout" field.</summary>
  public const int RunoutFieldNumber = 5;
  private global::RuleRunout runout_;
  /// <summary>
  /// 跑得快规则定义
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RuleRunout Runout {
    get { return runout_; }
    set {
      runout_ = value;
    }
  }

  /// <summary>Field number for the "ruleDDZ" field.</summary>
  public const int RuleDDZFieldNumber = 8;
  private global::RuleDDZ ruleDDZ_;
  /// <summary>
  /// 斗地主配置
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RuleDDZ RuleDDZ {
    get { return ruleDDZ_; }
    set {
      ruleDDZ_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TableRulePoker);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TableRulePoker other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RuleID != other.RuleID) return false;
    if (PlayerCount != other.PlayerCount) return false;
    if (PlayerCountMin != other.PlayerCountMin) return false;
    if (Round != other.Round) return false;
    if (!object.Equals(Runout, other.Runout)) return false;
    if (!object.Equals(RuleDDZ, other.RuleDDZ)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RuleID != 0) hash ^= RuleID.GetHashCode();
    if (PlayerCount != 0) hash ^= PlayerCount.GetHashCode();
    if (PlayerCountMin != 0) hash ^= PlayerCountMin.GetHashCode();
    if (Round != 0) hash ^= Round.GetHashCode();
    if (runout_ != null) hash ^= Runout.GetHashCode();
    if (ruleDDZ_ != null) hash ^= RuleDDZ.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RuleID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RuleID);
    }
    if (PlayerCount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PlayerCount);
    }
    if (PlayerCountMin != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(PlayerCountMin);
    }
    if (Round != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Round);
    }
    if (runout_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Runout);
    }
    if (ruleDDZ_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(RuleDDZ);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RuleID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RuleID);
    }
    if (PlayerCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerCount);
    }
    if (PlayerCountMin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerCountMin);
    }
    if (Round != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
    }
    if (runout_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Runout);
    }
    if (ruleDDZ_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RuleDDZ);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TableRulePoker other) {
    if (other == null) {
      return;
    }
    if (other.RuleID != 0) {
      RuleID = other.RuleID;
    }
    if (other.PlayerCount != 0) {
      PlayerCount = other.PlayerCount;
    }
    if (other.PlayerCountMin != 0) {
      PlayerCountMin = other.PlayerCountMin;
    }
    if (other.Round != 0) {
      Round = other.Round;
    }
    if (other.runout_ != null) {
      if (runout_ == null) {
        runout_ = new global::RuleRunout();
      }
      Runout.MergeFrom(other.Runout);
    }
    if (other.ruleDDZ_ != null) {
      if (ruleDDZ_ == null) {
        ruleDDZ_ = new global::RuleDDZ();
      }
      RuleDDZ.MergeFrom(other.RuleDDZ);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RuleID = input.ReadInt32();
          break;
        }
        case 16: {
          PlayerCount = input.ReadInt32();
          break;
        }
        case 24: {
          PlayerCountMin = input.ReadInt32();
          break;
        }
        case 32: {
          Round = input.ReadInt32();
          break;
        }
        case 42: {
          if (runout_ == null) {
            runout_ = new global::RuleRunout();
          }
          input.ReadMessage(runout_);
          break;
        }
        case 66: {
          if (ruleDDZ_ == null) {
            ruleDDZ_ = new global::RuleDDZ();
          }
          input.ReadMessage(ruleDDZ_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 跑得快规则定义
/// </summary>
public sealed partial class RuleRunout : pb::IMessage<RuleRunout> {
  private static readonly pb::MessageParser<RuleRunout> _parser = new pb::MessageParser<RuleRunout>(() => new RuleRunout());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RuleRunout> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleRunout() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleRunout(RuleRunout other) : this() {
    leadSeat_ = other.leadSeat_;
    scoreType_ = other.scoreType_;
    scoreMore_ = other.scoreMore_;
    scoreLess_ = other.scoreLess_;
    scoreBomb_ = other.scoreBomb_;
    bombType_ = other.bombType_;
    bombResult_ = other.bombResult_;
    lianduiLimit_ = other.lianduiLimit_;
    sanYiDui_ = other.sanYiDui_;
    siYiDan_ = other.siYiDan_;
    siErDan_ = other.siErDan_;
    biGen_ = other.biGen_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleRunout Clone() {
    return new RuleRunout(this);
  }

  /// <summary>Field number for the "lead_seat" field.</summary>
  public const int LeadSeatFieldNumber = 1;
  private int leadSeat_;
  /// <summary>
  /// 定庄 0：赢家坐庄 1：红桃3坐庄
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeadSeat {
    get { return leadSeat_; }
    set {
      leadSeat_ = value;
    }
  }

  /// <summary>Field number for the "score_type" field.</summary>
  public const int ScoreTypeFieldNumber = 2;
  private int scoreType_;
  /// <summary>
  /// 算分方式 0：剩几张输几分 1：固定算分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ScoreType {
    get { return scoreType_; }
    set {
      scoreType_ = value;
    }
  }

  /// <summary>Field number for the "score_more" field.</summary>
  public const int ScoreMoreFieldNumber = 3;
  private int scoreMore_;
  /// <summary>
  /// 算分方式为 1 的情况下，剩多输几分 默认 2
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ScoreMore {
    get { return scoreMore_; }
    set {
      scoreMore_ = value;
    }
  }

  /// <summary>Field number for the "score_less" field.</summary>
  public const int ScoreLessFieldNumber = 4;
  private int scoreLess_;
  /// <summary>
  /// 算分方式为 1 的情况下，剩少输几分 默认 1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ScoreLess {
    get { return scoreLess_; }
    set {
      scoreLess_ = value;
    }
  }

  /// <summary>Field number for the "score_bomb" field.</summary>
  public const int ScoreBombFieldNumber = 5;
  private int scoreBomb_;
  /// <summary>
  /// 算分方式为 1 的情况下，被炸扣 几分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ScoreBomb {
    get { return scoreBomb_; }
    set {
      scoreBomb_ = value;
    }
  }

  /// <summary>Field number for the "bomb_type" field.</summary>
  public const int BombTypeFieldNumber = 6;
  private int bombType_;
  /// <summary>
  /// 炸弹类型 0：四张和AAA, 1:四带一和AAA带一，2：四张和AAAA
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BombType {
    get { return bombType_; }
    set {
      bombType_ = value;
    }
  }

  /// <summary>Field number for the "bomb_result" field.</summary>
  public const int BombResultFieldNumber = 7;
  private int bombResult_;
  /// <summary>
  /// 炸弹效果 0：不翻倍 n：n炸封顶
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BombResult {
    get { return bombResult_; }
    set {
      bombResult_ = value;
    }
  }

  /// <summary>Field number for the "liandui_limit" field.</summary>
  public const int LianduiLimitFieldNumber = 8;
  private int lianduiLimit_;
  /// <summary>
  /// 连对最少几对起步 2：2对3344  3：3对 334455
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LianduiLimit {
    get { return lianduiLimit_; }
    set {
      lianduiLimit_ = value;
    }
  }

  /// <summary>Field number for the "SanYiDui" field.</summary>
  public const int SanYiDuiFieldNumber = 9;
  private int sanYiDui_;
  /// <summary>
  /// 三带一对
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SanYiDui {
    get { return sanYiDui_; }
    set {
      sanYiDui_ = value;
    }
  }

  /// <summary>Field number for the "SiYiDan" field.</summary>
  public const int SiYiDanFieldNumber = 10;
  private int siYiDan_;
  /// <summary>
  /// 四带一单
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SiYiDan {
    get { return siYiDan_; }
    set {
      siYiDan_ = value;
    }
  }

  /// <summary>Field number for the "SiErDan" field.</summary>
  public const int SiErDanFieldNumber = 11;
  private int siErDan_;
  /// <summary>
  /// 四带两单
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SiErDan {
    get { return siErDan_; }
    set {
      siErDan_ = value;
    }
  }

  /// <summary>Field number for the "BiGen" field.</summary>
  public const int BiGenFieldNumber = 12;
  private int biGen_;
  /// <summary>
  /// 有牌必跟
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BiGen {
    get { return biGen_; }
    set {
      biGen_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RuleRunout);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RuleRunout other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LeadSeat != other.LeadSeat) return false;
    if (ScoreType != other.ScoreType) return false;
    if (ScoreMore != other.ScoreMore) return false;
    if (ScoreLess != other.ScoreLess) return false;
    if (ScoreBomb != other.ScoreBomb) return false;
    if (BombType != other.BombType) return false;
    if (BombResult != other.BombResult) return false;
    if (LianduiLimit != other.LianduiLimit) return false;
    if (SanYiDui != other.SanYiDui) return false;
    if (SiYiDan != other.SiYiDan) return false;
    if (SiErDan != other.SiErDan) return false;
    if (BiGen != other.BiGen) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LeadSeat != 0) hash ^= LeadSeat.GetHashCode();
    if (ScoreType != 0) hash ^= ScoreType.GetHashCode();
    if (ScoreMore != 0) hash ^= ScoreMore.GetHashCode();
    if (ScoreLess != 0) hash ^= ScoreLess.GetHashCode();
    if (ScoreBomb != 0) hash ^= ScoreBomb.GetHashCode();
    if (BombType != 0) hash ^= BombType.GetHashCode();
    if (BombResult != 0) hash ^= BombResult.GetHashCode();
    if (LianduiLimit != 0) hash ^= LianduiLimit.GetHashCode();
    if (SanYiDui != 0) hash ^= SanYiDui.GetHashCode();
    if (SiYiDan != 0) hash ^= SiYiDan.GetHashCode();
    if (SiErDan != 0) hash ^= SiErDan.GetHashCode();
    if (BiGen != 0) hash ^= BiGen.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LeadSeat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(LeadSeat);
    }
    if (ScoreType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ScoreType);
    }
    if (ScoreMore != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ScoreMore);
    }
    if (ScoreLess != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(ScoreLess);
    }
    if (ScoreBomb != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(ScoreBomb);
    }
    if (BombType != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(BombType);
    }
    if (BombResult != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(BombResult);
    }
    if (LianduiLimit != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(LianduiLimit);
    }
    if (SanYiDui != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(SanYiDui);
    }
    if (SiYiDan != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(SiYiDan);
    }
    if (SiErDan != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(SiErDan);
    }
    if (BiGen != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(BiGen);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LeadSeat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeadSeat);
    }
    if (ScoreType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoreType);
    }
    if (ScoreMore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoreMore);
    }
    if (ScoreLess != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoreLess);
    }
    if (ScoreBomb != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoreBomb);
    }
    if (BombType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombType);
    }
    if (BombResult != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombResult);
    }
    if (LianduiLimit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LianduiLimit);
    }
    if (SanYiDui != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SanYiDui);
    }
    if (SiYiDan != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SiYiDan);
    }
    if (SiErDan != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SiErDan);
    }
    if (BiGen != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BiGen);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RuleRunout other) {
    if (other == null) {
      return;
    }
    if (other.LeadSeat != 0) {
      LeadSeat = other.LeadSeat;
    }
    if (other.ScoreType != 0) {
      ScoreType = other.ScoreType;
    }
    if (other.ScoreMore != 0) {
      ScoreMore = other.ScoreMore;
    }
    if (other.ScoreLess != 0) {
      ScoreLess = other.ScoreLess;
    }
    if (other.ScoreBomb != 0) {
      ScoreBomb = other.ScoreBomb;
    }
    if (other.BombType != 0) {
      BombType = other.BombType;
    }
    if (other.BombResult != 0) {
      BombResult = other.BombResult;
    }
    if (other.LianduiLimit != 0) {
      LianduiLimit = other.LianduiLimit;
    }
    if (other.SanYiDui != 0) {
      SanYiDui = other.SanYiDui;
    }
    if (other.SiYiDan != 0) {
      SiYiDan = other.SiYiDan;
    }
    if (other.SiErDan != 0) {
      SiErDan = other.SiErDan;
    }
    if (other.BiGen != 0) {
      BiGen = other.BiGen;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          LeadSeat = input.ReadInt32();
          break;
        }
        case 16: {
          ScoreType = input.ReadInt32();
          break;
        }
        case 24: {
          ScoreMore = input.ReadInt32();
          break;
        }
        case 32: {
          ScoreLess = input.ReadInt32();
          break;
        }
        case 40: {
          ScoreBomb = input.ReadInt32();
          break;
        }
        case 48: {
          BombType = input.ReadInt32();
          break;
        }
        case 56: {
          BombResult = input.ReadInt32();
          break;
        }
        case 64: {
          LianduiLimit = input.ReadInt32();
          break;
        }
        case 72: {
          SanYiDui = input.ReadInt32();
          break;
        }
        case 80: {
          SiYiDan = input.ReadInt32();
          break;
        }
        case 88: {
          SiErDan = input.ReadInt32();
          break;
        }
        case 96: {
          BiGen = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 510K规则定义
/// </summary>
public sealed partial class Rule510K : pb::IMessage<Rule510K> {
  private static readonly pb::MessageParser<Rule510K> _parser = new pb::MessageParser<Rule510K>(() => new Rule510K());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Rule510K> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Rule510K() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Rule510K(Rule510K other) : this() {
    packCount_ = other.packCount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Rule510K Clone() {
    return new Rule510K(this);
  }

  /// <summary>Field number for the "PackCount" field.</summary>
  public const int PackCountFieldNumber = 1;
  private int packCount_;
  /// <summary>
  /// 用牌副数 1，2
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PackCount {
    get { return packCount_; }
    set {
      packCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Rule510K);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Rule510K other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PackCount != other.PackCount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PackCount != 0) hash ^= PackCount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PackCount != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PackCount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PackCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackCount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Rule510K other) {
    if (other == null) {
      return;
    }
    if (other.PackCount != 0) {
      PackCount = other.PackCount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PackCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 黑七规则定义
/// </summary>
public sealed partial class RuleBlack7 : pb::IMessage<RuleBlack7> {
  private static readonly pb::MessageParser<RuleBlack7> _parser = new pb::MessageParser<RuleBlack7>(() => new RuleBlack7());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RuleBlack7> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleBlack7() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleBlack7(RuleBlack7 other) : this() {
    scoreMax_ = other.scoreMax_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleBlack7 Clone() {
    return new RuleBlack7(this);
  }

  /// <summary>Field number for the "ScoreMax" field.</summary>
  public const int ScoreMaxFieldNumber = 1;
  private int scoreMax_;
  /// <summary>
  /// 闲家分数封顶 20,40,80 庄家=闲家*3	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ScoreMax {
    get { return scoreMax_; }
    set {
      scoreMax_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RuleBlack7);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RuleBlack7 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ScoreMax != other.ScoreMax) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ScoreMax != 0) hash ^= ScoreMax.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ScoreMax != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ScoreMax);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ScoreMax != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoreMax);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RuleBlack7 other) {
    if (other == null) {
      return;
    }
    if (other.ScoreMax != 0) {
      ScoreMax = other.ScoreMax;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ScoreMax = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 斗地主规则定义
/// </summary>
public sealed partial class RuleDDZ : pb::IMessage<RuleDDZ> {
  private static readonly pb::MessageParser<RuleDDZ> _parser = new pb::MessageParser<RuleDDZ>(() => new RuleDDZ());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RuleDDZ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleDDZ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleDDZ(RuleDDZ other) : this() {
    landlord_ = other.landlord_;
    bomb_ = other.bomb_;
    shun_ = other.shun_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleDDZ Clone() {
    return new RuleDDZ(this);
  }

  /// <summary>Field number for the "landlord" field.</summary>
  public const int LandlordFieldNumber = 1;
  private int landlord_;
  /// <summary>
  /// 叫地主（0：经典叫分、1：欢乐抢地主）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Landlord {
    get { return landlord_; }
    set {
      landlord_ = value;
    }
  }

  /// <summary>Field number for the "bomb" field.</summary>
  public const int BombFieldNumber = 2;
  private int bomb_;
  /// <summary>
  /// 炸弹封顶（0：炸弹不翻倍、1：1炸、2：2炸、3：3炸、4：4炸）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Bomb {
    get { return bomb_; }
    set {
      bomb_ = value;
    }
  }

  /// <summary>Field number for the "shun" field.</summary>
  public const int ShunFieldNumber = 3;
  private int shun_;
  /// <summary>
  /// 顺子（0：无、1：有）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Shun {
    get { return shun_; }
    set {
      shun_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RuleDDZ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RuleDDZ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Landlord != other.Landlord) return false;
    if (Bomb != other.Bomb) return false;
    if (Shun != other.Shun) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Landlord != 0) hash ^= Landlord.GetHashCode();
    if (Bomb != 0) hash ^= Bomb.GetHashCode();
    if (Shun != 0) hash ^= Shun.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Landlord != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Landlord);
    }
    if (Bomb != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Bomb);
    }
    if (Shun != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Shun);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Landlord != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Landlord);
    }
    if (Bomb != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bomb);
    }
    if (Shun != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Shun);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RuleDDZ other) {
    if (other == null) {
      return;
    }
    if (other.Landlord != 0) {
      Landlord = other.Landlord;
    }
    if (other.Bomb != 0) {
      Bomb = other.Bomb;
    }
    if (other.Shun != 0) {
      Shun = other.Shun;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Landlord = input.ReadInt32();
          break;
        }
        case 16: {
          Bomb = input.ReadInt32();
          break;
        }
        case 24: {
          Shun = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///  江苏掼蛋 定义
/// </summary>
public sealed partial class RuleGD : pb::IMessage<RuleGD> {
  private static readonly pb::MessageParser<RuleGD> _parser = new pb::MessageParser<RuleGD>(() => new RuleGD());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RuleGD> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleGD() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleGD(RuleGD other) : this() {
    playType_ = other.playType_;
    roundType_ = other.roundType_;
    upgradeType_ = other.upgradeType_;
    straightFlush_ = other.straightFlush_;
    sixBombDouble_ = other.sixBombDouble_;
    sixBombLottery_ = other.sixBombLottery_;
    remianCard_ = other.remianCard_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleGD Clone() {
    return new RuleGD(this);
  }

  /// <summary>Field number for the "play_type" field.</summary>
  public const int PlayTypeFieldNumber = 1;
  private int playType_;
  /// <summary>
  ///  玩法类型  (0:经典	1:团团转)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayType {
    get { return playType_; }
    set {
      playType_ = value;
    }
  }

  /// <summary>Field number for the "round_type" field.</summary>
  public const int RoundTypeFieldNumber = 2;
  private int roundType_;
  /// <summary>
  ///  局数		(0:过六 1:过八 2:过十 3:过A 4:4局 8:8局 12:12局)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoundType {
    get { return roundType_; }
    set {
      roundType_ = value;
    }
  }

  /// <summary>Field number for the "upgrade_type" field.</summary>
  public const int UpgradeTypeFieldNumber = 3;
  private int upgradeType_;
  /// <summary>
  ///  升级类型[经典玩法]  (0:双下升三级	1:双下升四级)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UpgradeType {
    get { return upgradeType_; }
    set {
      upgradeType_ = value;
    }
  }

  /// <summary>Field number for the "straight_flush" field.</summary>
  public const int StraightFlushFieldNumber = 4;
  private int straightFlush_;
  /// <summary>
  ///  同花顺翻倍
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StraightFlush {
    get { return straightFlush_; }
    set {
      straightFlush_ = value;
    }
  }

  /// <summary>Field number for the "six_bomb_double" field.</summary>
  public const int SixBombDoubleFieldNumber = 5;
  private int sixBombDouble_;
  /// <summary>
  ///  六炸以上炸弹赢翻倍
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SixBombDouble {
    get { return sixBombDouble_; }
    set {
      sixBombDouble_ = value;
    }
  }

  /// <summary>Field number for the "six_bomb_lottery" field.</summary>
  public const int SixBombLotteryFieldNumber = 6;
  private int sixBombLottery_;
  /// <summary>
  ///  六炸以上炸弹赢彩金
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SixBombLottery {
    get { return sixBombLottery_; }
    set {
      sixBombLottery_ = value;
    }
  }

  /// <summary>Field number for the "remian_card" field.</summary>
  public const int RemianCardFieldNumber = 7;
  private int remianCard_;
  /// <summary>
  ///  剩余几张牌时报牌 (0:6张 1:10张 2:始终)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RemianCard {
    get { return remianCard_; }
    set {
      remianCard_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RuleGD);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RuleGD other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayType != other.PlayType) return false;
    if (RoundType != other.RoundType) return false;
    if (UpgradeType != other.UpgradeType) return false;
    if (StraightFlush != other.StraightFlush) return false;
    if (SixBombDouble != other.SixBombDouble) return false;
    if (SixBombLottery != other.SixBombLottery) return false;
    if (RemianCard != other.RemianCard) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayType != 0) hash ^= PlayType.GetHashCode();
    if (RoundType != 0) hash ^= RoundType.GetHashCode();
    if (UpgradeType != 0) hash ^= UpgradeType.GetHashCode();
    if (StraightFlush != 0) hash ^= StraightFlush.GetHashCode();
    if (SixBombDouble != 0) hash ^= SixBombDouble.GetHashCode();
    if (SixBombLottery != 0) hash ^= SixBombLottery.GetHashCode();
    if (RemianCard != 0) hash ^= RemianCard.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayType);
    }
    if (RoundType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoundType);
    }
    if (UpgradeType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(UpgradeType);
    }
    if (StraightFlush != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(StraightFlush);
    }
    if (SixBombDouble != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(SixBombDouble);
    }
    if (SixBombLottery != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(SixBombLottery);
    }
    if (RemianCard != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(RemianCard);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayType);
    }
    if (RoundType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundType);
    }
    if (UpgradeType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpgradeType);
    }
    if (StraightFlush != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StraightFlush);
    }
    if (SixBombDouble != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SixBombDouble);
    }
    if (SixBombLottery != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SixBombLottery);
    }
    if (RemianCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemianCard);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RuleGD other) {
    if (other == null) {
      return;
    }
    if (other.PlayType != 0) {
      PlayType = other.PlayType;
    }
    if (other.RoundType != 0) {
      RoundType = other.RoundType;
    }
    if (other.UpgradeType != 0) {
      UpgradeType = other.UpgradeType;
    }
    if (other.StraightFlush != 0) {
      StraightFlush = other.StraightFlush;
    }
    if (other.SixBombDouble != 0) {
      SixBombDouble = other.SixBombDouble;
    }
    if (other.SixBombLottery != 0) {
      SixBombLottery = other.SixBombLottery;
    }
    if (other.RemianCard != 0) {
      RemianCard = other.RemianCard;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PlayType = input.ReadInt32();
          break;
        }
        case 16: {
          RoundType = input.ReadInt32();
          break;
        }
        case 24: {
          UpgradeType = input.ReadInt32();
          break;
        }
        case 32: {
          StraightFlush = input.ReadInt32();
          break;
        }
        case 40: {
          SixBombDouble = input.ReadInt32();
          break;
        }
        case 48: {
          SixBombLottery = input.ReadInt32();
          break;
        }
        case 56: {
          RemianCard = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 打大A规则定义
/// </summary>
public sealed partial class RuleDDA5 : pb::IMessage<RuleDDA5> {
  private static readonly pb::MessageParser<RuleDDA5> _parser = new pb::MessageParser<RuleDDA5>(() => new RuleDDA5());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RuleDDA5> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleDDA5() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleDDA5(RuleDDA5 other) : this() {
    diScore_ = other.diScore_;
    fanPai_ = other.fanPai_;
    fanPaiNoZou_ = other.fanPaiNoZou_;
    doubleLiang_ = other.doubleLiang_;
    doubleLiangNoZou_ = other.doubleLiangNoZou_;
    guessA_ = other.guessA_;
    drawCard_ = other.drawCard_;
    guessAChu_ = other.guessAChu_;
    showHandCount_ = other.showHandCount_;
    leftWarning_ = other.leftWarning_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RuleDDA5 Clone() {
    return new RuleDDA5(this);
  }

  /// <summary>Field number for the "diScore" field.</summary>
  public const int DiScoreFieldNumber = 1;
  private int diScore_;
  /// <summary>
  /// 底分（1：1分、 2：2分、 5：5分）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DiScore {
    get { return diScore_; }
    set {
      diScore_ = value;
    }
  }

  /// <summary>Field number for the "fanPai" field.</summary>
  public const int FanPaiFieldNumber = 2;
  private int fanPai_;
  /// <summary>
  /// 反牌（0：反牌不必争大贡、1：反牌必争大贡）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FanPai {
    get { return fanPai_; }
    set {
      fanPai_ = value;
    }
  }

  /// <summary>Field number for the "fanPaiNoZou" field.</summary>
  public const int FanPaiNoZouFieldNumber = 3;
  private int fanPaiNoZou_;
  /// <summary>
  /// 反牌不走头扣一半（0：不选、1：选）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FanPaiNoZou {
    get { return fanPaiNoZou_; }
    set {
      fanPaiNoZou_ = value;
    }
  }

  /// <summary>Field number for the "doubleLiang" field.</summary>
  public const int DoubleLiangFieldNumber = 4;
  private int doubleLiang_;
  /// <summary>
  /// 双亮（0：双亮不必争大贡、1：双亮必争大贡）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DoubleLiang {
    get { return doubleLiang_; }
    set {
      doubleLiang_ = value;
    }
  }

  /// <summary>Field number for the "doubleLiangNoZou" field.</summary>
  public const int DoubleLiangNoZouFieldNumber = 5;
  private int doubleLiangNoZou_;
  /// <summary>
  /// 双亮不走头扣一半（0：不选、1：选）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DoubleLiangNoZou {
    get { return doubleLiangNoZou_; }
    set {
      doubleLiangNoZou_ = value;
    }
  }

  /// <summary>Field number for the "guessA" field.</summary>
  public const int GuessAFieldNumber = 6;
  private int guessA_;
  /// <summary>
  /// 估A（0：估所有A（估3家）、1：只估红桃A（随机估））
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GuessA {
    get { return guessA_; }
    set {
      guessA_ = value;
    }
  }

  /// <summary>Field number for the "drawCard" field.</summary>
  public const int DrawCardFieldNumber = 7;
  private int drawCard_;
  /// <summary>
  /// 摸牌（0：大贡先摸牌、1：随机先摸牌）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DrawCard {
    get { return drawCard_; }
    set {
      drawCard_ = value;
    }
  }

  /// <summary>Field number for the "guessAChu" field.</summary>
  public const int GuessAChuFieldNumber = 8;
  private int guessAChu_;
  /// <summary>
  /// 估A处（0：估A不可处（次家不可亮）、1：估A可处（次家可亮））
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GuessAChu {
    get { return guessAChu_; }
    set {
      guessAChu_ = value;
    }
  }

  /// <summary>Field number for the "showHandCount" field.</summary>
  public const int ShowHandCountFieldNumber = 9;
  private int showHandCount_;
  /// <summary>
  /// 手牌剩张显示（0：不显示、1：显示）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ShowHandCount {
    get { return showHandCount_; }
    set {
      showHandCount_ = value;
    }
  }

  /// <summary>Field number for the "leftWarning" field.</summary>
  public const int LeftWarningFieldNumber = 10;
  private int leftWarning_;
  /// <summary>
  /// 剩张告警（0：不告警、1：剩余5张告警）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeftWarning {
    get { return leftWarning_; }
    set {
      leftWarning_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RuleDDA5);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RuleDDA5 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DiScore != other.DiScore) return false;
    if (FanPai != other.FanPai) return false;
    if (FanPaiNoZou != other.FanPaiNoZou) return false;
    if (DoubleLiang != other.DoubleLiang) return false;
    if (DoubleLiangNoZou != other.DoubleLiangNoZou) return false;
    if (GuessA != other.GuessA) return false;
    if (DrawCard != other.DrawCard) return false;
    if (GuessAChu != other.GuessAChu) return false;
    if (ShowHandCount != other.ShowHandCount) return false;
    if (LeftWarning != other.LeftWarning) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DiScore != 0) hash ^= DiScore.GetHashCode();
    if (FanPai != 0) hash ^= FanPai.GetHashCode();
    if (FanPaiNoZou != 0) hash ^= FanPaiNoZou.GetHashCode();
    if (DoubleLiang != 0) hash ^= DoubleLiang.GetHashCode();
    if (DoubleLiangNoZou != 0) hash ^= DoubleLiangNoZou.GetHashCode();
    if (GuessA != 0) hash ^= GuessA.GetHashCode();
    if (DrawCard != 0) hash ^= DrawCard.GetHashCode();
    if (GuessAChu != 0) hash ^= GuessAChu.GetHashCode();
    if (ShowHandCount != 0) hash ^= ShowHandCount.GetHashCode();
    if (LeftWarning != 0) hash ^= LeftWarning.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DiScore != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(DiScore);
    }
    if (FanPai != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(FanPai);
    }
    if (FanPaiNoZou != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(FanPaiNoZou);
    }
    if (DoubleLiang != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(DoubleLiang);
    }
    if (DoubleLiangNoZou != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(DoubleLiangNoZou);
    }
    if (GuessA != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(GuessA);
    }
    if (DrawCard != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(DrawCard);
    }
    if (GuessAChu != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(GuessAChu);
    }
    if (ShowHandCount != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(ShowHandCount);
    }
    if (LeftWarning != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(LeftWarning);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DiScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiScore);
    }
    if (FanPai != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FanPai);
    }
    if (FanPaiNoZou != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FanPaiNoZou);
    }
    if (DoubleLiang != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DoubleLiang);
    }
    if (DoubleLiangNoZou != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DoubleLiangNoZou);
    }
    if (GuessA != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuessA);
    }
    if (DrawCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawCard);
    }
    if (GuessAChu != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuessAChu);
    }
    if (ShowHandCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShowHandCount);
    }
    if (LeftWarning != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftWarning);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RuleDDA5 other) {
    if (other == null) {
      return;
    }
    if (other.DiScore != 0) {
      DiScore = other.DiScore;
    }
    if (other.FanPai != 0) {
      FanPai = other.FanPai;
    }
    if (other.FanPaiNoZou != 0) {
      FanPaiNoZou = other.FanPaiNoZou;
    }
    if (other.DoubleLiang != 0) {
      DoubleLiang = other.DoubleLiang;
    }
    if (other.DoubleLiangNoZou != 0) {
      DoubleLiangNoZou = other.DoubleLiangNoZou;
    }
    if (other.GuessA != 0) {
      GuessA = other.GuessA;
    }
    if (other.DrawCard != 0) {
      DrawCard = other.DrawCard;
    }
    if (other.GuessAChu != 0) {
      GuessAChu = other.GuessAChu;
    }
    if (other.ShowHandCount != 0) {
      ShowHandCount = other.ShowHandCount;
    }
    if (other.LeftWarning != 0) {
      LeftWarning = other.LeftWarning;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          DiScore = input.ReadInt32();
          break;
        }
        case 16: {
          FanPai = input.ReadInt32();
          break;
        }
        case 24: {
          FanPaiNoZou = input.ReadInt32();
          break;
        }
        case 32: {
          DoubleLiang = input.ReadInt32();
          break;
        }
        case 40: {
          DoubleLiangNoZou = input.ReadInt32();
          break;
        }
        case 48: {
          GuessA = input.ReadInt32();
          break;
        }
        case 56: {
          DrawCard = input.ReadInt32();
          break;
        }
        case 64: {
          GuessAChu = input.ReadInt32();
          break;
        }
        case 72: {
          ShowHandCount = input.ReadInt32();
          break;
        }
        case 80: {
          LeftWarning = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 桌子基本属性+
/// </summary>
public sealed partial class TableInfoMsg : pb::IMessage<TableInfoMsg> {
  private static readonly pb::MessageParser<TableInfoMsg> _parser = new pb::MessageParser<TableInfoMsg>(() => new TableInfoMsg());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TableInfoMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TableInfoMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TableInfoMsg(TableInfoMsg other) : this() {
    tableID_ = other.tableID_;
    ownerID_ = other.ownerID_;
    ownerName_ = other.ownerName_;
    round_ = other.round_;
    TR = other.tR_ != null ? other.TR.Clone() : null;
    ptis_ = other.ptis_.Clone();
    gameID_ = other.gameID_;
    totalPan_ = other.totalPan_;
    totalTime_ = other.totalTime_;
    tablelogID_ = other.tablelogID_;
    type_ = other.type_;
    creator_ = other.creator_;
    status_ = other.status_;
    TRP = other.tRP_ != null ? other.TRP.Clone() : null;
    chargeType_ = other.chargeType_;
    adminID_ = other.adminID_;
    voiceChatType_ = other.voiceChatType_;
    prepareType_ = other.prepareType_;
    expressionType_ = other.expressionType_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TableInfoMsg Clone() {
    return new TableInfoMsg(this);
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 1;
  private int tableID_;
  /// <summary>
  /// 桌子ID(6位的数字)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "OwnerID" field.</summary>
  public const int OwnerIDFieldNumber = 2;
  private int ownerID_;
  /// <summary>
  /// 该桌子的房主
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OwnerID {
    get { return ownerID_; }
    set {
      ownerID_ = value;
    }
  }

  /// <summary>Field number for the "OwnerName" field.</summary>
  public const int OwnerNameFieldNumber = 3;
  private string ownerName_ = "";
  /// <summary>
  /// 该桌子的房主
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OwnerName {
    get { return ownerName_; }
    set {
      ownerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Round" field.</summary>
  public const int RoundFieldNumber = 4;
  private int round_;
  /// <summary>
  /// 该桌子的圈数，收的房卡数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Round {
    get { return round_; }
    set {
      round_ = value;
    }
  }

  /// <summary>Field number for the "TR" field.</summary>
  public const int TRFieldNumber = 5;
  private global::TableRule tR_;
  /// <summary>
  /// 规则定义
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TableRule TR {
    get { return tR_; }
    set {
      tR_ = value;
    }
  }

  /// <summary>Field number for the "ptis" field.</summary>
  public const int PtisFieldNumber = 6;
  private static readonly pb::FieldCodec<global::PlayerTableInfo> _repeated_ptis_codec
      = pb::FieldCodec.ForMessage(50, global::PlayerTableInfo.Parser);
  private readonly pbc::RepeatedField<global::PlayerTableInfo> ptis_ = new pbc::RepeatedField<global::PlayerTableInfo>();
  /// <summary>
  /// 用户桌子属性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerTableInfo> Ptis {
    get { return ptis_; }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 7;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "TotalPan" field.</summary>
  public const int TotalPanFieldNumber = 8;
  private int totalPan_;
  /// <summary>
  /// 打多少盘
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalPan {
    get { return totalPan_; }
    set {
      totalPan_ = value;
    }
  }

  /// <summary>Field number for the "TotalTime" field.</summary>
  public const int TotalTimeFieldNumber = 9;
  private int totalTime_;
  /// <summary>
  /// 打多少分钟
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalTime {
    get { return totalTime_; }
    set {
      totalTime_ = value;
    }
  }

  /// <summary>Field number for the "TablelogID" field.</summary>
  public const int TablelogIDFieldNumber = 10;
  private long tablelogID_;
  /// <summary>
  /// 全局唯一桌子id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TablelogID {
    get { return tablelogID_; }
    set {
      tablelogID_ = value;
    }
  }

  /// <summary>Field number for the "Type" field.</summary>
  public const int TypeFieldNumber = 11;
  private int type_;
  /// <summary>
  /// 房间类型 0：标准  1：代开（房主自己不玩）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "Creator" field.</summary>
  public const int CreatorFieldNumber = 12;
  private int creator_;
  /// <summary>
  /// 房间初次创建者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Creator {
    get { return creator_; }
    set {
      creator_ = value;
    }
  }

  /// <summary>Field number for the "Status" field.</summary>
  public const int StatusFieldNumber = 13;
  private int status_;
  /// <summary>
  /// 房间状态 0：创建  2：游戏中
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "TRP" field.</summary>
  public const int TRPFieldNumber = 14;
  private global::TableRulePoker tRP_;
  /// <summary>
  /// 扑克规则定义 废弃
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TableRulePoker TRP {
    get { return tRP_; }
    set {
      tRP_ = value;
    }
  }

  /// <summary>Field number for the "ChargeType" field.</summary>
  public const int ChargeTypeFieldNumber = 15;
  private int chargeType_;
  /// <summary>
  /// 收费方式： 0：创建者收费 1：均摊  2：大赢家
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ChargeType {
    get { return chargeType_; }
    set {
      chargeType_ = value;
    }
  }

  /// <summary>Field number for the "AdminID" field.</summary>
  public const int AdminIDFieldNumber = 16;
  private int adminID_;
  /// <summary>
  /// 该桌子的管理员，亲友圈的实际管理员
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AdminID {
    get { return adminID_; }
    set {
      adminID_ = value;
    }
  }

  /// <summary>Field number for the "VoiceChatType" field.</summary>
  public const int VoiceChatTypeFieldNumber = 17;
  private bool voiceChatType_;
  /// <summary>
  /// 语音聊天
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool VoiceChatType {
    get { return voiceChatType_; }
    set {
      voiceChatType_ = value;
    }
  }

  /// <summary>Field number for the "PrepareType" field.</summary>
  public const int PrepareTypeFieldNumber = 18;
  private bool prepareType_;
  /// <summary>
  /// 准备
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool PrepareType {
    get { return prepareType_; }
    set {
      prepareType_ = value;
    }
  }

  /// <summary>Field number for the "ExpressionType" field.</summary>
  public const int ExpressionTypeFieldNumber = 19;
  private bool expressionType_;
  /// <summary>
  /// 互动表情
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ExpressionType {
    get { return expressionType_; }
    set {
      expressionType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TableInfoMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TableInfoMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TableID != other.TableID) return false;
    if (OwnerID != other.OwnerID) return false;
    if (OwnerName != other.OwnerName) return false;
    if (Round != other.Round) return false;
    if (!object.Equals(TR, other.TR)) return false;
    if(!ptis_.Equals(other.ptis_)) return false;
    if (GameID != other.GameID) return false;
    if (TotalPan != other.TotalPan) return false;
    if (TotalTime != other.TotalTime) return false;
    if (TablelogID != other.TablelogID) return false;
    if (Type != other.Type) return false;
    if (Creator != other.Creator) return false;
    if (Status != other.Status) return false;
    if (!object.Equals(TRP, other.TRP)) return false;
    if (ChargeType != other.ChargeType) return false;
    if (AdminID != other.AdminID) return false;
    if (VoiceChatType != other.VoiceChatType) return false;
    if (PrepareType != other.PrepareType) return false;
    if (ExpressionType != other.ExpressionType) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (OwnerID != 0) hash ^= OwnerID.GetHashCode();
    if (OwnerName.Length != 0) hash ^= OwnerName.GetHashCode();
    if (Round != 0) hash ^= Round.GetHashCode();
    if (tR_ != null) hash ^= TR.GetHashCode();
    hash ^= ptis_.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (TotalPan != 0) hash ^= TotalPan.GetHashCode();
    if (TotalTime != 0) hash ^= TotalTime.GetHashCode();
    if (TablelogID != 0L) hash ^= TablelogID.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Creator != 0) hash ^= Creator.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (tRP_ != null) hash ^= TRP.GetHashCode();
    if (ChargeType != 0) hash ^= ChargeType.GetHashCode();
    if (AdminID != 0) hash ^= AdminID.GetHashCode();
    if (VoiceChatType != false) hash ^= VoiceChatType.GetHashCode();
    if (PrepareType != false) hash ^= PrepareType.GetHashCode();
    if (ExpressionType != false) hash ^= ExpressionType.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TableID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TableID);
    }
    if (OwnerID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OwnerID);
    }
    if (OwnerName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(OwnerName);
    }
    if (Round != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Round);
    }
    if (tR_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(TR);
    }
    ptis_.WriteTo(output, _repeated_ptis_codec);
    if (GameID != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(GameID);
    }
    if (TotalPan != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(TotalPan);
    }
    if (TotalTime != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(TotalTime);
    }
    if (TablelogID != 0L) {
      output.WriteRawTag(80);
      output.WriteInt64(TablelogID);
    }
    if (Type != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(Type);
    }
    if (Creator != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(Creator);
    }
    if (Status != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(Status);
    }
    if (tRP_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(TRP);
    }
    if (ChargeType != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(ChargeType);
    }
    if (AdminID != 0) {
      output.WriteRawTag(128, 1);
      output.WriteInt32(AdminID);
    }
    if (VoiceChatType != false) {
      output.WriteRawTag(136, 1);
      output.WriteBool(VoiceChatType);
    }
    if (PrepareType != false) {
      output.WriteRawTag(144, 1);
      output.WriteBool(PrepareType);
    }
    if (ExpressionType != false) {
      output.WriteRawTag(152, 1);
      output.WriteBool(ExpressionType);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (OwnerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerID);
    }
    if (OwnerName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerName);
    }
    if (Round != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
    }
    if (tR_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TR);
    }
    size += ptis_.CalculateSize(_repeated_ptis_codec);
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (TotalPan != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPan);
    }
    if (TotalTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalTime);
    }
    if (TablelogID != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TablelogID);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Creator != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Creator);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (tRP_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TRP);
    }
    if (ChargeType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChargeType);
    }
    if (AdminID != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(AdminID);
    }
    if (VoiceChatType != false) {
      size += 2 + 1;
    }
    if (PrepareType != false) {
      size += 2 + 1;
    }
    if (ExpressionType != false) {
      size += 2 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TableInfoMsg other) {
    if (other == null) {
      return;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.OwnerID != 0) {
      OwnerID = other.OwnerID;
    }
    if (other.OwnerName.Length != 0) {
      OwnerName = other.OwnerName;
    }
    if (other.Round != 0) {
      Round = other.Round;
    }
    if (other.tR_ != null) {
      if (tR_ == null) {
        tR_ = new global::TableRule();
      }
      TR.MergeFrom(other.TR);
    }
    ptis_.Add(other.ptis_);
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.TotalPan != 0) {
      TotalPan = other.TotalPan;
    }
    if (other.TotalTime != 0) {
      TotalTime = other.TotalTime;
    }
    if (other.TablelogID != 0L) {
      TablelogID = other.TablelogID;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Creator != 0) {
      Creator = other.Creator;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.tRP_ != null) {
      if (tRP_ == null) {
        tRP_ = new global::TableRulePoker();
      }
      TRP.MergeFrom(other.TRP);
    }
    if (other.ChargeType != 0) {
      ChargeType = other.ChargeType;
    }
    if (other.AdminID != 0) {
      AdminID = other.AdminID;
    }
    if (other.VoiceChatType != false) {
      VoiceChatType = other.VoiceChatType;
    }
    if (other.PrepareType != false) {
      PrepareType = other.PrepareType;
    }
    if (other.ExpressionType != false) {
      ExpressionType = other.ExpressionType;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          TableID = input.ReadInt32();
          break;
        }
        case 16: {
          OwnerID = input.ReadInt32();
          break;
        }
        case 26: {
          OwnerName = input.ReadString();
          break;
        }
        case 32: {
          Round = input.ReadInt32();
          break;
        }
        case 42: {
          if (tR_ == null) {
            tR_ = new global::TableRule();
          }
          input.ReadMessage(tR_);
          break;
        }
        case 50: {
          ptis_.AddEntriesFrom(input, _repeated_ptis_codec);
          break;
        }
        case 56: {
          GameID = input.ReadInt32();
          break;
        }
        case 64: {
          TotalPan = input.ReadInt32();
          break;
        }
        case 72: {
          TotalTime = input.ReadInt32();
          break;
        }
        case 80: {
          TablelogID = input.ReadInt64();
          break;
        }
        case 88: {
          Type = input.ReadInt32();
          break;
        }
        case 96: {
          Creator = input.ReadInt32();
          break;
        }
        case 104: {
          Status = input.ReadInt32();
          break;
        }
        case 114: {
          if (tRP_ == null) {
            tRP_ = new global::TableRulePoker();
          }
          input.ReadMessage(tRP_);
          break;
        }
        case 120: {
          ChargeType = input.ReadInt32();
          break;
        }
        case 128: {
          AdminID = input.ReadInt32();
          break;
        }
        case 136: {
          VoiceChatType = input.ReadBool();
          break;
        }
        case 144: {
          PrepareType = input.ReadBool();
          break;
        }
        case 152: {
          ExpressionType = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 创建桌子
/// </summary>
public sealed partial class ReqTableCreate : pb::IMessage<ReqTableCreate> {
  private static readonly pb::MessageParser<ReqTableCreate> _parser = new pb::MessageParser<ReqTableCreate>(() => new ReqTableCreate());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqTableCreate> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqTableCreate() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqTableCreate(ReqTableCreate other) : this() {
    userID_ = other.userID_;
    TableInfo = other.tableInfo_ != null ? other.TableInfo.Clone() : null;
    ipAddr_ = other.ipAddr_;
    gameID_ = other.gameID_;
    type_ = other.type_;
    bEnter_ = other.bEnter_;
    authID_ = other.authID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqTableCreate Clone() {
    return new ReqTableCreate(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "TableInfo" field.</summary>
  public const int TableInfoFieldNumber = 2;
  private global::TableInfoMsg tableInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TableInfoMsg TableInfo {
    get { return tableInfo_; }
    set {
      tableInfo_ = value;
    }
  }

  /// <summary>Field number for the "ipAddr" field.</summary>
  public const int IpAddrFieldNumber = 3;
  private int ipAddr_;
  /// <summary>
  /// 用户操作ip地址
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IpAddr {
    get { return ipAddr_; }
    set {
      ipAddr_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 4;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "Type" field.</summary>
  public const int TypeFieldNumber = 5;
  private int type_;
  /// <summary>
  /// 房间类型 0：标准  1：代开（房主自己不玩）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "bEnter" field.</summary>
  public const int BEnterFieldNumber = 6;
  private int bEnter_;
  /// <summary>
  /// 是否创建成功自动进入房间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BEnter {
    get { return bEnter_; }
    set {
      bEnter_ = value;
    }
  }

  /// <summary>Field number for the "AuthID" field.</summary>
  public const int AuthIDFieldNumber = 7;
  private int authID_;
  /// <summary>
  /// 小秘书授权id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AuthID {
    get { return authID_; }
    set {
      authID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqTableCreate);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqTableCreate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (!object.Equals(TableInfo, other.TableInfo)) return false;
    if (IpAddr != other.IpAddr) return false;
    if (GameID != other.GameID) return false;
    if (Type != other.Type) return false;
    if (BEnter != other.BEnter) return false;
    if (AuthID != other.AuthID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (tableInfo_ != null) hash ^= TableInfo.GetHashCode();
    if (IpAddr != 0) hash ^= IpAddr.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (BEnter != 0) hash ^= BEnter.GetHashCode();
    if (AuthID != 0) hash ^= AuthID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (tableInfo_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(TableInfo);
    }
    if (IpAddr != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(IpAddr);
    }
    if (GameID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(GameID);
    }
    if (Type != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Type);
    }
    if (BEnter != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(BEnter);
    }
    if (AuthID != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(AuthID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (tableInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableInfo);
    }
    if (IpAddr != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IpAddr);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (BEnter != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BEnter);
    }
    if (AuthID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AuthID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqTableCreate other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.tableInfo_ != null) {
      if (tableInfo_ == null) {
        tableInfo_ = new global::TableInfoMsg();
      }
      TableInfo.MergeFrom(other.TableInfo);
    }
    if (other.IpAddr != 0) {
      IpAddr = other.IpAddr;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.BEnter != 0) {
      BEnter = other.BEnter;
    }
    if (other.AuthID != 0) {
      AuthID = other.AuthID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 18: {
          if (tableInfo_ == null) {
            tableInfo_ = new global::TableInfoMsg();
          }
          input.ReadMessage(tableInfo_);
          break;
        }
        case 24: {
          IpAddr = input.ReadInt32();
          break;
        }
        case 32: {
          GameID = input.ReadInt32();
          break;
        }
        case 40: {
          Type = input.ReadInt32();
          break;
        }
        case 48: {
          BEnter = input.ReadInt32();
          break;
        }
        case 56: {
          AuthID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 返回结果
/// </summary>
public sealed partial class AckTableCreate : pb::IMessage<AckTableCreate> {
  private static readonly pb::MessageParser<AckTableCreate> _parser = new pb::MessageParser<AckTableCreate>(() => new AckTableCreate());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckTableCreate> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckTableCreate() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckTableCreate(AckTableCreate other) : this() {
    userID_ = other.userID_;
    result_ = other.result_;
    tableID_ = other.tableID_;
    leftCardCount_ = other.leftCardCount_;
    ownerName_ = other.ownerName_;
    gameID_ = other.gameID_;
    tableLogID_ = other.tableLogID_;
    authID_ = other.authID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckTableCreate Clone() {
    return new AckTableCreate(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 2;
  private int result_;
  /// <summary>
  /// 返回结果（0:成功 != 0失败错误码 1：已经创建了房间 2：房卡不够 3：找不到可用房卡）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 3;
  private int tableID_;
  /// <summary>
  /// 桌子ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "LeftCardCount" field.</summary>
  public const int LeftCardCountFieldNumber = 4;
  private int leftCardCount_;
  /// <summary>
  /// owner剩余房卡数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeftCardCount {
    get { return leftCardCount_; }
    set {
      leftCardCount_ = value;
    }
  }

  /// <summary>Field number for the "OwnerName" field.</summary>
  public const int OwnerNameFieldNumber = 5;
  private string ownerName_ = "";
  /// <summary>
  /// owner昵称
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OwnerName {
    get { return ownerName_; }
    set {
      ownerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 6;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "TableLogID" field.</summary>
  public const int TableLogIDFieldNumber = 7;
  private long tableLogID_;
  /// <summary>
  /// 全局桌子记录id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TableLogID {
    get { return tableLogID_; }
    set {
      tableLogID_ = value;
    }
  }

  /// <summary>Field number for the "AuthID" field.</summary>
  public const int AuthIDFieldNumber = 8;
  private int authID_;
  /// <summary>
  /// 小秘书授权id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AuthID {
    get { return authID_; }
    set {
      authID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckTableCreate);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckTableCreate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (Result != other.Result) return false;
    if (TableID != other.TableID) return false;
    if (LeftCardCount != other.LeftCardCount) return false;
    if (OwnerName != other.OwnerName) return false;
    if (GameID != other.GameID) return false;
    if (TableLogID != other.TableLogID) return false;
    if (AuthID != other.AuthID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (LeftCardCount != 0) hash ^= LeftCardCount.GetHashCode();
    if (OwnerName.Length != 0) hash ^= OwnerName.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (TableLogID != 0L) hash ^= TableLogID.GetHashCode();
    if (AuthID != 0) hash ^= AuthID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (Result != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Result);
    }
    if (TableID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TableID);
    }
    if (LeftCardCount != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(LeftCardCount);
    }
    if (OwnerName.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(OwnerName);
    }
    if (GameID != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(GameID);
    }
    if (TableLogID != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(TableLogID);
    }
    if (AuthID != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(AuthID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (LeftCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCardCount);
    }
    if (OwnerName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerName);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (TableLogID != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TableLogID);
    }
    if (AuthID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AuthID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckTableCreate other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.LeftCardCount != 0) {
      LeftCardCount = other.LeftCardCount;
    }
    if (other.OwnerName.Length != 0) {
      OwnerName = other.OwnerName;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.TableLogID != 0L) {
      TableLogID = other.TableLogID;
    }
    if (other.AuthID != 0) {
      AuthID = other.AuthID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          Result = input.ReadInt32();
          break;
        }
        case 24: {
          TableID = input.ReadInt32();
          break;
        }
        case 32: {
          LeftCardCount = input.ReadInt32();
          break;
        }
        case 42: {
          OwnerName = input.ReadString();
          break;
        }
        case 48: {
          GameID = input.ReadInt32();
          break;
        }
        case 56: {
          TableLogID = input.ReadInt64();
          break;
        }
        case 64: {
          AuthID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 解散桌子
/// </summary>
public sealed partial class ReqTableDismiss : pb::IMessage<ReqTableDismiss> {
  private static readonly pb::MessageParser<ReqTableDismiss> _parser = new pb::MessageParser<ReqTableDismiss>(() => new ReqTableDismiss());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqTableDismiss> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqTableDismiss() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqTableDismiss(ReqTableDismiss other) : this() {
    userID_ = other.userID_;
    tableID_ = other.tableID_;
    leftCardCount_ = other.leftCardCount_;
    bDissmiss_ = other.bDissmiss_;
    targetUserID_ = other.targetUserID_;
    bAgreeDissmiss_ = other.bAgreeDissmiss_;
    ipAddr_ = other.ipAddr_;
    gameID_ = other.gameID_;
    ul_ = other.ul_.Clone();
    aACard_ = other.aACard_;
    winMsg_ = other.winMsg_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqTableDismiss Clone() {
    return new ReqTableDismiss(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 2;
  private int tableID_;
  /// <summary>
  ///  房间号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "LeftCardCount" field.</summary>
  public const int LeftCardCountFieldNumber = 3;
  private int leftCardCount_;
  /// <summary>
  /// owner剩余房卡数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeftCardCount {
    get { return leftCardCount_; }
    set {
      leftCardCount_ = value;
    }
  }

  /// <summary>Field number for the "bDissmiss" field.</summary>
  public const int BDissmissFieldNumber = 4;
  private int bDissmiss_;
  /// <summary>
  /// 是否解散 1 解散，0 未解散
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BDissmiss {
    get { return bDissmiss_; }
    set {
      bDissmiss_ = value;
    }
  }

  /// <summary>Field number for the "TargetUserID" field.</summary>
  public const int TargetUserIDFieldNumber = 5;
  private int targetUserID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TargetUserID {
    get { return targetUserID_; }
    set {
      targetUserID_ = value;
    }
  }

  /// <summary>Field number for the "bAgreeDissmiss" field.</summary>
  public const int BAgreeDissmissFieldNumber = 6;
  private int bAgreeDissmiss_;
  /// <summary>
  /// 是否同意解散 1 同意，0 不同意
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BAgreeDissmiss {
    get { return bAgreeDissmiss_; }
    set {
      bAgreeDissmiss_ = value;
    }
  }

  /// <summary>Field number for the "ipAddr" field.</summary>
  public const int IpAddrFieldNumber = 7;
  private int ipAddr_;
  /// <summary>
  /// 用户操作ip地址
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IpAddr {
    get { return ipAddr_; }
    set {
      ipAddr_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 8;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "ul" field.</summary>
  public const int UlFieldNumber = 9;
  private static readonly pb::FieldCodec<global::UserList> _repeated_ul_codec
      = pb::FieldCodec.ForMessage(74, global::UserList.Parser);
  private readonly pbc::RepeatedField<global::UserList> ul_ = new pbc::RepeatedField<global::UserList>();
  /// <summary>
  /// 用户列表 均摊付费附带，保证返还用户房卡
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UserList> Ul {
    get { return ul_; }
  }

  /// <summary>Field number for the "AACard" field.</summary>
  public const int AACardFieldNumber = 10;
  private int aACard_;
  /// <summary>
  /// 分摊房卡数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AACard {
    get { return aACard_; }
    set {
      aACard_ = value;
    }
  }

  /// <summary>Field number for the "WinMsg" field.</summary>
  public const int WinMsgFieldNumber = 11;
  private string winMsg_ = "";
  /// <summary>
  /// 解散提示
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string WinMsg {
    get { return winMsg_; }
    set {
      winMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqTableDismiss);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqTableDismiss other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (TableID != other.TableID) return false;
    if (LeftCardCount != other.LeftCardCount) return false;
    if (BDissmiss != other.BDissmiss) return false;
    if (TargetUserID != other.TargetUserID) return false;
    if (BAgreeDissmiss != other.BAgreeDissmiss) return false;
    if (IpAddr != other.IpAddr) return false;
    if (GameID != other.GameID) return false;
    if(!ul_.Equals(other.ul_)) return false;
    if (AACard != other.AACard) return false;
    if (WinMsg != other.WinMsg) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (LeftCardCount != 0) hash ^= LeftCardCount.GetHashCode();
    if (BDissmiss != 0) hash ^= BDissmiss.GetHashCode();
    if (TargetUserID != 0) hash ^= TargetUserID.GetHashCode();
    if (BAgreeDissmiss != 0) hash ^= BAgreeDissmiss.GetHashCode();
    if (IpAddr != 0) hash ^= IpAddr.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    hash ^= ul_.GetHashCode();
    if (AACard != 0) hash ^= AACard.GetHashCode();
    if (WinMsg.Length != 0) hash ^= WinMsg.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (TableID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableID);
    }
    if (LeftCardCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(LeftCardCount);
    }
    if (BDissmiss != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(BDissmiss);
    }
    if (TargetUserID != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(TargetUserID);
    }
    if (BAgreeDissmiss != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(BAgreeDissmiss);
    }
    if (IpAddr != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(IpAddr);
    }
    if (GameID != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(GameID);
    }
    ul_.WriteTo(output, _repeated_ul_codec);
    if (AACard != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(AACard);
    }
    if (WinMsg.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(WinMsg);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (LeftCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCardCount);
    }
    if (BDissmiss != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BDissmiss);
    }
    if (TargetUserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetUserID);
    }
    if (BAgreeDissmiss != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BAgreeDissmiss);
    }
    if (IpAddr != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IpAddr);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    size += ul_.CalculateSize(_repeated_ul_codec);
    if (AACard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AACard);
    }
    if (WinMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(WinMsg);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqTableDismiss other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.LeftCardCount != 0) {
      LeftCardCount = other.LeftCardCount;
    }
    if (other.BDissmiss != 0) {
      BDissmiss = other.BDissmiss;
    }
    if (other.TargetUserID != 0) {
      TargetUserID = other.TargetUserID;
    }
    if (other.BAgreeDissmiss != 0) {
      BAgreeDissmiss = other.BAgreeDissmiss;
    }
    if (other.IpAddr != 0) {
      IpAddr = other.IpAddr;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    ul_.Add(other.ul_);
    if (other.AACard != 0) {
      AACard = other.AACard;
    }
    if (other.WinMsg.Length != 0) {
      WinMsg = other.WinMsg;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          TableID = input.ReadInt32();
          break;
        }
        case 24: {
          LeftCardCount = input.ReadInt32();
          break;
        }
        case 32: {
          BDissmiss = input.ReadInt32();
          break;
        }
        case 40: {
          TargetUserID = input.ReadInt32();
          break;
        }
        case 48: {
          BAgreeDissmiss = input.ReadInt32();
          break;
        }
        case 56: {
          IpAddr = input.ReadInt32();
          break;
        }
        case 64: {
          GameID = input.ReadInt32();
          break;
        }
        case 74: {
          ul_.AddEntriesFrom(input, _repeated_ul_codec);
          break;
        }
        case 80: {
          AACard = input.ReadInt32();
          break;
        }
        case 90: {
          WinMsg = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 仅用于均摊方式房卡返还追加
/// </summary>
public sealed partial class UserList : pb::IMessage<UserList> {
  private static readonly pb::MessageParser<UserList> _parser = new pb::MessageParser<UserList>(() => new UserList());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserList(UserList other) : this() {
    userID_ = other.userID_;
    cardRecord_ = other.cardRecord_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserList Clone() {
    return new UserList(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "CardRecord" field.</summary>
  public const int CardRecordFieldNumber = 2;
  private long cardRecord_;
  /// <summary>
  ///  房卡记录
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CardRecord {
    get { return cardRecord_; }
    set {
      cardRecord_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (CardRecord != other.CardRecord) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (CardRecord != 0L) hash ^= CardRecord.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (CardRecord != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(CardRecord);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (CardRecord != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CardRecord);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserList other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.CardRecord != 0L) {
      CardRecord = other.CardRecord;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          CardRecord = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 返回结果
/// </summary>
public sealed partial class AckTableDismiss : pb::IMessage<AckTableDismiss> {
  private static readonly pb::MessageParser<AckTableDismiss> _parser = new pb::MessageParser<AckTableDismiss>(() => new AckTableDismiss());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckTableDismiss> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckTableDismiss() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckTableDismiss(AckTableDismiss other) : this() {
    userID_ = other.userID_;
    tableID_ = other.tableID_;
    result_ = other.result_;
    leftCardCount_ = other.leftCardCount_;
    gameID_ = other.gameID_;
    addCardUser_ = other.addCardUser_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckTableDismiss Clone() {
    return new AckTableDismiss(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 2;
  private int tableID_;
  /// <summary>
  ///  房间号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 3;
  private int result_;
  /// <summary>
  /// 返回结果（0:成功 != 0失败错误码）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "LeftCardCount" field.</summary>
  public const int LeftCardCountFieldNumber = 4;
  private int leftCardCount_;
  /// <summary>
  /// owner剩余房卡数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeftCardCount {
    get { return leftCardCount_; }
    set {
      leftCardCount_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 5;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "AddCardUser" field.</summary>
  public const int AddCardUserFieldNumber = 6;
  private int addCardUser_;
  /// <summary>
  /// 房卡退给初始创建者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AddCardUser {
    get { return addCardUser_; }
    set {
      addCardUser_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckTableDismiss);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckTableDismiss other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (TableID != other.TableID) return false;
    if (Result != other.Result) return false;
    if (LeftCardCount != other.LeftCardCount) return false;
    if (GameID != other.GameID) return false;
    if (AddCardUser != other.AddCardUser) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (LeftCardCount != 0) hash ^= LeftCardCount.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (AddCardUser != 0) hash ^= AddCardUser.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (TableID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableID);
    }
    if (Result != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Result);
    }
    if (LeftCardCount != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(LeftCardCount);
    }
    if (GameID != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(GameID);
    }
    if (AddCardUser != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(AddCardUser);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (LeftCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCardCount);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (AddCardUser != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddCardUser);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckTableDismiss other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.LeftCardCount != 0) {
      LeftCardCount = other.LeftCardCount;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.AddCardUser != 0) {
      AddCardUser = other.AddCardUser;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          TableID = input.ReadInt32();
          break;
        }
        case 24: {
          Result = input.ReadInt32();
          break;
        }
        case 32: {
          LeftCardCount = input.ReadInt32();
          break;
        }
        case 40: {
          GameID = input.ReadInt32();
          break;
        }
        case 48: {
          AddCardUser = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 用户信息更新
/// </summary>
public sealed partial class ReqUserInfoChange : pb::IMessage<ReqUserInfoChange> {
  private static readonly pb::MessageParser<ReqUserInfoChange> _parser = new pb::MessageParser<ReqUserInfoChange>(() => new ReqUserInfoChange());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqUserInfoChange> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqUserInfoChange() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqUserInfoChange(ReqUserInfoChange other) : this() {
    userID_ = other.userID_;
    targetUserID_ = other.targetUserID_;
    cardCount_ = other.cardCount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqUserInfoChange Clone() {
    return new ReqUserInfoChange(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "TargetUserID" field.</summary>
  public const int TargetUserIDFieldNumber = 2;
  private int targetUserID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TargetUserID {
    get { return targetUserID_; }
    set {
      targetUserID_ = value;
    }
  }

  /// <summary>Field number for the "CardCount" field.</summary>
  public const int CardCountFieldNumber = 3;
  private int cardCount_;
  /// <summary>
  /// 房卡数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CardCount {
    get { return cardCount_; }
    set {
      cardCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqUserInfoChange);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqUserInfoChange other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (TargetUserID != other.TargetUserID) return false;
    if (CardCount != other.CardCount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (TargetUserID != 0) hash ^= TargetUserID.GetHashCode();
    if (CardCount != 0) hash ^= CardCount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (TargetUserID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TargetUserID);
    }
    if (CardCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(CardCount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (TargetUserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetUserID);
    }
    if (CardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardCount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqUserInfoChange other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.TargetUserID != 0) {
      TargetUserID = other.TargetUserID;
    }
    if (other.CardCount != 0) {
      CardCount = other.CardCount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          TargetUserID = input.ReadInt32();
          break;
        }
        case 24: {
          CardCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通用返回结果
/// </summary>
public sealed partial class AckMessage : pb::IMessage<AckMessage> {
  private static readonly pb::MessageParser<AckMessage> _parser = new pb::MessageParser<AckMessage>(() => new AckMessage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckMessage(AckMessage other) : this() {
    userID_ = other.userID_;
    result_ = other.result_;
    gameID_ = other.gameID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckMessage Clone() {
    return new AckMessage(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 2;
  private int result_;
  /// <summary>
  /// 返回结果（0:成功 != 0失败错误码）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 3;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (Result != other.Result) return false;
    if (GameID != other.GameID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (Result != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Result);
    }
    if (GameID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(GameID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckMessage other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          Result = input.ReadInt32();
          break;
        }
        case 24: {
          GameID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 加入，离开桌子
/// </summary>
public sealed partial class ReqEnterLeaveTable : pb::IMessage<ReqEnterLeaveTable> {
  private static readonly pb::MessageParser<ReqEnterLeaveTable> _parser = new pb::MessageParser<ReqEnterLeaveTable>(() => new ReqEnterLeaveTable());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqEnterLeaveTable> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqEnterLeaveTable() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqEnterLeaveTable(ReqEnterLeaveTable other) : this() {
    userID_ = other.userID_;
    tableID_ = other.tableID_;
    actionType_ = other.actionType_;
    Pi = other.pi_ != null ? other.Pi.Clone() : null;
    targetUserID_ = other.targetUserID_;
    seat_ = other.seat_;
    gameID_ = other.gameID_;
    clubID_ = other.clubID_;
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqEnterLeaveTable Clone() {
    return new ReqEnterLeaveTable(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 2;
  private int tableID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "action_type" field.</summary>
  public const int ActionTypeFieldNumber = 3;
  private int actionType_;
  /// <summary>
  /// 0:enter  1:leave
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ActionType {
    get { return actionType_; }
    set {
      actionType_ = value;
    }
  }

  /// <summary>Field number for the "pi" field.</summary>
  public const int PiFieldNumber = 4;
  private global::PlayerInfo pi_;
  /// <summary>
  /// 加入桌子的用户信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerInfo Pi {
    get { return pi_; }
    set {
      pi_ = value;
    }
  }

  /// <summary>Field number for the "TargetUserID" field.</summary>
  public const int TargetUserIDFieldNumber = 5;
  private int targetUserID_;
  /// <summary>
  /// 用于广播确定唯一id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TargetUserID {
    get { return targetUserID_; }
    set {
      targetUserID_ = value;
    }
  }

  /// <summary>Field number for the "Seat" field.</summary>
  public const int SeatFieldNumber = 6;
  private int seat_;
  /// <summary>
  /// 用户进入桌子之后给其他人广播会带上用户分配的座位
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 7;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "ClubID" field.</summary>
  public const int ClubIDFieldNumber = 8;
  private int clubID_;
  /// <summary>
  /// 亲友圈id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClubID {
    get { return clubID_; }
    set {
      clubID_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 9;
  private int roomID_;
  /// <summary>
  /// 亲友圈包间id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqEnterLeaveTable);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqEnterLeaveTable other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (TableID != other.TableID) return false;
    if (ActionType != other.ActionType) return false;
    if (!object.Equals(Pi, other.Pi)) return false;
    if (TargetUserID != other.TargetUserID) return false;
    if (Seat != other.Seat) return false;
    if (GameID != other.GameID) return false;
    if (ClubID != other.ClubID) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (ActionType != 0) hash ^= ActionType.GetHashCode();
    if (pi_ != null) hash ^= Pi.GetHashCode();
    if (TargetUserID != 0) hash ^= TargetUserID.GetHashCode();
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (ClubID != 0) hash ^= ClubID.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (TableID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableID);
    }
    if (ActionType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ActionType);
    }
    if (pi_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Pi);
    }
    if (TargetUserID != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(TargetUserID);
    }
    if (Seat != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Seat);
    }
    if (GameID != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(GameID);
    }
    if (ClubID != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(ClubID);
    }
    if (RoomID != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (ActionType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionType);
    }
    if (pi_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pi);
    }
    if (TargetUserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetUserID);
    }
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (ClubID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClubID);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqEnterLeaveTable other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.ActionType != 0) {
      ActionType = other.ActionType;
    }
    if (other.pi_ != null) {
      if (pi_ == null) {
        pi_ = new global::PlayerInfo();
      }
      Pi.MergeFrom(other.Pi);
    }
    if (other.TargetUserID != 0) {
      TargetUserID = other.TargetUserID;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.ClubID != 0) {
      ClubID = other.ClubID;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          TableID = input.ReadInt32();
          break;
        }
        case 24: {
          ActionType = input.ReadInt32();
          break;
        }
        case 34: {
          if (pi_ == null) {
            pi_ = new global::PlayerInfo();
          }
          input.ReadMessage(pi_);
          break;
        }
        case 40: {
          TargetUserID = input.ReadInt32();
          break;
        }
        case 48: {
          Seat = input.ReadInt32();
          break;
        }
        case 56: {
          GameID = input.ReadInt32();
          break;
        }
        case 64: {
          ClubID = input.ReadInt32();
          break;
        }
        case 72: {
          RoomID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class AckEnterLeaveTable : pb::IMessage<AckEnterLeaveTable> {
  private static readonly pb::MessageParser<AckEnterLeaveTable> _parser = new pb::MessageParser<AckEnterLeaveTable>(() => new AckEnterLeaveTable());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckEnterLeaveTable> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckEnterLeaveTable() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckEnterLeaveTable(AckEnterLeaveTable other) : this() {
    userID_ = other.userID_;
    tableID_ = other.tableID_;
    actionType_ = other.actionType_;
    result_ = other.result_;
    targetSeat_ = other.targetSeat_;
    TableInfo = other.tableInfo_ != null ? other.TableInfo.Clone() : null;
    pis_ = other.pis_.Clone();
    gameID_ = other.gameID_;
    seat_ = other.seat_;
    clubID_ = other.clubID_;
    tableStart_ = other.tableStart_;
    showCharge_ = other.showCharge_;
    roomID_ = other.roomID_;
    errMsg_ = other.errMsg_;
    tableNo_ = other.tableNo_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckEnterLeaveTable Clone() {
    return new AckEnterLeaveTable(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 2;
  private int tableID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "action_type" field.</summary>
  public const int ActionTypeFieldNumber = 3;
  private int actionType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ActionType {
    get { return actionType_; }
    set {
      actionType_ = value;
    }
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 4;
  private int result_;
  /// <summary>
  ///  0:SUCCESS >=1:FAILURE(1:通用坐下失败， 2：房间人满，3：房卡不足) 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "target_seat" field.</summary>
  public const int TargetSeatFieldNumber = 5;
  private int targetSeat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TargetSeat {
    get { return targetSeat_; }
    set {
      targetSeat_ = value;
    }
  }

  /// <summary>Field number for the "TableInfo" field.</summary>
  public const int TableInfoFieldNumber = 6;
  private global::TableInfoMsg tableInfo_;
  /// <summary>
  /// 返回房间信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TableInfoMsg TableInfo {
    get { return tableInfo_; }
    set {
      tableInfo_ = value;
    }
  }

  /// <summary>Field number for the "pis" field.</summary>
  public const int PisFieldNumber = 7;
  private static readonly pb::FieldCodec<global::PlayerInfo> _repeated_pis_codec
      = pb::FieldCodec.ForMessage(58, global::PlayerInfo.Parser);
  private readonly pbc::RepeatedField<global::PlayerInfo> pis_ = new pbc::RepeatedField<global::PlayerInfo>();
  /// <summary>
  /// 用户列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerInfo> Pis {
    get { return pis_; }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 8;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "Seat" field.</summary>
  public const int SeatFieldNumber = 9;
  private int seat_;
  /// <summary>
  /// 用户进入桌子之后座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "ClubID" field.</summary>
  public const int ClubIDFieldNumber = 10;
  private int clubID_;
  /// <summary>
  /// 亲友圈id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClubID {
    get { return clubID_; }
    set {
      clubID_ = value;
    }
  }

  /// <summary>Field number for the "TableStart" field.</summary>
  public const int TableStartFieldNumber = 11;
  private int tableStart_;
  /// <summary>
  /// 是否开桌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableStart {
    get { return tableStart_; }
    set {
      tableStart_ = value;
    }
  }

  /// <summary>Field number for the "ShowCharge" field.</summary>
  public const int ShowChargeFieldNumber = 12;
  private int showCharge_;
  /// <summary>
  /// 显示付费提示 1：显示，用户确认继续准备，否则发退出房间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ShowCharge {
    get { return showCharge_; }
    set {
      showCharge_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 13;
  private int roomID_;
  /// <summary>
  /// 亲友圈包间id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "ErrMsg" field.</summary>
  public const int ErrMsgFieldNumber = 14;
  private string errMsg_ = "";
  /// <summary>
  /// 失败原因：如：您还不是亲友圈成员，请输入盟主id：111111添加亲友圈
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrMsg {
    get { return errMsg_; }
    set {
      errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "TableNo" field.</summary>
  public const int TableNoFieldNumber = 15;
  private int tableNo_;
  /// <summary>
  /// 亲友桌桌子序号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableNo {
    get { return tableNo_; }
    set {
      tableNo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckEnterLeaveTable);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckEnterLeaveTable other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (TableID != other.TableID) return false;
    if (ActionType != other.ActionType) return false;
    if (Result != other.Result) return false;
    if (TargetSeat != other.TargetSeat) return false;
    if (!object.Equals(TableInfo, other.TableInfo)) return false;
    if(!pis_.Equals(other.pis_)) return false;
    if (GameID != other.GameID) return false;
    if (Seat != other.Seat) return false;
    if (ClubID != other.ClubID) return false;
    if (TableStart != other.TableStart) return false;
    if (ShowCharge != other.ShowCharge) return false;
    if (RoomID != other.RoomID) return false;
    if (ErrMsg != other.ErrMsg) return false;
    if (TableNo != other.TableNo) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (ActionType != 0) hash ^= ActionType.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (TargetSeat != 0) hash ^= TargetSeat.GetHashCode();
    if (tableInfo_ != null) hash ^= TableInfo.GetHashCode();
    hash ^= pis_.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (ClubID != 0) hash ^= ClubID.GetHashCode();
    if (TableStart != 0) hash ^= TableStart.GetHashCode();
    if (ShowCharge != 0) hash ^= ShowCharge.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
    if (TableNo != 0) hash ^= TableNo.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (TableID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableID);
    }
    if (ActionType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ActionType);
    }
    if (Result != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Result);
    }
    if (TargetSeat != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(TargetSeat);
    }
    if (tableInfo_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(TableInfo);
    }
    pis_.WriteTo(output, _repeated_pis_codec);
    if (GameID != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(GameID);
    }
    if (Seat != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(Seat);
    }
    if (ClubID != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(ClubID);
    }
    if (TableStart != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(TableStart);
    }
    if (ShowCharge != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(ShowCharge);
    }
    if (RoomID != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(RoomID);
    }
    if (ErrMsg.Length != 0) {
      output.WriteRawTag(114);
      output.WriteString(ErrMsg);
    }
    if (TableNo != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(TableNo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (ActionType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionType);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (TargetSeat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetSeat);
    }
    if (tableInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableInfo);
    }
    size += pis_.CalculateSize(_repeated_pis_codec);
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (ClubID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClubID);
    }
    if (TableStart != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableStart);
    }
    if (ShowCharge != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShowCharge);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    if (ErrMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
    }
    if (TableNo != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableNo);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckEnterLeaveTable other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.ActionType != 0) {
      ActionType = other.ActionType;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.TargetSeat != 0) {
      TargetSeat = other.TargetSeat;
    }
    if (other.tableInfo_ != null) {
      if (tableInfo_ == null) {
        tableInfo_ = new global::TableInfoMsg();
      }
      TableInfo.MergeFrom(other.TableInfo);
    }
    pis_.Add(other.pis_);
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.ClubID != 0) {
      ClubID = other.ClubID;
    }
    if (other.TableStart != 0) {
      TableStart = other.TableStart;
    }
    if (other.ShowCharge != 0) {
      ShowCharge = other.ShowCharge;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
    if (other.ErrMsg.Length != 0) {
      ErrMsg = other.ErrMsg;
    }
    if (other.TableNo != 0) {
      TableNo = other.TableNo;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          TableID = input.ReadInt32();
          break;
        }
        case 24: {
          ActionType = input.ReadInt32();
          break;
        }
        case 32: {
          Result = input.ReadInt32();
          break;
        }
        case 40: {
          TargetSeat = input.ReadInt32();
          break;
        }
        case 50: {
          if (tableInfo_ == null) {
            tableInfo_ = new global::TableInfoMsg();
          }
          input.ReadMessage(tableInfo_);
          break;
        }
        case 58: {
          pis_.AddEntriesFrom(input, _repeated_pis_codec);
          break;
        }
        case 64: {
          GameID = input.ReadInt32();
          break;
        }
        case 72: {
          Seat = input.ReadInt32();
          break;
        }
        case 80: {
          ClubID = input.ReadInt32();
          break;
        }
        case 88: {
          TableStart = input.ReadInt32();
          break;
        }
        case 96: {
          ShowCharge = input.ReadInt32();
          break;
        }
        case 104: {
          RoomID = input.ReadInt32();
          break;
        }
        case 114: {
          ErrMsg = input.ReadString();
          break;
        }
        case 120: {
          TableNo = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 桌内动作，准备/取消准备
/// </summary>
public sealed partial class ReqReady : pb::IMessage<ReqReady> {
  private static readonly pb::MessageParser<ReqReady> _parser = new pb::MessageParser<ReqReady>(() => new ReqReady());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqReady> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqReady() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqReady(ReqReady other) : this() {
    userID_ = other.userID_;
    tableID_ = other.tableID_;
    actionType_ = other.actionType_;
    targetUserID_ = other.targetUserID_;
    gameID_ = other.gameID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqReady Clone() {
    return new ReqReady(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 2;
  private int tableID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "action_type" field.</summary>
  public const int ActionTypeFieldNumber = 3;
  private int actionType_;
  /// <summary>
  ///  0:准备  1:取消准备 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ActionType {
    get { return actionType_; }
    set {
      actionType_ = value;
    }
  }

  /// <summary>Field number for the "TargetUserID" field.</summary>
  public const int TargetUserIDFieldNumber = 4;
  private int targetUserID_;
  /// <summary>
  /// gate用给谁广播
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TargetUserID {
    get { return targetUserID_; }
    set {
      targetUserID_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 5;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqReady);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqReady other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (TableID != other.TableID) return false;
    if (ActionType != other.ActionType) return false;
    if (TargetUserID != other.TargetUserID) return false;
    if (GameID != other.GameID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (ActionType != 0) hash ^= ActionType.GetHashCode();
    if (TargetUserID != 0) hash ^= TargetUserID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (TableID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableID);
    }
    if (ActionType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ActionType);
    }
    if (TargetUserID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TargetUserID);
    }
    if (GameID != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(GameID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (ActionType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionType);
    }
    if (TargetUserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetUserID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqReady other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.ActionType != 0) {
      ActionType = other.ActionType;
    }
    if (other.TargetUserID != 0) {
      TargetUserID = other.TargetUserID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          TableID = input.ReadInt32();
          break;
        }
        case 24: {
          ActionType = input.ReadInt32();
          break;
        }
        case 32: {
          TargetUserID = input.ReadInt32();
          break;
        }
        case 40: {
          GameID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class AckReady : pb::IMessage<AckReady> {
  private static readonly pb::MessageParser<AckReady> _parser = new pb::MessageParser<AckReady>(() => new AckReady());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckReady> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckReady() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckReady(AckReady other) : this() {
    userID_ = other.userID_;
    result_ = other.result_;
    tableID_ = other.tableID_;
    actionType_ = other.actionType_;
    gameID_ = other.gameID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckReady Clone() {
    return new AckReady(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 2;
  private int result_;
  /// <summary>
  ///  0:SUCCESS 1:FAILURE(others reason )
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 3;
  private int tableID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "action_type" field.</summary>
  public const int ActionTypeFieldNumber = 4;
  private int actionType_;
  /// <summary>
  ///  0:准备  1:取消准备 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ActionType {
    get { return actionType_; }
    set {
      actionType_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 5;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckReady);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckReady other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (Result != other.Result) return false;
    if (TableID != other.TableID) return false;
    if (ActionType != other.ActionType) return false;
    if (GameID != other.GameID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (ActionType != 0) hash ^= ActionType.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (Result != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Result);
    }
    if (TableID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TableID);
    }
    if (ActionType != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(ActionType);
    }
    if (GameID != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(GameID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (ActionType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionType);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckReady other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.ActionType != 0) {
      ActionType = other.ActionType;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          Result = input.ReadInt32();
          break;
        }
        case 24: {
          TableID = input.ReadInt32();
          break;
        }
        case 32: {
          ActionType = input.ReadInt32();
          break;
        }
        case 40: {
          GameID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 用户gate断线状态告知
/// </summary>
public sealed partial class OGGateReqBreak : pb::IMessage<OGGateReqBreak> {
  private static readonly pb::MessageParser<OGGateReqBreak> _parser = new pb::MessageParser<OGGateReqBreak>(() => new OGGateReqBreak());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OGGateReqBreak> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OGGateReqBreak() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OGGateReqBreak(OGGateReqBreak other) : this() {
    userID_ = other.userID_;
    tableID_ = other.tableID_;
    targetUserID_ = other.targetUserID_;
    gameID_ = other.gameID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OGGateReqBreak Clone() {
    return new OGGateReqBreak(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户名 代理专用
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 2;
  private int tableID_;
  /// <summary>
  /// 用户所在桌子id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "TargetUserID" field.</summary>
  public const int TargetUserIDFieldNumber = 3;
  private int targetUserID_;
  /// <summary>
  /// gate用给谁广播
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TargetUserID {
    get { return targetUserID_; }
    set {
      targetUserID_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 4;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OGGateReqBreak);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OGGateReqBreak other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (TableID != other.TableID) return false;
    if (TargetUserID != other.TargetUserID) return false;
    if (GameID != other.GameID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (TargetUserID != 0) hash ^= TargetUserID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (TableID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableID);
    }
    if (TargetUserID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TargetUserID);
    }
    if (GameID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(GameID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (TargetUserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetUserID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OGGateReqBreak other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.TargetUserID != 0) {
      TargetUserID = other.TargetUserID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          TableID = input.ReadInt32();
          break;
        }
        case 24: {
          TargetUserID = input.ReadInt32();
          break;
        }
        case 32: {
          GameID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端游戏结束
/// </summary>
public sealed partial class OGPlayerGameOver : pb::IMessage<OGPlayerGameOver> {
  private static readonly pb::MessageParser<OGPlayerGameOver> _parser = new pb::MessageParser<OGPlayerGameOver>(() => new OGPlayerGameOver());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OGPlayerGameOver> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OGPlayerGameOver() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OGPlayerGameOver(OGPlayerGameOver other) : this() {
    userID_ = other.userID_;
    tableID_ = other.tableID_;
    gameID_ = other.gameID_;
    ruleID_ = other.ruleID_;
    winMsg_ = other.winMsg_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OGPlayerGameOver Clone() {
    return new OGPlayerGameOver(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 2;
  private int tableID_;
  /// <summary>
  /// 桌号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 3;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "RuleID" field.</summary>
  public const int RuleIDFieldNumber = 4;
  private int ruleID_;
  /// <summary>
  /// 游戏规则ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RuleID {
    get { return ruleID_; }
    set {
      ruleID_ = value;
    }
  }

  /// <summary>Field number for the "WinMsg" field.</summary>
  public const int WinMsgFieldNumber = 5;
  private string winMsg_ = "";
  /// <summary>
  /// 解散提示
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string WinMsg {
    get { return winMsg_; }
    set {
      winMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OGPlayerGameOver);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OGPlayerGameOver other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (TableID != other.TableID) return false;
    if (GameID != other.GameID) return false;
    if (RuleID != other.RuleID) return false;
    if (WinMsg != other.WinMsg) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (RuleID != 0) hash ^= RuleID.GetHashCode();
    if (WinMsg.Length != 0) hash ^= WinMsg.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (TableID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableID);
    }
    if (GameID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(GameID);
    }
    if (RuleID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RuleID);
    }
    if (WinMsg.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(WinMsg);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (RuleID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RuleID);
    }
    if (WinMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(WinMsg);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OGPlayerGameOver other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.RuleID != 0) {
      RuleID = other.RuleID;
    }
    if (other.WinMsg.Length != 0) {
      WinMsg = other.WinMsg;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          TableID = input.ReadInt32();
          break;
        }
        case 24: {
          GameID = input.ReadInt32();
          break;
        }
        case 32: {
          RuleID = input.ReadInt32();
          break;
        }
        case 42: {
          WinMsg = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端用户信息改变
/// </summary>
public sealed partial class OGPlayerInfoChange : pb::IMessage<OGPlayerInfoChange> {
  private static readonly pb::MessageParser<OGPlayerInfoChange> _parser = new pb::MessageParser<OGPlayerInfoChange>(() => new OGPlayerInfoChange());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OGPlayerInfoChange> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OGPlayerInfoChange() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OGPlayerInfoChange(OGPlayerInfoChange other) : this() {
    userID_ = other.userID_;
    leftCardCount_ = other.leftCardCount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OGPlayerInfoChange Clone() {
    return new OGPlayerInfoChange(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "LeftCardCount" field.</summary>
  public const int LeftCardCountFieldNumber = 2;
  private int leftCardCount_;
  /// <summary>
  /// 用户剩余房卡数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeftCardCount {
    get { return leftCardCount_; }
    set {
      leftCardCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OGPlayerInfoChange);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OGPlayerInfoChange other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (LeftCardCount != other.LeftCardCount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (LeftCardCount != 0) hash ^= LeftCardCount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (LeftCardCount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(LeftCardCount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (LeftCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCardCount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OGPlayerInfoChange other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.LeftCardCount != 0) {
      LeftCardCount = other.LeftCardCount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          LeftCardCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 一局游戏结果
/// </summary>
public sealed partial class ReqGameResult : pb::IMessage<ReqGameResult> {
  private static readonly pb::MessageParser<ReqGameResult> _parser = new pb::MessageParser<ReqGameResult>(() => new ReqGameResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqGameResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqGameResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqGameResult(ReqGameResult other) : this() {
    round_ = other.round_;
    startTime_ = other.startTime_;
    endTime_ = other.endTime_;
    TableInfos = other.tableInfos_ != null ? other.TableInfos.Clone() : null;
    uR_ = other.uR_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqGameResult Clone() {
    return new ReqGameResult(this);
  }

  /// <summary>Field number for the "Round" field.</summary>
  public const int RoundFieldNumber = 1;
  private int round_;
  /// <summary>
  /// 游戏圈数（8盘=1圈，1圈=1房卡）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Round {
    get { return round_; }
    set {
      round_ = value;
    }
  }

  /// <summary>Field number for the "start_time" field.</summary>
  public const int StartTimeFieldNumber = 2;
  private string startTime_ = "";
  /// <summary>
  /// 开始时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string StartTime {
    get { return startTime_; }
    set {
      startTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "end_time" field.</summary>
  public const int EndTimeFieldNumber = 3;
  private string endTime_ = "";
  /// <summary>
  /// 结束时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string EndTime {
    get { return endTime_; }
    set {
      endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "TableInfos" field.</summary>
  public const int TableInfosFieldNumber = 4;
  private global::TableInfoMsg tableInfos_;
  /// <summary>
  /// 房间规则
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TableInfoMsg TableInfos {
    get { return tableInfos_; }
    set {
      tableInfos_ = value;
    }
  }

  /// <summary>Field number for the "UR" field.</summary>
  public const int URFieldNumber = 5;
  private static readonly pb::FieldCodec<global::UserResult> _repeated_uR_codec
      = pb::FieldCodec.ForMessage(42, global::UserResult.Parser);
  private readonly pbc::RepeatedField<global::UserResult> uR_ = new pbc::RepeatedField<global::UserResult>();
  /// <summary>
  /// 用户信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UserResult> UR {
    get { return uR_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqGameResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqGameResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Round != other.Round) return false;
    if (StartTime != other.StartTime) return false;
    if (EndTime != other.EndTime) return false;
    if (!object.Equals(TableInfos, other.TableInfos)) return false;
    if(!uR_.Equals(other.uR_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Round != 0) hash ^= Round.GetHashCode();
    if (StartTime.Length != 0) hash ^= StartTime.GetHashCode();
    if (EndTime.Length != 0) hash ^= EndTime.GetHashCode();
    if (tableInfos_ != null) hash ^= TableInfos.GetHashCode();
    hash ^= uR_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Round != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Round);
    }
    if (StartTime.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(StartTime);
    }
    if (EndTime.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(EndTime);
    }
    if (tableInfos_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(TableInfos);
    }
    uR_.WriteTo(output, _repeated_uR_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Round != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
    }
    if (StartTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(StartTime);
    }
    if (EndTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
    }
    if (tableInfos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableInfos);
    }
    size += uR_.CalculateSize(_repeated_uR_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqGameResult other) {
    if (other == null) {
      return;
    }
    if (other.Round != 0) {
      Round = other.Round;
    }
    if (other.StartTime.Length != 0) {
      StartTime = other.StartTime;
    }
    if (other.EndTime.Length != 0) {
      EndTime = other.EndTime;
    }
    if (other.tableInfos_ != null) {
      if (tableInfos_ == null) {
        tableInfos_ = new global::TableInfoMsg();
      }
      TableInfos.MergeFrom(other.TableInfos);
    }
    uR_.Add(other.uR_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Round = input.ReadInt32();
          break;
        }
        case 18: {
          StartTime = input.ReadString();
          break;
        }
        case 26: {
          EndTime = input.ReadString();
          break;
        }
        case 34: {
          if (tableInfos_ == null) {
            tableInfos_ = new global::TableInfoMsg();
          }
          input.ReadMessage(tableInfos_);
          break;
        }
        case 42: {
          uR_.AddEntriesFrom(input, _repeated_uR_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class UserResult : pb::IMessage<UserResult> {
  private static readonly pb::MessageParser<UserResult> _parser = new pb::MessageParser<UserResult>(() => new UserResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserResult(UserResult other) : this() {
    userID_ = other.userID_;
    score_ = other.score_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserResult Clone() {
    return new UserResult(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 玩家id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "Score" field.</summary>
  public const int ScoreFieldNumber = 2;
  private int score_;
  /// <summary>
  /// 分数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Score {
    get { return score_; }
    set {
      score_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (Score != other.Score) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (Score != 0) hash ^= Score.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (Score != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Score);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (Score != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserResult other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.Score != 0) {
      Score = other.Score;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          Score = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端游戏开始
/// </summary>
public sealed partial class OGClientStartGame : pb::IMessage<OGClientStartGame> {
  private static readonly pb::MessageParser<OGClientStartGame> _parser = new pb::MessageParser<OGClientStartGame>(() => new OGClientStartGame());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OGClientStartGame> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OGClientStartGame() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OGClientStartGame(OGClientStartGame other) : this() {
    userID_ = other.userID_;
    tableID_ = other.tableID_;
    gamesvrip_ = other.gamesvrip_;
    gamesvrport_ = other.gamesvrport_;
    gamecontinue_ = other.gamecontinue_;
    gameID_ = other.gameID_;
    domain_ = other.domain_;
    ruleID_ = other.ruleID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OGClientStartGame Clone() {
    return new OGClientStartGame(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 2;
  private int tableID_;
  /// <summary>
  /// 桌号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "Gamesvrip" field.</summary>
  public const int GamesvripFieldNumber = 3;
  private uint gamesvrip_;
  /// <summary>
  /// 游戏服务器ip
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Gamesvrip {
    get { return gamesvrip_; }
    set {
      gamesvrip_ = value;
    }
  }

  /// <summary>Field number for the "Gamesvrport" field.</summary>
  public const int GamesvrportFieldNumber = 4;
  private int gamesvrport_;
  /// <summary>
  /// 游戏服务器端口
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gamesvrport {
    get { return gamesvrport_; }
    set {
      gamesvrport_ = value;
    }
  }

  /// <summary>Field number for the "Gamecontinue" field.</summary>
  public const int GamecontinueFieldNumber = 5;
  private int gamecontinue_;
  /// <summary>
  /// 断线回来[1:断线续玩，0:正常启动]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gamecontinue {
    get { return gamecontinue_; }
    set {
      gamecontinue_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 6;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "Domain" field.</summary>
  public const int DomainFieldNumber = 7;
  private string domain_ = "";
  /// <summary>
  /// 游戏服务域名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Domain {
    get { return domain_; }
    set {
      domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "RuleID" field.</summary>
  public const int RuleIDFieldNumber = 8;
  private int ruleID_;
  /// <summary>
  /// 游戏规则ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RuleID {
    get { return ruleID_; }
    set {
      ruleID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OGClientStartGame);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OGClientStartGame other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (TableID != other.TableID) return false;
    if (Gamesvrip != other.Gamesvrip) return false;
    if (Gamesvrport != other.Gamesvrport) return false;
    if (Gamecontinue != other.Gamecontinue) return false;
    if (GameID != other.GameID) return false;
    if (Domain != other.Domain) return false;
    if (RuleID != other.RuleID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (Gamesvrip != 0) hash ^= Gamesvrip.GetHashCode();
    if (Gamesvrport != 0) hash ^= Gamesvrport.GetHashCode();
    if (Gamecontinue != 0) hash ^= Gamecontinue.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (Domain.Length != 0) hash ^= Domain.GetHashCode();
    if (RuleID != 0) hash ^= RuleID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (TableID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableID);
    }
    if (Gamesvrip != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Gamesvrip);
    }
    if (Gamesvrport != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Gamesvrport);
    }
    if (Gamecontinue != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Gamecontinue);
    }
    if (GameID != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(GameID);
    }
    if (Domain.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Domain);
    }
    if (RuleID != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(RuleID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (Gamesvrip != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gamesvrip);
    }
    if (Gamesvrport != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gamesvrport);
    }
    if (Gamecontinue != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gamecontinue);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (Domain.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
    }
    if (RuleID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RuleID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OGClientStartGame other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.Gamesvrip != 0) {
      Gamesvrip = other.Gamesvrip;
    }
    if (other.Gamesvrport != 0) {
      Gamesvrport = other.Gamesvrport;
    }
    if (other.Gamecontinue != 0) {
      Gamecontinue = other.Gamecontinue;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.Domain.Length != 0) {
      Domain = other.Domain;
    }
    if (other.RuleID != 0) {
      RuleID = other.RuleID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          TableID = input.ReadInt32();
          break;
        }
        case 24: {
          Gamesvrip = input.ReadUInt32();
          break;
        }
        case 32: {
          Gamesvrport = input.ReadInt32();
          break;
        }
        case 40: {
          Gamecontinue = input.ReadInt32();
          break;
        }
        case 48: {
          GameID = input.ReadInt32();
          break;
        }
        case 58: {
          Domain = input.ReadString();
          break;
        }
        case 64: {
          RuleID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端代开房间房主游戏启动
/// </summary>
public sealed partial class OGCreatorGameStart : pb::IMessage<OGCreatorGameStart> {
  private static readonly pb::MessageParser<OGCreatorGameStart> _parser = new pb::MessageParser<OGCreatorGameStart>(() => new OGCreatorGameStart());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OGCreatorGameStart> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OGCreatorGameStart() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OGCreatorGameStart(OGCreatorGameStart other) : this() {
    userID_ = other.userID_;
    tableID_ = other.tableID_;
    gameID_ = other.gameID_;
    ruleID_ = other.ruleID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OGCreatorGameStart Clone() {
    return new OGCreatorGameStart(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 2;
  private int tableID_;
  /// <summary>
  /// 桌号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 3;
  private int gameID_;
  /// <summary>
  /// 游戏id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "RuleID" field.</summary>
  public const int RuleIDFieldNumber = 4;
  private int ruleID_;
  /// <summary>
  /// 游戏规则ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RuleID {
    get { return ruleID_; }
    set {
      ruleID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OGCreatorGameStart);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OGCreatorGameStart other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (TableID != other.TableID) return false;
    if (GameID != other.GameID) return false;
    if (RuleID != other.RuleID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (RuleID != 0) hash ^= RuleID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (TableID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableID);
    }
    if (GameID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(GameID);
    }
    if (RuleID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RuleID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (RuleID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RuleID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OGCreatorGameStart other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.RuleID != 0) {
      RuleID = other.RuleID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          TableID = input.ReadInt32();
          break;
        }
        case 24: {
          GameID = input.ReadInt32();
          break;
        }
        case 32: {
          RuleID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣//
/// ------------------------------------pdk game--------------------------------------//
/// __________________________________________________________________________________//
/// 手牌容器
/// </summary>
public sealed partial class CGSHandCardItem : pb::IMessage<CGSHandCardItem> {
  private static readonly pb::MessageParser<CGSHandCardItem> _parser = new pb::MessageParser<CGSHandCardItem>(() => new CGSHandCardItem());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSHandCardItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSHandCardItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSHandCardItem(CGSHandCardItem other) : this() {
    cards_ = other.cards_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSHandCardItem Clone() {
    return new CGSHandCardItem(this);
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_cards_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 牌数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Cards {
    get { return cards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSHandCardItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSHandCardItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cards_.Equals(other.cards_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cards_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cards_.WriteTo(output, _repeated_cards_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cards_.CalculateSize(_repeated_cards_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSHandCardItem other) {
    if (other == null) {
      return;
    }
    cards_.Add(other.cards_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 桌牌容器
/// </summary>
public sealed partial class CGSTableCardItem : pb::IMessage<CGSTableCardItem> {
  private static readonly pb::MessageParser<CGSTableCardItem> _parser = new pb::MessageParser<CGSTableCardItem>(() => new CGSTableCardItem());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSTableCardItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSTableCardItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSTableCardItem(CGSTableCardItem other) : this() {
    cards_ = other.cards_.Clone();
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSTableCardItem Clone() {
    return new CGSTableCardItem(this);
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_cards_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 牌数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Cards {
    get { return cards_; }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  /// <summary>
  /// 动作类型: 0-不出 1-没出过
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSTableCardItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSTableCardItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cards_.Equals(other.cards_)) return false;
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cards_.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cards_.WriteTo(output, _repeated_cards_codec);
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSTableCardItem other) {
    if (other == null) {
      return;
    }
    cards_.Add(other.cards_);
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 玩家动态信息
/// </summary>
public sealed partial class CGSPlayerInfoReal : pb::IMessage<CGSPlayerInfoReal> {
  private static readonly pb::MessageParser<CGSPlayerInfoReal> _parser = new pb::MessageParser<CGSPlayerInfoReal>(() => new CGSPlayerInfoReal());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSPlayerInfoReal> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerInfoReal() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerInfoReal(CGSPlayerInfoReal other) : this() {
    CardTable = other.cardTable_ != null ? other.CardTable.Clone() : null;
    timeThink_ = other.timeThink_;
    cardHand_ = other.cardHand_.Clone();
    leftCardCount_ = other.leftCardCount_;
    bombCount_ = other.bombCount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerInfoReal Clone() {
    return new CGSPlayerInfoReal(this);
  }

  /// <summary>Field number for the "card_table" field.</summary>
  public const int CardTableFieldNumber = 1;
  private global::CGSTableCardItem cardTable_;
  /// <summary>
  /// 桌牌内容
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CGSTableCardItem CardTable {
    get { return cardTable_; }
    set {
      cardTable_ = value;
    }
  }

  /// <summary>Field number for the "time_think" field.</summary>
  public const int TimeThinkFieldNumber = 2;
  private int timeThink_;
  /// <summary>
  /// 出牌思考时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeThink {
    get { return timeThink_; }
    set {
      timeThink_ = value;
    }
  }

  /// <summary>Field number for the "card_hand" field.</summary>
  public const int CardHandFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_cardHand_codec
      = pb::FieldCodec.ForInt32(26);
  private readonly pbc::RepeatedField<int> cardHand_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 手牌内容
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> CardHand {
    get { return cardHand_; }
  }

  /// <summary>Field number for the "left_card_count" field.</summary>
  public const int LeftCardCountFieldNumber = 4;
  private int leftCardCount_;
  /// <summary>
  /// 当前剩余张数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeftCardCount {
    get { return leftCardCount_; }
    set {
      leftCardCount_ = value;
    }
  }

  /// <summary>Field number for the "bomb_count" field.</summary>
  public const int BombCountFieldNumber = 5;
  private int bombCount_;
  /// <summary>
  /// 当前已经打出的炸弹数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BombCount {
    get { return bombCount_; }
    set {
      bombCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSPlayerInfoReal);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSPlayerInfoReal other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(CardTable, other.CardTable)) return false;
    if (TimeThink != other.TimeThink) return false;
    if(!cardHand_.Equals(other.cardHand_)) return false;
    if (LeftCardCount != other.LeftCardCount) return false;
    if (BombCount != other.BombCount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (cardTable_ != null) hash ^= CardTable.GetHashCode();
    if (TimeThink != 0) hash ^= TimeThink.GetHashCode();
    hash ^= cardHand_.GetHashCode();
    if (LeftCardCount != 0) hash ^= LeftCardCount.GetHashCode();
    if (BombCount != 0) hash ^= BombCount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (cardTable_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(CardTable);
    }
    if (TimeThink != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TimeThink);
    }
    cardHand_.WriteTo(output, _repeated_cardHand_codec);
    if (LeftCardCount != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(LeftCardCount);
    }
    if (BombCount != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(BombCount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (cardTable_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardTable);
    }
    if (TimeThink != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeThink);
    }
    size += cardHand_.CalculateSize(_repeated_cardHand_codec);
    if (LeftCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCardCount);
    }
    if (BombCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombCount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSPlayerInfoReal other) {
    if (other == null) {
      return;
    }
    if (other.cardTable_ != null) {
      if (cardTable_ == null) {
        cardTable_ = new global::CGSTableCardItem();
      }
      CardTable.MergeFrom(other.CardTable);
    }
    if (other.TimeThink != 0) {
      TimeThink = other.TimeThink;
    }
    cardHand_.Add(other.cardHand_);
    if (other.LeftCardCount != 0) {
      LeftCardCount = other.LeftCardCount;
    }
    if (other.BombCount != 0) {
      BombCount = other.BombCount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (cardTable_ == null) {
            cardTable_ = new global::CGSTableCardItem();
          }
          input.ReadMessage(cardTable_);
          break;
        }
        case 16: {
          TimeThink = input.ReadInt32();
          break;
        }
        case 26:
        case 24: {
          cardHand_.AddEntriesFrom(input, _repeated_cardHand_codec);
          break;
        }
        case 32: {
          LeftCardCount = input.ReadInt32();
          break;
        }
        case 40: {
          BombCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 游戏实时信息
/// </summary>
public sealed partial class CGSGameInfoReal : pb::IMessage<CGSGameInfoReal> {
  private static readonly pb::MessageParser<CGSGameInfoReal> _parser = new pb::MessageParser<CGSGameInfoReal>(() => new CGSGameInfoReal());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSGameInfoReal> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameInfoReal() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameInfoReal(CGSGameInfoReal other) : this() {
    statusGame_ = other.statusGame_;
    seatActive_ = other.seatActive_;
    bombCount_ = other.bombCount_;
    bombMultiple_ = other.bombMultiple_;
    curRound_ = other.curRound_;
    totalRound_ = other.totalRound_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameInfoReal Clone() {
    return new CGSGameInfoReal(this);
  }

  /// <summary>Field number for the "status_game" field.</summary>
  public const int StatusGameFieldNumber = 1;
  private int statusGame_;
  /// <summary>
  /// 游戏当前状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StatusGame {
    get { return statusGame_; }
    set {
      statusGame_ = value;
    }
  }

  /// <summary>Field number for the "seat_active" field.</summary>
  public const int SeatActiveFieldNumber = 2;
  private int seatActive_;
  /// <summary>
  /// 当前活动玩家座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatActive {
    get { return seatActive_; }
    set {
      seatActive_ = value;
    }
  }

  /// <summary>Field number for the "bomb_count" field.</summary>
  public const int BombCountFieldNumber = 3;
  private int bombCount_;
  /// <summary>
  /// 当前已经打出的炸弹数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BombCount {
    get { return bombCount_; }
    set {
      bombCount_ = value;
    }
  }

  /// <summary>Field number for the "bomb_multiple" field.</summary>
  public const int BombMultipleFieldNumber = 4;
  private int bombMultiple_;
  /// <summary>
  /// 当前翻倍倍数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BombMultiple {
    get { return bombMultiple_; }
    set {
      bombMultiple_ = value;
    }
  }

  /// <summary>Field number for the "cur_round" field.</summary>
  public const int CurRoundFieldNumber = 5;
  private int curRound_;
  /// <summary>
  /// 本桌的连续游戏盘数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurRound {
    get { return curRound_; }
    set {
      curRound_ = value;
    }
  }

  /// <summary>Field number for the "total_round" field.</summary>
  public const int TotalRoundFieldNumber = 6;
  private int totalRound_;
  /// <summary>
  /// 本桌的总游戏盘数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalRound {
    get { return totalRound_; }
    set {
      totalRound_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSGameInfoReal);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSGameInfoReal other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StatusGame != other.StatusGame) return false;
    if (SeatActive != other.SeatActive) return false;
    if (BombCount != other.BombCount) return false;
    if (BombMultiple != other.BombMultiple) return false;
    if (CurRound != other.CurRound) return false;
    if (TotalRound != other.TotalRound) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StatusGame != 0) hash ^= StatusGame.GetHashCode();
    if (SeatActive != 0) hash ^= SeatActive.GetHashCode();
    if (BombCount != 0) hash ^= BombCount.GetHashCode();
    if (BombMultiple != 0) hash ^= BombMultiple.GetHashCode();
    if (CurRound != 0) hash ^= CurRound.GetHashCode();
    if (TotalRound != 0) hash ^= TotalRound.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StatusGame != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(StatusGame);
    }
    if (SeatActive != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SeatActive);
    }
    if (BombCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(BombCount);
    }
    if (BombMultiple != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(BombMultiple);
    }
    if (CurRound != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(CurRound);
    }
    if (TotalRound != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(TotalRound);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StatusGame != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusGame);
    }
    if (SeatActive != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatActive);
    }
    if (BombCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombCount);
    }
    if (BombMultiple != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombMultiple);
    }
    if (CurRound != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurRound);
    }
    if (TotalRound != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRound);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSGameInfoReal other) {
    if (other == null) {
      return;
    }
    if (other.StatusGame != 0) {
      StatusGame = other.StatusGame;
    }
    if (other.SeatActive != 0) {
      SeatActive = other.SeatActive;
    }
    if (other.BombCount != 0) {
      BombCount = other.BombCount;
    }
    if (other.BombMultiple != 0) {
      BombMultiple = other.BombMultiple;
    }
    if (other.CurRound != 0) {
      CurRound = other.CurRound;
    }
    if (other.TotalRound != 0) {
      TotalRound = other.TotalRound;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          StatusGame = input.ReadInt32();
          break;
        }
        case 16: {
          SeatActive = input.ReadInt32();
          break;
        }
        case 24: {
          BombCount = input.ReadInt32();
          break;
        }
        case 32: {
          BombMultiple = input.ReadInt32();
          break;
        }
        case 40: {
          CurRound = input.ReadInt32();
          break;
        }
        case 48: {
          TotalRound = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// 心跳消息       
/// </summary>
public sealed partial class CGSHeartBeatReq : pb::IMessage<CGSHeartBeatReq> {
  private static readonly pb::MessageParser<CGSHeartBeatReq> _parser = new pb::MessageParser<CGSHeartBeatReq>(() => new CGSHeartBeatReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSHeartBeatReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSHeartBeatReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSHeartBeatReq(CGSHeartBeatReq other) : this() {
    time_ = other.time_;
    userid_ = other.userid_;
    delay_ = other.delay_;
    heartCount_ = other.heartCount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSHeartBeatReq Clone() {
    return new CGSHeartBeatReq(this);
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 1;
  private long time_;
  /// <summary>
  ///  客户端发出的时间，服务器原封不动的返回，用来计算网络延迟
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 2;
  private int userid_;
  /// <summary>
  /// 用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "delay" field.</summary>
  public const int DelayFieldNumber = 3;
  private int delay_;
  /// <summary>
  /// 延时毫秒数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Delay {
    get { return delay_; }
    set {
      delay_ = value;
    }
  }

  /// <summary>Field number for the "heartCount" field.</summary>
  public const int HeartCountFieldNumber = 4;
  private int heartCount_;
  /// <summary>
  /// 客户端超时计数器
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HeartCount {
    get { return heartCount_; }
    set {
      heartCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSHeartBeatReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSHeartBeatReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Time != other.Time) return false;
    if (Userid != other.Userid) return false;
    if (Delay != other.Delay) return false;
    if (HeartCount != other.HeartCount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Time != 0L) hash ^= Time.GetHashCode();
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (Delay != 0) hash ^= Delay.GetHashCode();
    if (HeartCount != 0) hash ^= HeartCount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Time != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Time);
    }
    if (Userid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Userid);
    }
    if (Delay != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Delay);
    }
    if (HeartCount != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(HeartCount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Time != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
    }
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (Delay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Delay);
    }
    if (HeartCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeartCount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSHeartBeatReq other) {
    if (other == null) {
      return;
    }
    if (other.Time != 0L) {
      Time = other.Time;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.Delay != 0) {
      Delay = other.Delay;
    }
    if (other.HeartCount != 0) {
      HeartCount = other.HeartCount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Time = input.ReadInt64();
          break;
        }
        case 16: {
          Userid = input.ReadInt32();
          break;
        }
        case 24: {
          Delay = input.ReadInt32();
          break;
        }
        case 32: {
          HeartCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CGSHeartBeatAck : pb::IMessage<CGSHeartBeatAck> {
  private static readonly pb::MessageParser<CGSHeartBeatAck> _parser = new pb::MessageParser<CGSHeartBeatAck>(() => new CGSHeartBeatAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSHeartBeatAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSHeartBeatAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSHeartBeatAck(CGSHeartBeatAck other) : this() {
    time_ = other.time_;
    userid_ = other.userid_;
    delay_ = other.delay_;
    heartCount_ = other.heartCount_;
    timeExpend_ = other.timeExpend_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSHeartBeatAck Clone() {
    return new CGSHeartBeatAck(this);
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 1;
  private long time_;
  /// <summary>
  ///  客户端发出的时间，服务器原封不动的返回，用来计算网络延迟
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 2;
  private int userid_;
  /// <summary>
  /// 用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "delay" field.</summary>
  public const int DelayFieldNumber = 3;
  private int delay_;
  /// <summary>
  /// 延时毫秒数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Delay {
    get { return delay_; }
    set {
      delay_ = value;
    }
  }

  /// <summary>Field number for the "heartCount" field.</summary>
  public const int HeartCountFieldNumber = 4;
  private int heartCount_;
  /// <summary>
  /// 客户端超时计数器
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HeartCount {
    get { return heartCount_; }
    set {
      heartCount_ = value;
    }
  }

  /// <summary>Field number for the "time_expend" field.</summary>
  public const int TimeExpendFieldNumber = 5;
  private int timeExpend_;
  /// <summary>
  /// 游戏时长
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeExpend {
    get { return timeExpend_; }
    set {
      timeExpend_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSHeartBeatAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSHeartBeatAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Time != other.Time) return false;
    if (Userid != other.Userid) return false;
    if (Delay != other.Delay) return false;
    if (HeartCount != other.HeartCount) return false;
    if (TimeExpend != other.TimeExpend) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Time != 0L) hash ^= Time.GetHashCode();
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (Delay != 0) hash ^= Delay.GetHashCode();
    if (HeartCount != 0) hash ^= HeartCount.GetHashCode();
    if (TimeExpend != 0) hash ^= TimeExpend.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Time != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Time);
    }
    if (Userid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Userid);
    }
    if (Delay != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Delay);
    }
    if (HeartCount != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(HeartCount);
    }
    if (TimeExpend != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(TimeExpend);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Time != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
    }
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (Delay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Delay);
    }
    if (HeartCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeartCount);
    }
    if (TimeExpend != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeExpend);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSHeartBeatAck other) {
    if (other == null) {
      return;
    }
    if (other.Time != 0L) {
      Time = other.Time;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.Delay != 0) {
      Delay = other.Delay;
    }
    if (other.HeartCount != 0) {
      HeartCount = other.HeartCount;
    }
    if (other.TimeExpend != 0) {
      TimeExpend = other.TimeExpend;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Time = input.ReadInt64();
          break;
        }
        case 16: {
          Userid = input.ReadInt32();
          break;
        }
        case 24: {
          Delay = input.ReadInt32();
          break;
        }
        case 32: {
          HeartCount = input.ReadInt32();
          break;
        }
        case 40: {
          TimeExpend = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// 进入游戏     
/// </summary>
public sealed partial class CGSGameEnterReq : pb::IMessage<CGSGameEnterReq> {
  private static readonly pb::MessageParser<CGSGameEnterReq> _parser = new pb::MessageParser<CGSGameEnterReq>(() => new CGSGameEnterReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSGameEnterReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameEnterReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameEnterReq(CGSGameEnterReq other) : this() {
    tableid_ = other.tableid_;
    username_ = other.username_;
    ticket_ = other.ticket_;
    userid_ = other.userid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameEnterReq Clone() {
    return new CGSGameEnterReq(this);
  }

  /// <summary>Field number for the "tableid" field.</summary>
  public const int TableidFieldNumber = 1;
  private int tableid_;
  /// <summary>
  ///  桌号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Tableid {
    get { return tableid_; }
    set {
      tableid_ = value;
    }
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 2;
  private string username_ = "";
  /// <summary>
  ///  用户名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ticket" field.</summary>
  public const int TicketFieldNumber = 3;
  private string ticket_ = "";
  /// <summary>
  ///  加密验证（证书之类的）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ticket {
    get { return ticket_; }
    set {
      ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 4;
  private int userid_;
  /// <summary>
  ///  用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSGameEnterReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSGameEnterReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Tableid != other.Tableid) return false;
    if (Username != other.Username) return false;
    if (Ticket != other.Ticket) return false;
    if (Userid != other.Userid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Tableid != 0) hash ^= Tableid.GetHashCode();
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (Ticket.Length != 0) hash ^= Ticket.GetHashCode();
    if (Userid != 0) hash ^= Userid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Tableid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Tableid);
    }
    if (Username.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Username);
    }
    if (Ticket.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Ticket);
    }
    if (Userid != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Userid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Tableid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tableid);
    }
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (Ticket.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticket);
    }
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSGameEnterReq other) {
    if (other == null) {
      return;
    }
    if (other.Tableid != 0) {
      Tableid = other.Tableid;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.Ticket.Length != 0) {
      Ticket = other.Ticket;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Tableid = input.ReadInt32();
          break;
        }
        case 18: {
          Username = input.ReadString();
          break;
        }
        case 26: {
          Ticket = input.ReadString();
          break;
        }
        case 32: {
          Userid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CGSPlayerInfo : pb::IMessage<CGSPlayerInfo> {
  private static readonly pb::MessageParser<CGSPlayerInfo> _parser = new pb::MessageParser<CGSPlayerInfo>(() => new CGSPlayerInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSPlayerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerInfo(CGSPlayerInfo other) : this() {
    userid_ = other.userid_;
    seat_ = other.seat_;
    nickname_ = other.nickname_;
    sex_ = other.sex_;
    headimg_ = other.headimg_;
    ip_ = other.ip_;
    statusOnline_ = other.statusOnline_;
    breakType_ = other.breakType_;
    score_ = other.score_;
    statusReady_ = other.statusReady_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerInfo Clone() {
    return new CGSPlayerInfo(this);
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 1;
  private int userid_;
  /// <summary>
  ///  用户id	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 2;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 3;
  private string nickname_ = "";
  /// <summary>
  /// 昵称
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sex" field.</summary>
  public const int SexFieldNumber = 4;
  private int sex_;
  /// <summary>
  /// 用户性别
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Sex {
    get { return sex_; }
    set {
      sex_ = value;
    }
  }

  /// <summary>Field number for the "headimg" field.</summary>
  public const int HeadimgFieldNumber = 5;
  private string headimg_ = "";
  /// <summary>
  /// 头像地址
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Headimg {
    get { return headimg_; }
    set {
      headimg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ip" field.</summary>
  public const int IpFieldNumber = 6;
  private uint ip_;
  /// <summary>
  /// ip地址
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Ip {
    get { return ip_; }
    set {
      ip_ = value;
    }
  }

  /// <summary>Field number for the "status_online" field.</summary>
  public const int StatusOnlineFieldNumber = 7;
  private int statusOnline_;
  /// <summary>
  /// 在线状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StatusOnline {
    get { return statusOnline_; }
    set {
      statusOnline_ = value;
    }
  }

  /// <summary>Field number for the "break_type" field.</summary>
  public const int BreakTypeFieldNumber = 8;
  private int breakType_;
  /// <summary>
  /// 切入切出状态 0：切入 2：切出
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BreakType {
    get { return breakType_; }
    set {
      breakType_ = value;
    }
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 9;
  private int score_;
  /// <summary>
  /// 当前总分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Score {
    get { return score_; }
    set {
      score_ = value;
    }
  }

  /// <summary>Field number for the "status_ready" field.</summary>
  public const int StatusReadyFieldNumber = 10;
  private int statusReady_;
  /// <summary>
  /// 准备状态 0:准备好了 1:没准备
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StatusReady {
    get { return statusReady_; }
    set {
      statusReady_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSPlayerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSPlayerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Userid != other.Userid) return false;
    if (Seat != other.Seat) return false;
    if (Nickname != other.Nickname) return false;
    if (Sex != other.Sex) return false;
    if (Headimg != other.Headimg) return false;
    if (Ip != other.Ip) return false;
    if (StatusOnline != other.StatusOnline) return false;
    if (BreakType != other.BreakType) return false;
    if (Score != other.Score) return false;
    if (StatusReady != other.StatusReady) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (Sex != 0) hash ^= Sex.GetHashCode();
    if (Headimg.Length != 0) hash ^= Headimg.GetHashCode();
    if (Ip != 0) hash ^= Ip.GetHashCode();
    if (StatusOnline != 0) hash ^= StatusOnline.GetHashCode();
    if (BreakType != 0) hash ^= BreakType.GetHashCode();
    if (Score != 0) hash ^= Score.GetHashCode();
    if (StatusReady != 0) hash ^= StatusReady.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Userid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Userid);
    }
    if (Seat != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Seat);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Nickname);
    }
    if (Sex != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Sex);
    }
    if (Headimg.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Headimg);
    }
    if (Ip != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Ip);
    }
    if (StatusOnline != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(StatusOnline);
    }
    if (BreakType != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(BreakType);
    }
    if (Score != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(Score);
    }
    if (StatusReady != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(StatusReady);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (Sex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
    }
    if (Headimg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Headimg);
    }
    if (Ip != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ip);
    }
    if (StatusOnline != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusOnline);
    }
    if (BreakType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakType);
    }
    if (Score != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
    }
    if (StatusReady != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusReady);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSPlayerInfo other) {
    if (other == null) {
      return;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    if (other.Sex != 0) {
      Sex = other.Sex;
    }
    if (other.Headimg.Length != 0) {
      Headimg = other.Headimg;
    }
    if (other.Ip != 0) {
      Ip = other.Ip;
    }
    if (other.StatusOnline != 0) {
      StatusOnline = other.StatusOnline;
    }
    if (other.BreakType != 0) {
      BreakType = other.BreakType;
    }
    if (other.Score != 0) {
      Score = other.Score;
    }
    if (other.StatusReady != 0) {
      StatusReady = other.StatusReady;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Userid = input.ReadInt32();
          break;
        }
        case 16: {
          Seat = input.ReadInt32();
          break;
        }
        case 26: {
          Nickname = input.ReadString();
          break;
        }
        case 32: {
          Sex = input.ReadInt32();
          break;
        }
        case 42: {
          Headimg = input.ReadString();
          break;
        }
        case 48: {
          Ip = input.ReadUInt32();
          break;
        }
        case 56: {
          StatusOnline = input.ReadInt32();
          break;
        }
        case 64: {
          BreakType = input.ReadInt32();
          break;
        }
        case 72: {
          Score = input.ReadInt32();
          break;
        }
        case 80: {
          StatusReady = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 桌子规则定义扩展
/// </summary>
public sealed partial class CGSTableRule : pb::IMessage<CGSTableRule> {
  private static readonly pb::MessageParser<CGSTableRule> _parser = new pb::MessageParser<CGSTableRule>(() => new CGSTableRule());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSTableRule> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSTableRule() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSTableRule(CGSTableRule other) : this() {
    playerCount_ = other.playerCount_;
    round_ = other.round_;
    leadSeat_ = other.leadSeat_;
    scoreType_ = other.scoreType_;
    scoreMore_ = other.scoreMore_;
    scoreLess_ = other.scoreLess_;
    scoreBomb_ = other.scoreBomb_;
    bombType_ = other.bombType_;
    bombResult_ = other.bombResult_;
    lianduiLimit_ = other.lianduiLimit_;
    sanYiDui_ = other.sanYiDui_;
    siYiDan_ = other.siYiDan_;
    siErDan_ = other.siErDan_;
    biGen_ = other.biGen_;
    timeThink_ = other.timeThink_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSTableRule Clone() {
    return new CGSTableRule(this);
  }

  /// <summary>Field number for the "player_count" field.</summary>
  public const int PlayerCountFieldNumber = 1;
  private int playerCount_;
  /// <summary>
  /// 玩家数 2，3，4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerCount {
    get { return playerCount_; }
    set {
      playerCount_ = value;
    }
  }

  /// <summary>Field number for the "round" field.</summary>
  public const int RoundFieldNumber = 2;
  private int round_;
  /// <summary>
  /// 总盘数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Round {
    get { return round_; }
    set {
      round_ = value;
    }
  }

  /// <summary>Field number for the "lead_seat" field.</summary>
  public const int LeadSeatFieldNumber = 3;
  private int leadSeat_;
  /// <summary>
  /// 定庄 0：赢家坐庄 1：红桃3坐庄
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeadSeat {
    get { return leadSeat_; }
    set {
      leadSeat_ = value;
    }
  }

  /// <summary>Field number for the "score_type" field.</summary>
  public const int ScoreTypeFieldNumber = 4;
  private int scoreType_;
  /// <summary>
  /// 算分方式 0：剩几张输几分 1：固定算分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ScoreType {
    get { return scoreType_; }
    set {
      scoreType_ = value;
    }
  }

  /// <summary>Field number for the "score_more" field.</summary>
  public const int ScoreMoreFieldNumber = 5;
  private int scoreMore_;
  /// <summary>
  /// 算分方式为 1 的情况下，剩多输几分 默认 2
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ScoreMore {
    get { return scoreMore_; }
    set {
      scoreMore_ = value;
    }
  }

  /// <summary>Field number for the "score_less" field.</summary>
  public const int ScoreLessFieldNumber = 6;
  private int scoreLess_;
  /// <summary>
  /// 算分方式为 1 的情况下，剩少输几分 默认 1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ScoreLess {
    get { return scoreLess_; }
    set {
      scoreLess_ = value;
    }
  }

  /// <summary>Field number for the "score_bomb" field.</summary>
  public const int ScoreBombFieldNumber = 7;
  private int scoreBomb_;
  /// <summary>
  /// 算分方式为 1 的情况下，被炸扣 几分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ScoreBomb {
    get { return scoreBomb_; }
    set {
      scoreBomb_ = value;
    }
  }

  /// <summary>Field number for the "bomb_type" field.</summary>
  public const int BombTypeFieldNumber = 8;
  private int bombType_;
  /// <summary>
  /// 炸弹类型 0：四张和AAA, 1:四带一和AAA带一，2：四张和AAAA
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BombType {
    get { return bombType_; }
    set {
      bombType_ = value;
    }
  }

  /// <summary>Field number for the "bomb_result" field.</summary>
  public const int BombResultFieldNumber = 9;
  private int bombResult_;
  /// <summary>
  /// 炸弹效果 0：不翻倍 n：n炸封顶
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BombResult {
    get { return bombResult_; }
    set {
      bombResult_ = value;
    }
  }

  /// <summary>Field number for the "liandui_limit" field.</summary>
  public const int LianduiLimitFieldNumber = 10;
  private int lianduiLimit_;
  /// <summary>
  /// 连对最少几对起步 2：2对3344  3：3对 334455
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LianduiLimit {
    get { return lianduiLimit_; }
    set {
      lianduiLimit_ = value;
    }
  }

  /// <summary>Field number for the "SanYiDui" field.</summary>
  public const int SanYiDuiFieldNumber = 11;
  private int sanYiDui_;
  /// <summary>
  /// 三带一对
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SanYiDui {
    get { return sanYiDui_; }
    set {
      sanYiDui_ = value;
    }
  }

  /// <summary>Field number for the "SiYiDan" field.</summary>
  public const int SiYiDanFieldNumber = 12;
  private int siYiDan_;
  /// <summary>
  /// 四带一单
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SiYiDan {
    get { return siYiDan_; }
    set {
      siYiDan_ = value;
    }
  }

  /// <summary>Field number for the "SiErDan" field.</summary>
  public const int SiErDanFieldNumber = 13;
  private int siErDan_;
  /// <summary>
  /// 四带两单
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SiErDan {
    get { return siErDan_; }
    set {
      siErDan_ = value;
    }
  }

  /// <summary>Field number for the "BiGen" field.</summary>
  public const int BiGenFieldNumber = 14;
  private int biGen_;
  /// <summary>
  /// 有牌必跟
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BiGen {
    get { return biGen_; }
    set {
      biGen_ = value;
    }
  }

  /// <summary>Field number for the "time_think" field.</summary>
  public const int TimeThinkFieldNumber = 15;
  private int timeThink_;
  /// <summary>
  /// 出牌思考时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeThink {
    get { return timeThink_; }
    set {
      timeThink_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSTableRule);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSTableRule other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerCount != other.PlayerCount) return false;
    if (Round != other.Round) return false;
    if (LeadSeat != other.LeadSeat) return false;
    if (ScoreType != other.ScoreType) return false;
    if (ScoreMore != other.ScoreMore) return false;
    if (ScoreLess != other.ScoreLess) return false;
    if (ScoreBomb != other.ScoreBomb) return false;
    if (BombType != other.BombType) return false;
    if (BombResult != other.BombResult) return false;
    if (LianduiLimit != other.LianduiLimit) return false;
    if (SanYiDui != other.SanYiDui) return false;
    if (SiYiDan != other.SiYiDan) return false;
    if (SiErDan != other.SiErDan) return false;
    if (BiGen != other.BiGen) return false;
    if (TimeThink != other.TimeThink) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerCount != 0) hash ^= PlayerCount.GetHashCode();
    if (Round != 0) hash ^= Round.GetHashCode();
    if (LeadSeat != 0) hash ^= LeadSeat.GetHashCode();
    if (ScoreType != 0) hash ^= ScoreType.GetHashCode();
    if (ScoreMore != 0) hash ^= ScoreMore.GetHashCode();
    if (ScoreLess != 0) hash ^= ScoreLess.GetHashCode();
    if (ScoreBomb != 0) hash ^= ScoreBomb.GetHashCode();
    if (BombType != 0) hash ^= BombType.GetHashCode();
    if (BombResult != 0) hash ^= BombResult.GetHashCode();
    if (LianduiLimit != 0) hash ^= LianduiLimit.GetHashCode();
    if (SanYiDui != 0) hash ^= SanYiDui.GetHashCode();
    if (SiYiDan != 0) hash ^= SiYiDan.GetHashCode();
    if (SiErDan != 0) hash ^= SiErDan.GetHashCode();
    if (BiGen != 0) hash ^= BiGen.GetHashCode();
    if (TimeThink != 0) hash ^= TimeThink.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerCount != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerCount);
    }
    if (Round != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Round);
    }
    if (LeadSeat != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(LeadSeat);
    }
    if (ScoreType != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(ScoreType);
    }
    if (ScoreMore != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(ScoreMore);
    }
    if (ScoreLess != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(ScoreLess);
    }
    if (ScoreBomb != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(ScoreBomb);
    }
    if (BombType != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(BombType);
    }
    if (BombResult != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(BombResult);
    }
    if (LianduiLimit != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(LianduiLimit);
    }
    if (SanYiDui != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(SanYiDui);
    }
    if (SiYiDan != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(SiYiDan);
    }
    if (SiErDan != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(SiErDan);
    }
    if (BiGen != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(BiGen);
    }
    if (TimeThink != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(TimeThink);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerCount);
    }
    if (Round != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
    }
    if (LeadSeat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeadSeat);
    }
    if (ScoreType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoreType);
    }
    if (ScoreMore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoreMore);
    }
    if (ScoreLess != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoreLess);
    }
    if (ScoreBomb != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoreBomb);
    }
    if (BombType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombType);
    }
    if (BombResult != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombResult);
    }
    if (LianduiLimit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LianduiLimit);
    }
    if (SanYiDui != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SanYiDui);
    }
    if (SiYiDan != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SiYiDan);
    }
    if (SiErDan != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SiErDan);
    }
    if (BiGen != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BiGen);
    }
    if (TimeThink != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeThink);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSTableRule other) {
    if (other == null) {
      return;
    }
    if (other.PlayerCount != 0) {
      PlayerCount = other.PlayerCount;
    }
    if (other.Round != 0) {
      Round = other.Round;
    }
    if (other.LeadSeat != 0) {
      LeadSeat = other.LeadSeat;
    }
    if (other.ScoreType != 0) {
      ScoreType = other.ScoreType;
    }
    if (other.ScoreMore != 0) {
      ScoreMore = other.ScoreMore;
    }
    if (other.ScoreLess != 0) {
      ScoreLess = other.ScoreLess;
    }
    if (other.ScoreBomb != 0) {
      ScoreBomb = other.ScoreBomb;
    }
    if (other.BombType != 0) {
      BombType = other.BombType;
    }
    if (other.BombResult != 0) {
      BombResult = other.BombResult;
    }
    if (other.LianduiLimit != 0) {
      LianduiLimit = other.LianduiLimit;
    }
    if (other.SanYiDui != 0) {
      SanYiDui = other.SanYiDui;
    }
    if (other.SiYiDan != 0) {
      SiYiDan = other.SiYiDan;
    }
    if (other.SiErDan != 0) {
      SiErDan = other.SiErDan;
    }
    if (other.BiGen != 0) {
      BiGen = other.BiGen;
    }
    if (other.TimeThink != 0) {
      TimeThink = other.TimeThink;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PlayerCount = input.ReadInt32();
          break;
        }
        case 16: {
          Round = input.ReadInt32();
          break;
        }
        case 24: {
          LeadSeat = input.ReadInt32();
          break;
        }
        case 32: {
          ScoreType = input.ReadInt32();
          break;
        }
        case 40: {
          ScoreMore = input.ReadInt32();
          break;
        }
        case 48: {
          ScoreLess = input.ReadInt32();
          break;
        }
        case 56: {
          ScoreBomb = input.ReadInt32();
          break;
        }
        case 64: {
          BombType = input.ReadInt32();
          break;
        }
        case 72: {
          BombResult = input.ReadInt32();
          break;
        }
        case 80: {
          LianduiLimit = input.ReadInt32();
          break;
        }
        case 88: {
          SanYiDui = input.ReadInt32();
          break;
        }
        case 96: {
          SiYiDan = input.ReadInt32();
          break;
        }
        case 104: {
          SiErDan = input.ReadInt32();
          break;
        }
        case 112: {
          BiGen = input.ReadInt32();
          break;
        }
        case 120: {
          TimeThink = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CGSGameEnterAck : pb::IMessage<CGSGameEnterAck> {
  private static readonly pb::MessageParser<CGSGameEnterAck> _parser = new pb::MessageParser<CGSGameEnterAck>(() => new CGSGameEnterAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSGameEnterAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[54]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameEnterAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameEnterAck(CGSGameEnterAck other) : this() {
    result_ = other.result_;
    statusGame_ = other.statusGame_;
    seat_ = other.seat_;
    pis_ = other.pis_.Clone();
    Ptr = other.ptr_ != null ? other.Ptr.Clone() : null;
    ruleStr_ = other.ruleStr_;
    GameInfo = other.gameInfo_ != null ? other.GameInfo.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameEnterAck Clone() {
    return new CGSGameEnterAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "status_game" field.</summary>
  public const int StatusGameFieldNumber = 2;
  private int statusGame_;
  /// <summary>
  /// 游戏状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StatusGame {
    get { return statusGame_; }
    set {
      statusGame_ = value;
    }
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 3;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "pis" field.</summary>
  public const int PisFieldNumber = 4;
  private static readonly pb::FieldCodec<global::CGSPlayerInfo> _repeated_pis_codec
      = pb::FieldCodec.ForMessage(34, global::CGSPlayerInfo.Parser);
  private readonly pbc::RepeatedField<global::CGSPlayerInfo> pis_ = new pbc::RepeatedField<global::CGSPlayerInfo>();
  /// <summary>
  /// 用户信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CGSPlayerInfo> Pis {
    get { return pis_; }
  }

  /// <summary>Field number for the "ptr" field.</summary>
  public const int PtrFieldNumber = 5;
  private global::CGSTableRule ptr_;
  /// <summary>
  /// 桌子规则
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CGSTableRule Ptr {
    get { return ptr_; }
    set {
      ptr_ = value;
    }
  }

  /// <summary>Field number for the "rule_str" field.</summary>
  public const int RuleStrFieldNumber = 6;
  private string ruleStr_ = "";
  /// <summary>
  /// 桌子属性字符串 空格隔开
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RuleStr {
    get { return ruleStr_; }
    set {
      ruleStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "game_info" field.</summary>
  public const int GameInfoFieldNumber = 7;
  private global::CGSGameInfoReal gameInfo_;
  /// <summary>
  /// 游戏信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CGSGameInfoReal GameInfo {
    get { return gameInfo_; }
    set {
      gameInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSGameEnterAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSGameEnterAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (StatusGame != other.StatusGame) return false;
    if (Seat != other.Seat) return false;
    if(!pis_.Equals(other.pis_)) return false;
    if (!object.Equals(Ptr, other.Ptr)) return false;
    if (RuleStr != other.RuleStr) return false;
    if (!object.Equals(GameInfo, other.GameInfo)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (StatusGame != 0) hash ^= StatusGame.GetHashCode();
    if (Seat != 0) hash ^= Seat.GetHashCode();
    hash ^= pis_.GetHashCode();
    if (ptr_ != null) hash ^= Ptr.GetHashCode();
    if (RuleStr.Length != 0) hash ^= RuleStr.GetHashCode();
    if (gameInfo_ != null) hash ^= GameInfo.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (StatusGame != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(StatusGame);
    }
    if (Seat != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Seat);
    }
    pis_.WriteTo(output, _repeated_pis_codec);
    if (ptr_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Ptr);
    }
    if (RuleStr.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(RuleStr);
    }
    if (gameInfo_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(GameInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (StatusGame != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusGame);
    }
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    size += pis_.CalculateSize(_repeated_pis_codec);
    if (ptr_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ptr);
    }
    if (RuleStr.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RuleStr);
    }
    if (gameInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameInfo);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSGameEnterAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.StatusGame != 0) {
      StatusGame = other.StatusGame;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    pis_.Add(other.pis_);
    if (other.ptr_ != null) {
      if (ptr_ == null) {
        ptr_ = new global::CGSTableRule();
      }
      Ptr.MergeFrom(other.Ptr);
    }
    if (other.RuleStr.Length != 0) {
      RuleStr = other.RuleStr;
    }
    if (other.gameInfo_ != null) {
      if (gameInfo_ == null) {
        gameInfo_ = new global::CGSGameInfoReal();
      }
      GameInfo.MergeFrom(other.GameInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          StatusGame = input.ReadInt32();
          break;
        }
        case 24: {
          Seat = input.ReadInt32();
          break;
        }
        case 34: {
          pis_.AddEntriesFrom(input, _repeated_pis_codec);
          break;
        }
        case 42: {
          if (ptr_ == null) {
            ptr_ = new global::CGSTableRule();
          }
          input.ReadMessage(ptr_);
          break;
        }
        case 50: {
          RuleStr = input.ReadString();
          break;
        }
        case 58: {
          if (gameInfo_ == null) {
            gameInfo_ = new global::CGSGameInfoReal();
          }
          input.ReadMessage(gameInfo_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// 准备就绪
/// </summary>
public sealed partial class CGSPlayerReadyReq : pb::IMessage<CGSPlayerReadyReq> {
  private static readonly pb::MessageParser<CGSPlayerReadyReq> _parser = new pb::MessageParser<CGSPlayerReadyReq>(() => new CGSPlayerReadyReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSPlayerReadyReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[55]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerReadyReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerReadyReq(CGSPlayerReadyReq other) : this() {
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerReadyReq Clone() {
    return new CGSPlayerReadyReq(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///  0:准备  2:取消准备
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSPlayerReadyReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSPlayerReadyReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSPlayerReadyReq other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CGSPlayerReadyAck : pb::IMessage<CGSPlayerReadyAck> {
  private static readonly pb::MessageParser<CGSPlayerReadyAck> _parser = new pb::MessageParser<CGSPlayerReadyAck>(() => new CGSPlayerReadyAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSPlayerReadyAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[56]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerReadyAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerReadyAck(CGSPlayerReadyAck other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerReadyAck Clone() {
    return new CGSPlayerReadyAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSPlayerReadyAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSPlayerReadyAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSPlayerReadyAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// 出牌
/// </summary>
public sealed partial class CGSTakeoutCardReq : pb::IMessage<CGSTakeoutCardReq> {
  private static readonly pb::MessageParser<CGSTakeoutCardReq> _parser = new pb::MessageParser<CGSTakeoutCardReq>(() => new CGSTakeoutCardReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSTakeoutCardReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[57]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSTakeoutCardReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSTakeoutCardReq(CGSTakeoutCardReq other) : this() {
    cards_ = other.cards_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSTakeoutCardReq Clone() {
    return new CGSTakeoutCardReq(this);
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_cards_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 出牌数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Cards {
    get { return cards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSTakeoutCardReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSTakeoutCardReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cards_.Equals(other.cards_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cards_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cards_.WriteTo(output, _repeated_cards_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cards_.CalculateSize(_repeated_cards_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSTakeoutCardReq other) {
    if (other == null) {
      return;
    }
    cards_.Add(other.cards_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class CGSTakeoutCardAck : pb::IMessage<CGSTakeoutCardAck> {
  private static readonly pb::MessageParser<CGSTakeoutCardAck> _parser = new pb::MessageParser<CGSTakeoutCardAck>(() => new CGSTakeoutCardAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSTakeoutCardAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[58]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSTakeoutCardAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSTakeoutCardAck(CGSTakeoutCardAck other) : this() {
    result_ = other.result_;
    selfCardInfo_ = other.selfCardInfo_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSTakeoutCardAck Clone() {
    return new CGSTakeoutCardAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "self_card_info" field.</summary>
  public const int SelfCardInfoFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_selfCardInfo_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> selfCardInfo_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 玩家自己手牌信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> SelfCardInfo {
    get { return selfCardInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSTakeoutCardAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSTakeoutCardAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!selfCardInfo_.Equals(other.selfCardInfo_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= selfCardInfo_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    selfCardInfo_.WriteTo(output, _repeated_selfCardInfo_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += selfCardInfo_.CalculateSize(_repeated_selfCardInfo_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSTakeoutCardAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    selfCardInfo_.Add(other.selfCardInfo_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          selfCardInfo_.AddEntriesFrom(input, _repeated_selfCardInfo_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// 解散桌子
/// </summary>
public sealed partial class CGSDismissTableReq : pb::IMessage<CGSDismissTableReq> {
  private static readonly pb::MessageParser<CGSDismissTableReq> _parser = new pb::MessageParser<CGSDismissTableReq>(() => new CGSDismissTableReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSDismissTableReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[59]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSDismissTableReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSDismissTableReq(CGSDismissTableReq other) : this() {
    dismiss_ = other.dismiss_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSDismissTableReq Clone() {
    return new CGSDismissTableReq(this);
  }

  /// <summary>Field number for the "dismiss" field.</summary>
  public const int DismissFieldNumber = 1;
  private int dismiss_;
  /// <summary>
  /// 是否同意解散 1 同意，2 不同意 0 未选
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Dismiss {
    get { return dismiss_; }
    set {
      dismiss_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSDismissTableReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSDismissTableReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Dismiss != other.Dismiss) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Dismiss != 0) hash ^= Dismiss.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Dismiss != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Dismiss);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Dismiss != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dismiss);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSDismissTableReq other) {
    if (other == null) {
      return;
    }
    if (other.Dismiss != 0) {
      Dismiss = other.Dismiss;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Dismiss = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 返回结果
/// </summary>
public sealed partial class CGSDismissTableAck : pb::IMessage<CGSDismissTableAck> {
  private static readonly pb::MessageParser<CGSDismissTableAck> _parser = new pb::MessageParser<CGSDismissTableAck>(() => new CGSDismissTableAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSDismissTableAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[60]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSDismissTableAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSDismissTableAck(CGSDismissTableAck other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSDismissTableAck Clone() {
    return new CGSDismissTableAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSDismissTableAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSDismissTableAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSDismissTableAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// 切入切出请求
/// </summary>
public sealed partial class CGSBreakReq : pb::IMessage<CGSBreakReq> {
  private static readonly pb::MessageParser<CGSBreakReq> _parser = new pb::MessageParser<CGSBreakReq>(() => new CGSBreakReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSBreakReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[61]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSBreakReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSBreakReq(CGSBreakReq other) : this() {
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSBreakReq Clone() {
    return new CGSBreakReq(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///  0:切回  2:切走
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSBreakReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSBreakReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSBreakReq other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CGSBreakAck : pb::IMessage<CGSBreakAck> {
  private static readonly pb::MessageParser<CGSBreakAck> _parser = new pb::MessageParser<CGSBreakAck>(() => new CGSBreakAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSBreakAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[62]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSBreakAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSBreakAck(CGSBreakAck other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSBreakAck Clone() {
    return new CGSBreakAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSBreakAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSBreakAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSBreakAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// 游戏状态
/// </summary>
public sealed partial class CGSStatusUpdateNtf : pb::IMessage<CGSStatusUpdateNtf> {
  private static readonly pb::MessageParser<CGSStatusUpdateNtf> _parser = new pb::MessageParser<CGSStatusUpdateNtf>(() => new CGSStatusUpdateNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSStatusUpdateNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[63]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSStatusUpdateNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSStatusUpdateNtf(CGSStatusUpdateNtf other) : this() {
    statusGame_ = other.statusGame_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSStatusUpdateNtf Clone() {
    return new CGSStatusUpdateNtf(this);
  }

  /// <summary>Field number for the "status_game" field.</summary>
  public const int StatusGameFieldNumber = 1;
  private int statusGame_;
  /// <summary>
  /// 游戏当前状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StatusGame {
    get { return statusGame_; }
    set {
      statusGame_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSStatusUpdateNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSStatusUpdateNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StatusGame != other.StatusGame) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StatusGame != 0) hash ^= StatusGame.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StatusGame != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(StatusGame);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StatusGame != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusGame);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSStatusUpdateNtf other) {
    if (other == null) {
      return;
    }
    if (other.StatusGame != 0) {
      StatusGame = other.StatusGame;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          StatusGame = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 上线
/// </summary>
public sealed partial class CGSPlayerOnLineNtf : pb::IMessage<CGSPlayerOnLineNtf> {
  private static readonly pb::MessageParser<CGSPlayerOnLineNtf> _parser = new pb::MessageParser<CGSPlayerOnLineNtf>(() => new CGSPlayerOnLineNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSPlayerOnLineNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[64]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerOnLineNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerOnLineNtf(CGSPlayerOnLineNtf other) : this() {
    seat_ = other.seat_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerOnLineNtf Clone() {
    return new CGSPlayerOnLineNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 用户座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSPlayerOnLineNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSPlayerOnLineNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSPlayerOnLineNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 离线
/// </summary>
public sealed partial class CGSPlayerOffLineNtf : pb::IMessage<CGSPlayerOffLineNtf> {
  private static readonly pb::MessageParser<CGSPlayerOffLineNtf> _parser = new pb::MessageParser<CGSPlayerOffLineNtf>(() => new CGSPlayerOffLineNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSPlayerOffLineNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[65]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerOffLineNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerOffLineNtf(CGSPlayerOffLineNtf other) : this() {
    seat_ = other.seat_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerOffLineNtf Clone() {
    return new CGSPlayerOffLineNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSPlayerOffLineNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSPlayerOffLineNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSPlayerOffLineNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 准备
/// </summary>
public sealed partial class CGSPlayerReadyNtf : pb::IMessage<CGSPlayerReadyNtf> {
  private static readonly pb::MessageParser<CGSPlayerReadyNtf> _parser = new pb::MessageParser<CGSPlayerReadyNtf>(() => new CGSPlayerReadyNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSPlayerReadyNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[66]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerReadyNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerReadyNtf(CGSPlayerReadyNtf other) : this() {
    seat_ = other.seat_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSPlayerReadyNtf Clone() {
    return new CGSPlayerReadyNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSPlayerReadyNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSPlayerReadyNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSPlayerReadyNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 发牌
/// </summary>
public sealed partial class CGSDealCardNtf : pb::IMessage<CGSDealCardNtf> {
  private static readonly pb::MessageParser<CGSDealCardNtf> _parser = new pb::MessageParser<CGSDealCardNtf>(() => new CGSDealCardNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSDealCardNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[67]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSDealCardNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSDealCardNtf(CGSDealCardNtf other) : this() {
    seat_ = other.seat_;
    CardHand = other.cardHand_ != null ? other.CardHand.Clone() : null;
    operateType_ = other.operateType_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSDealCardNtf Clone() {
    return new CGSDealCardNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 第一个出牌座位
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "card_hand" field.</summary>
  public const int CardHandFieldNumber = 2;
  private global::CGSHandCardItem cardHand_;
  /// <summary>
  /// 用户手牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CGSHandCardItem CardHand {
    get { return cardHand_; }
    set {
      cardHand_ = value;
    }
  }

  /// <summary>Field number for the "operate_type" field.</summary>
  public const int OperateTypeFieldNumber = 3;
  private int operateType_;
  /// <summary>
  /// 操作类型 1 &lt;&lt; 0:出牌,1 &lt;&lt; 1:过牌 两值合并, 1 + 1 &lt;&lt; 1 = 3 既能出牌又能过牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OperateType {
    get { return operateType_; }
    set {
      operateType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSDealCardNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSDealCardNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (!object.Equals(CardHand, other.CardHand)) return false;
    if (OperateType != other.OperateType) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (cardHand_ != null) hash ^= CardHand.GetHashCode();
    if (OperateType != 0) hash ^= OperateType.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (cardHand_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(CardHand);
    }
    if (OperateType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(OperateType);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (cardHand_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardHand);
    }
    if (OperateType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperateType);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSDealCardNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.cardHand_ != null) {
      if (cardHand_ == null) {
        cardHand_ = new global::CGSHandCardItem();
      }
      CardHand.MergeFrom(other.CardHand);
    }
    if (other.OperateType != 0) {
      OperateType = other.OperateType;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 18: {
          if (cardHand_ == null) {
            cardHand_ = new global::CGSHandCardItem();
          }
          input.ReadMessage(cardHand_);
          break;
        }
        case 24: {
          OperateType = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 出牌
/// </summary>
public sealed partial class CGSTakeoutCardNtf : pb::IMessage<CGSTakeoutCardNtf> {
  private static readonly pb::MessageParser<CGSTakeoutCardNtf> _parser = new pb::MessageParser<CGSTakeoutCardNtf>(() => new CGSTakeoutCardNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSTakeoutCardNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[68]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSTakeoutCardNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSTakeoutCardNtf(CGSTakeoutCardNtf other) : this() {
    seat_ = other.seat_;
    seatNext_ = other.seatNext_;
    timeThink_ = other.timeThink_;
    cardsTakeout_ = other.cardsTakeout_.Clone();
    multiple_ = other.multiple_;
    bombCount_ = other.bombCount_.Clone();
    leftCardCount_ = other.leftCardCount_;
    operateType_ = other.operateType_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSTakeoutCardNtf Clone() {
    return new CGSTakeoutCardNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 出牌座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "seat_next" field.</summary>
  public const int SeatNextFieldNumber = 2;
  private int seatNext_;
  /// <summary>
  /// 下一个出牌座位
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatNext {
    get { return seatNext_; }
    set {
      seatNext_ = value;
    }
  }

  /// <summary>Field number for the "time_think" field.</summary>
  public const int TimeThinkFieldNumber = 3;
  private int timeThink_;
  /// <summary>
  /// 下一个出牌座位思考时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeThink {
    get { return timeThink_; }
    set {
      timeThink_ = value;
    }
  }

  /// <summary>Field number for the "cards_takeout" field.</summary>
  public const int CardsTakeoutFieldNumber = 4;
  private static readonly pb::FieldCodec<int> _repeated_cardsTakeout_codec
      = pb::FieldCodec.ForInt32(34);
  private readonly pbc::RepeatedField<int> cardsTakeout_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 出牌数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> CardsTakeout {
    get { return cardsTakeout_; }
  }

  /// <summary>Field number for the "multiple" field.</summary>
  public const int MultipleFieldNumber = 5;
  private int multiple_;
  /// <summary>
  /// 当前倍数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Multiple {
    get { return multiple_; }
    set {
      multiple_ = value;
    }
  }

  /// <summary>Field number for the "bomb_count" field.</summary>
  public const int BombCountFieldNumber = 6;
  private static readonly pb::FieldCodec<int> _repeated_bombCount_codec
      = pb::FieldCodec.ForInt32(50);
  private readonly pbc::RepeatedField<int> bombCount_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 当前每个人炸弹个数 0,1,2座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> BombCount {
    get { return bombCount_; }
  }

  /// <summary>Field number for the "left_card_count" field.</summary>
  public const int LeftCardCountFieldNumber = 7;
  private int leftCardCount_;
  /// <summary>
  /// 剩余手牌数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeftCardCount {
    get { return leftCardCount_; }
    set {
      leftCardCount_ = value;
    }
  }

  /// <summary>Field number for the "operate_type" field.</summary>
  public const int OperateTypeFieldNumber = 8;
  private int operateType_;
  /// <summary>
  /// 操作类型 1 &lt;&lt; 0:出牌,1 &lt;&lt; 1:过牌 两值合并, 1 + 1 &lt;&lt; 1 = 3 既能出牌又能过牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OperateType {
    get { return operateType_; }
    set {
      operateType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSTakeoutCardNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSTakeoutCardNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (SeatNext != other.SeatNext) return false;
    if (TimeThink != other.TimeThink) return false;
    if(!cardsTakeout_.Equals(other.cardsTakeout_)) return false;
    if (Multiple != other.Multiple) return false;
    if(!bombCount_.Equals(other.bombCount_)) return false;
    if (LeftCardCount != other.LeftCardCount) return false;
    if (OperateType != other.OperateType) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (SeatNext != 0) hash ^= SeatNext.GetHashCode();
    if (TimeThink != 0) hash ^= TimeThink.GetHashCode();
    hash ^= cardsTakeout_.GetHashCode();
    if (Multiple != 0) hash ^= Multiple.GetHashCode();
    hash ^= bombCount_.GetHashCode();
    if (LeftCardCount != 0) hash ^= LeftCardCount.GetHashCode();
    if (OperateType != 0) hash ^= OperateType.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (SeatNext != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SeatNext);
    }
    if (TimeThink != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TimeThink);
    }
    cardsTakeout_.WriteTo(output, _repeated_cardsTakeout_codec);
    if (Multiple != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Multiple);
    }
    bombCount_.WriteTo(output, _repeated_bombCount_codec);
    if (LeftCardCount != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(LeftCardCount);
    }
    if (OperateType != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(OperateType);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (SeatNext != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNext);
    }
    if (TimeThink != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeThink);
    }
    size += cardsTakeout_.CalculateSize(_repeated_cardsTakeout_codec);
    if (Multiple != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
    }
    size += bombCount_.CalculateSize(_repeated_bombCount_codec);
    if (LeftCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCardCount);
    }
    if (OperateType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperateType);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSTakeoutCardNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.SeatNext != 0) {
      SeatNext = other.SeatNext;
    }
    if (other.TimeThink != 0) {
      TimeThink = other.TimeThink;
    }
    cardsTakeout_.Add(other.cardsTakeout_);
    if (other.Multiple != 0) {
      Multiple = other.Multiple;
    }
    bombCount_.Add(other.bombCount_);
    if (other.LeftCardCount != 0) {
      LeftCardCount = other.LeftCardCount;
    }
    if (other.OperateType != 0) {
      OperateType = other.OperateType;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 16: {
          SeatNext = input.ReadInt32();
          break;
        }
        case 24: {
          TimeThink = input.ReadInt32();
          break;
        }
        case 34:
        case 32: {
          cardsTakeout_.AddEntriesFrom(input, _repeated_cardsTakeout_codec);
          break;
        }
        case 40: {
          Multiple = input.ReadInt32();
          break;
        }
        case 50:
        case 48: {
          bombCount_.AddEntriesFrom(input, _repeated_bombCount_codec);
          break;
        }
        case 56: {
          LeftCardCount = input.ReadInt32();
          break;
        }
        case 64: {
          OperateType = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CGSGameUserResult : pb::IMessage<CGSGameUserResult> {
  private static readonly pb::MessageParser<CGSGameUserResult> _parser = new pb::MessageParser<CGSGameUserResult>(() => new CGSGameUserResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSGameUserResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[69]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameUserResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameUserResult(CGSGameUserResult other) : this() {
    CardHand = other.cardHand_ != null ? other.CardHand.Clone() : null;
    bombCount_ = other.bombCount_;
    curScore_ = other.curScore_;
    totalScore_ = other.totalScore_;
    isspring_ = other.isspring_;
    isbaopei_ = other.isbaopei_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameUserResult Clone() {
    return new CGSGameUserResult(this);
  }

  /// <summary>Field number for the "card_hand" field.</summary>
  public const int CardHandFieldNumber = 1;
  private global::CGSHandCardItem cardHand_;
  /// <summary>
  /// 玩家手牌[数组下表代表座位号]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CGSHandCardItem CardHand {
    get { return cardHand_; }
    set {
      cardHand_ = value;
    }
  }

  /// <summary>Field number for the "bomb_count" field.</summary>
  public const int BombCountFieldNumber = 2;
  private int bombCount_;
  /// <summary>
  /// 炸弹个数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BombCount {
    get { return bombCount_; }
    set {
      bombCount_ = value;
    }
  }

  /// <summary>Field number for the "cur_score" field.</summary>
  public const int CurScoreFieldNumber = 3;
  private int curScore_;
  /// <summary>
  /// 当前盘成绩
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurScore {
    get { return curScore_; }
    set {
      curScore_ = value;
    }
  }

  /// <summary>Field number for the "total_score" field.</summary>
  public const int TotalScoreFieldNumber = 4;
  private int totalScore_;
  /// <summary>
  /// 当前总成绩
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalScore {
    get { return totalScore_; }
    set {
      totalScore_ = value;
    }
  }

  /// <summary>Field number for the "isspring" field.</summary>
  public const int IsspringFieldNumber = 5;
  private int isspring_;
  /// <summary>
  /// 是否关牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Isspring {
    get { return isspring_; }
    set {
      isspring_ = value;
    }
  }

  /// <summary>Field number for the "isbaopei" field.</summary>
  public const int IsbaopeiFieldNumber = 6;
  private int isbaopei_;
  /// <summary>
  /// 是否包赔
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Isbaopei {
    get { return isbaopei_; }
    set {
      isbaopei_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSGameUserResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSGameUserResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(CardHand, other.CardHand)) return false;
    if (BombCount != other.BombCount) return false;
    if (CurScore != other.CurScore) return false;
    if (TotalScore != other.TotalScore) return false;
    if (Isspring != other.Isspring) return false;
    if (Isbaopei != other.Isbaopei) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (cardHand_ != null) hash ^= CardHand.GetHashCode();
    if (BombCount != 0) hash ^= BombCount.GetHashCode();
    if (CurScore != 0) hash ^= CurScore.GetHashCode();
    if (TotalScore != 0) hash ^= TotalScore.GetHashCode();
    if (Isspring != 0) hash ^= Isspring.GetHashCode();
    if (Isbaopei != 0) hash ^= Isbaopei.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (cardHand_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(CardHand);
    }
    if (BombCount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BombCount);
    }
    if (CurScore != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(CurScore);
    }
    if (TotalScore != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TotalScore);
    }
    if (Isspring != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Isspring);
    }
    if (Isbaopei != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Isbaopei);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (cardHand_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardHand);
    }
    if (BombCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombCount);
    }
    if (CurScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurScore);
    }
    if (TotalScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalScore);
    }
    if (Isspring != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Isspring);
    }
    if (Isbaopei != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Isbaopei);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSGameUserResult other) {
    if (other == null) {
      return;
    }
    if (other.cardHand_ != null) {
      if (cardHand_ == null) {
        cardHand_ = new global::CGSHandCardItem();
      }
      CardHand.MergeFrom(other.CardHand);
    }
    if (other.BombCount != 0) {
      BombCount = other.BombCount;
    }
    if (other.CurScore != 0) {
      CurScore = other.CurScore;
    }
    if (other.TotalScore != 0) {
      TotalScore = other.TotalScore;
    }
    if (other.Isspring != 0) {
      Isspring = other.Isspring;
    }
    if (other.Isbaopei != 0) {
      Isbaopei = other.Isbaopei;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (cardHand_ == null) {
            cardHand_ = new global::CGSHandCardItem();
          }
          input.ReadMessage(cardHand_);
          break;
        }
        case 16: {
          BombCount = input.ReadInt32();
          break;
        }
        case 24: {
          CurScore = input.ReadInt32();
          break;
        }
        case 32: {
          TotalScore = input.ReadInt32();
          break;
        }
        case 40: {
          Isspring = input.ReadInt32();
          break;
        }
        case 48: {
          Isbaopei = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 游戏总结果
/// </summary>
public sealed partial class CGSGameSumResult : pb::IMessage<CGSGameSumResult> {
  private static readonly pb::MessageParser<CGSGameSumResult> _parser = new pb::MessageParser<CGSGameSumResult>(() => new CGSGameSumResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSGameSumResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[70]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameSumResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameSumResult(CGSGameSumResult other) : this() {
    highestScore_ = other.highestScore_;
    bombCount_ = other.bombCount_;
    winCount_ = other.winCount_;
    failureCount_ = other.failureCount_;
    totalScore_ = other.totalScore_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameSumResult Clone() {
    return new CGSGameSumResult(this);
  }

  /// <summary>Field number for the "highest_score" field.</summary>
  public const int HighestScoreFieldNumber = 1;
  private int highestScore_;
  /// <summary>
  /// 单局最高分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HighestScore {
    get { return highestScore_; }
    set {
      highestScore_ = value;
    }
  }

  /// <summary>Field number for the "bomb_count" field.</summary>
  public const int BombCountFieldNumber = 2;
  private int bombCount_;
  /// <summary>
  /// 炸弹个数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BombCount {
    get { return bombCount_; }
    set {
      bombCount_ = value;
    }
  }

  /// <summary>Field number for the "win_count" field.</summary>
  public const int WinCountFieldNumber = 3;
  private int winCount_;
  /// <summary>
  /// 胜利次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WinCount {
    get { return winCount_; }
    set {
      winCount_ = value;
    }
  }

  /// <summary>Field number for the "failure_count" field.</summary>
  public const int FailureCountFieldNumber = 4;
  private int failureCount_;
  /// <summary>
  /// 失败次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FailureCount {
    get { return failureCount_; }
    set {
      failureCount_ = value;
    }
  }

  /// <summary>Field number for the "total_score" field.</summary>
  public const int TotalScoreFieldNumber = 5;
  private int totalScore_;
  /// <summary>
  /// 当前总成绩
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalScore {
    get { return totalScore_; }
    set {
      totalScore_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSGameSumResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSGameSumResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HighestScore != other.HighestScore) return false;
    if (BombCount != other.BombCount) return false;
    if (WinCount != other.WinCount) return false;
    if (FailureCount != other.FailureCount) return false;
    if (TotalScore != other.TotalScore) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HighestScore != 0) hash ^= HighestScore.GetHashCode();
    if (BombCount != 0) hash ^= BombCount.GetHashCode();
    if (WinCount != 0) hash ^= WinCount.GetHashCode();
    if (FailureCount != 0) hash ^= FailureCount.GetHashCode();
    if (TotalScore != 0) hash ^= TotalScore.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HighestScore != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(HighestScore);
    }
    if (BombCount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BombCount);
    }
    if (WinCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(WinCount);
    }
    if (FailureCount != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(FailureCount);
    }
    if (TotalScore != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(TotalScore);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HighestScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HighestScore);
    }
    if (BombCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombCount);
    }
    if (WinCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinCount);
    }
    if (FailureCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FailureCount);
    }
    if (TotalScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalScore);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSGameSumResult other) {
    if (other == null) {
      return;
    }
    if (other.HighestScore != 0) {
      HighestScore = other.HighestScore;
    }
    if (other.BombCount != 0) {
      BombCount = other.BombCount;
    }
    if (other.WinCount != 0) {
      WinCount = other.WinCount;
    }
    if (other.FailureCount != 0) {
      FailureCount = other.FailureCount;
    }
    if (other.TotalScore != 0) {
      TotalScore = other.TotalScore;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          HighestScore = input.ReadInt32();
          break;
        }
        case 16: {
          BombCount = input.ReadInt32();
          break;
        }
        case 24: {
          WinCount = input.ReadInt32();
          break;
        }
        case 32: {
          FailureCount = input.ReadInt32();
          break;
        }
        case 40: {
          TotalScore = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CGSGameResultNtf : pb::IMessage<CGSGameResultNtf> {
  private static readonly pb::MessageParser<CGSGameResultNtf> _parser = new pb::MessageParser<CGSGameResultNtf>(() => new CGSGameResultNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSGameResultNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[71]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameResultNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameResultNtf(CGSGameResultNtf other) : this() {
    seatWin_ = other.seatWin_;
    multipleBase_ = other.multipleBase_;
    multipleBomb_ = other.multipleBomb_;
    multipleSpring_ = other.multipleSpring_;
    curRound_ = other.curRound_;
    totalRound_ = other.totalRound_;
    useTime_ = other.useTime_;
    ur_ = other.ur_.Clone();
    isGameover_ = other.isGameover_;
    sur_ = other.sur_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameResultNtf Clone() {
    return new CGSGameResultNtf(this);
  }

  /// <summary>Field number for the "seat_win" field.</summary>
  public const int SeatWinFieldNumber = 1;
  private int seatWin_;
  /// <summary>
  /// 座位
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatWin {
    get { return seatWin_; }
    set {
      seatWin_ = value;
    }
  }

  /// <summary>Field number for the "multiple_base" field.</summary>
  public const int MultipleBaseFieldNumber = 2;
  private int multipleBase_;
  /// <summary>
  /// 基础倍数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MultipleBase {
    get { return multipleBase_; }
    set {
      multipleBase_ = value;
    }
  }

  /// <summary>Field number for the "multiple_bomb" field.</summary>
  public const int MultipleBombFieldNumber = 3;
  private int multipleBomb_;
  /// <summary>
  /// 倍数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MultipleBomb {
    get { return multipleBomb_; }
    set {
      multipleBomb_ = value;
    }
  }

  /// <summary>Field number for the "multiple_spring" field.</summary>
  public const int MultipleSpringFieldNumber = 4;
  private int multipleSpring_;
  /// <summary>
  /// 关牌倍数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MultipleSpring {
    get { return multipleSpring_; }
    set {
      multipleSpring_ = value;
    }
  }

  /// <summary>Field number for the "cur_round" field.</summary>
  public const int CurRoundFieldNumber = 5;
  private int curRound_;
  /// <summary>
  /// 当前盘
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurRound {
    get { return curRound_; }
    set {
      curRound_ = value;
    }
  }

  /// <summary>Field number for the "total_round" field.</summary>
  public const int TotalRoundFieldNumber = 6;
  private int totalRound_;
  /// <summary>
  /// 总盘数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalRound {
    get { return totalRound_; }
    set {
      totalRound_ = value;
    }
  }

  /// <summary>Field number for the "use_time" field.</summary>
  public const int UseTimeFieldNumber = 7;
  private int useTime_;
  /// <summary>
  /// 总用时秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UseTime {
    get { return useTime_; }
    set {
      useTime_ = value;
    }
  }

  /// <summary>Field number for the "ur" field.</summary>
  public const int UrFieldNumber = 8;
  private static readonly pb::FieldCodec<global::CGSGameUserResult> _repeated_ur_codec
      = pb::FieldCodec.ForMessage(66, global::CGSGameUserResult.Parser);
  private readonly pbc::RepeatedField<global::CGSGameUserResult> ur_ = new pbc::RepeatedField<global::CGSGameUserResult>();
  /// <summary>
  /// 玩家结算成绩结构
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CGSGameUserResult> Ur {
    get { return ur_; }
  }

  /// <summary>Field number for the "is_gameover" field.</summary>
  public const int IsGameoverFieldNumber = 9;
  private int isGameover_;
  /// <summary>
  /// 结算类型（0：小结算、1：大结算）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsGameover {
    get { return isGameover_; }
    set {
      isGameover_ = value;
    }
  }

  /// <summary>Field number for the "sur" field.</summary>
  public const int SurFieldNumber = 10;
  private static readonly pb::FieldCodec<global::CGSGameSumResult> _repeated_sur_codec
      = pb::FieldCodec.ForMessage(82, global::CGSGameSumResult.Parser);
  private readonly pbc::RepeatedField<global::CGSGameSumResult> sur_ = new pbc::RepeatedField<global::CGSGameSumResult>();
  /// <summary>
  /// 玩家结算总成绩结构
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CGSGameSumResult> Sur {
    get { return sur_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSGameResultNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSGameResultNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SeatWin != other.SeatWin) return false;
    if (MultipleBase != other.MultipleBase) return false;
    if (MultipleBomb != other.MultipleBomb) return false;
    if (MultipleSpring != other.MultipleSpring) return false;
    if (CurRound != other.CurRound) return false;
    if (TotalRound != other.TotalRound) return false;
    if (UseTime != other.UseTime) return false;
    if(!ur_.Equals(other.ur_)) return false;
    if (IsGameover != other.IsGameover) return false;
    if(!sur_.Equals(other.sur_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SeatWin != 0) hash ^= SeatWin.GetHashCode();
    if (MultipleBase != 0) hash ^= MultipleBase.GetHashCode();
    if (MultipleBomb != 0) hash ^= MultipleBomb.GetHashCode();
    if (MultipleSpring != 0) hash ^= MultipleSpring.GetHashCode();
    if (CurRound != 0) hash ^= CurRound.GetHashCode();
    if (TotalRound != 0) hash ^= TotalRound.GetHashCode();
    if (UseTime != 0) hash ^= UseTime.GetHashCode();
    hash ^= ur_.GetHashCode();
    if (IsGameover != 0) hash ^= IsGameover.GetHashCode();
    hash ^= sur_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SeatWin != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SeatWin);
    }
    if (MultipleBase != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MultipleBase);
    }
    if (MultipleBomb != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(MultipleBomb);
    }
    if (MultipleSpring != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(MultipleSpring);
    }
    if (CurRound != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(CurRound);
    }
    if (TotalRound != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(TotalRound);
    }
    if (UseTime != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(UseTime);
    }
    ur_.WriteTo(output, _repeated_ur_codec);
    if (IsGameover != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(IsGameover);
    }
    sur_.WriteTo(output, _repeated_sur_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SeatWin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatWin);
    }
    if (MultipleBase != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MultipleBase);
    }
    if (MultipleBomb != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MultipleBomb);
    }
    if (MultipleSpring != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MultipleSpring);
    }
    if (CurRound != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurRound);
    }
    if (TotalRound != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRound);
    }
    if (UseTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseTime);
    }
    size += ur_.CalculateSize(_repeated_ur_codec);
    if (IsGameover != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsGameover);
    }
    size += sur_.CalculateSize(_repeated_sur_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSGameResultNtf other) {
    if (other == null) {
      return;
    }
    if (other.SeatWin != 0) {
      SeatWin = other.SeatWin;
    }
    if (other.MultipleBase != 0) {
      MultipleBase = other.MultipleBase;
    }
    if (other.MultipleBomb != 0) {
      MultipleBomb = other.MultipleBomb;
    }
    if (other.MultipleSpring != 0) {
      MultipleSpring = other.MultipleSpring;
    }
    if (other.CurRound != 0) {
      CurRound = other.CurRound;
    }
    if (other.TotalRound != 0) {
      TotalRound = other.TotalRound;
    }
    if (other.UseTime != 0) {
      UseTime = other.UseTime;
    }
    ur_.Add(other.ur_);
    if (other.IsGameover != 0) {
      IsGameover = other.IsGameover;
    }
    sur_.Add(other.sur_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          SeatWin = input.ReadInt32();
          break;
        }
        case 16: {
          MultipleBase = input.ReadInt32();
          break;
        }
        case 24: {
          MultipleBomb = input.ReadInt32();
          break;
        }
        case 32: {
          MultipleSpring = input.ReadInt32();
          break;
        }
        case 40: {
          CurRound = input.ReadInt32();
          break;
        }
        case 48: {
          TotalRound = input.ReadInt32();
          break;
        }
        case 56: {
          UseTime = input.ReadInt32();
          break;
        }
        case 66: {
          ur_.AddEntriesFrom(input, _repeated_ur_codec);
          break;
        }
        case 72: {
          IsGameover = input.ReadInt32();
          break;
        }
        case 82: {
          sur_.AddEntriesFrom(input, _repeated_sur_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 结束游戏
/// </summary>
public sealed partial class CGSGameOverNtf : pb::IMessage<CGSGameOverNtf> {
  private static readonly pb::MessageParser<CGSGameOverNtf> _parser = new pb::MessageParser<CGSGameOverNtf>(() => new CGSGameOverNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSGameOverNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[72]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameOverNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameOverNtf(CGSGameOverNtf other) : this() {
    reason_ = other.reason_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSGameOverNtf Clone() {
    return new CGSGameOverNtf(this);
  }

  /// <summary>Field number for the "reason" field.</summary>
  public const int ReasonFieldNumber = 1;
  private int reason_;
  /// <summary>
  /// 结束原因
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Reason {
    get { return reason_; }
    set {
      reason_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSGameOverNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSGameOverNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Reason != other.Reason) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Reason != 0) hash ^= Reason.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Reason != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Reason);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Reason != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reason);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSGameOverNtf other) {
    if (other == null) {
      return;
    }
    if (other.Reason != 0) {
      Reason = other.Reason;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Reason = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 数据同步
/// </summary>
public sealed partial class CGSSyncDataNtf : pb::IMessage<CGSSyncDataNtf> {
  private static readonly pb::MessageParser<CGSSyncDataNtf> _parser = new pb::MessageParser<CGSSyncDataNtf>(() => new CGSSyncDataNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSSyncDataNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[73]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSSyncDataNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSSyncDataNtf(CGSSyncDataNtf other) : this() {
    playerInfo_ = other.playerInfo_.Clone();
    operateType_ = other.operateType_;
    takeoutIndex_ = other.takeoutIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSSyncDataNtf Clone() {
    return new CGSSyncDataNtf(this);
  }

  /// <summary>Field number for the "player_info" field.</summary>
  public const int PlayerInfoFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CGSPlayerInfoReal> _repeated_playerInfo_codec
      = pb::FieldCodec.ForMessage(10, global::CGSPlayerInfoReal.Parser);
  private readonly pbc::RepeatedField<global::CGSPlayerInfoReal> playerInfo_ = new pbc::RepeatedField<global::CGSPlayerInfoReal>();
  /// <summary>
  /// 玩家信息[数组下标代表座位号]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CGSPlayerInfoReal> PlayerInfo {
    get { return playerInfo_; }
  }

  /// <summary>Field number for the "operate_type" field.</summary>
  public const int OperateTypeFieldNumber = 2;
  private int operateType_;
  /// <summary>
  /// 操作类型 1 &lt;&lt; 0:出牌,1 &lt;&lt; 1:过牌 两值合并, 1 + 1 &lt;&lt; 1 = 3 既能出牌又能过牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OperateType {
    get { return operateType_; }
    set {
      operateType_ = value;
    }
  }

  /// <summary>Field number for the "takeout_index" field.</summary>
  public const int TakeoutIndexFieldNumber = 3;
  private int takeoutIndex_;
  /// <summary>
  /// 本副牌打了几手牌（过牌也算）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TakeoutIndex {
    get { return takeoutIndex_; }
    set {
      takeoutIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSSyncDataNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSSyncDataNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!playerInfo_.Equals(other.playerInfo_)) return false;
    if (OperateType != other.OperateType) return false;
    if (TakeoutIndex != other.TakeoutIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= playerInfo_.GetHashCode();
    if (OperateType != 0) hash ^= OperateType.GetHashCode();
    if (TakeoutIndex != 0) hash ^= TakeoutIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    playerInfo_.WriteTo(output, _repeated_playerInfo_codec);
    if (OperateType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OperateType);
    }
    if (TakeoutIndex != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TakeoutIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += playerInfo_.CalculateSize(_repeated_playerInfo_codec);
    if (OperateType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperateType);
    }
    if (TakeoutIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TakeoutIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSSyncDataNtf other) {
    if (other == null) {
      return;
    }
    playerInfo_.Add(other.playerInfo_);
    if (other.OperateType != 0) {
      OperateType = other.OperateType;
    }
    if (other.TakeoutIndex != 0) {
      TakeoutIndex = other.TakeoutIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          playerInfo_.AddEntriesFrom(input, _repeated_playerInfo_codec);
          break;
        }
        case 16: {
          OperateType = input.ReadInt32();
          break;
        }
        case 24: {
          TakeoutIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知切入切出
/// </summary>
public sealed partial class CGSBreakReqNtf : pb::IMessage<CGSBreakReqNtf> {
  private static readonly pb::MessageParser<CGSBreakReqNtf> _parser = new pb::MessageParser<CGSBreakReqNtf>(() => new CGSBreakReqNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSBreakReqNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[74]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSBreakReqNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSBreakReqNtf(CGSBreakReqNtf other) : this() {
    seat_ = other.seat_;
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSBreakReqNtf Clone() {
    return new CGSBreakReqNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  /// <summary>
  ///  0:切回  2:切走
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSBreakReqNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSBreakReqNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSBreakReqNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 用户请求解散
/// </summary>
public sealed partial class CGSDismissReqNtf : pb::IMessage<CGSDismissReqNtf> {
  private static readonly pb::MessageParser<CGSDismissReqNtf> _parser = new pb::MessageParser<CGSDismissReqNtf>(() => new CGSDismissReqNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CGSDismissReqNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[75]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSDismissReqNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSDismissReqNtf(CGSDismissReqNtf other) : this() {
    seat_ = other.seat_;
    leadSeat_ = other.leadSeat_;
    leftTime_ = other.leftTime_;
    playerDismiss_ = other.playerDismiss_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CGSDismissReqNtf Clone() {
    return new CGSDismissReqNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 当前回复座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "lead_seat" field.</summary>
  public const int LeadSeatFieldNumber = 2;
  private int leadSeat_;
  /// <summary>
  /// 发起者座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeadSeat {
    get { return leadSeat_; }
    set {
      leadSeat_ = value;
    }
  }

  /// <summary>Field number for the "left_time" field.</summary>
  public const int LeftTimeFieldNumber = 3;
  private int leftTime_;
  /// <summary>
  /// 剩余强制解散时间 秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeftTime {
    get { return leftTime_; }
    set {
      leftTime_ = value;
    }
  }

  /// <summary>Field number for the "player_dismiss" field.</summary>
  public const int PlayerDismissFieldNumber = 4;
  private static readonly pb::FieldCodec<int> _repeated_playerDismiss_codec
      = pb::FieldCodec.ForInt32(34);
  private readonly pbc::RepeatedField<int> playerDismiss_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 所有人断线状态  是否同意解散 1 同意，2 不同意 0 未选
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> PlayerDismiss {
    get { return playerDismiss_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CGSDismissReqNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CGSDismissReqNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (LeadSeat != other.LeadSeat) return false;
    if (LeftTime != other.LeftTime) return false;
    if(!playerDismiss_.Equals(other.playerDismiss_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (LeadSeat != 0) hash ^= LeadSeat.GetHashCode();
    if (LeftTime != 0) hash ^= LeftTime.GetHashCode();
    hash ^= playerDismiss_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (LeadSeat != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(LeadSeat);
    }
    if (LeftTime != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(LeftTime);
    }
    playerDismiss_.WriteTo(output, _repeated_playerDismiss_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (LeadSeat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeadSeat);
    }
    if (LeftTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftTime);
    }
    size += playerDismiss_.CalculateSize(_repeated_playerDismiss_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CGSDismissReqNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.LeadSeat != 0) {
      LeadSeat = other.LeadSeat;
    }
    if (other.LeftTime != 0) {
      LeftTime = other.LeftTime;
    }
    playerDismiss_.Add(other.playerDismiss_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 16: {
          LeadSeat = input.ReadInt32();
          break;
        }
        case 24: {
          LeftTime = input.ReadInt32();
          break;
        }
        case 34:
        case 32: {
          playerDismiss_.AddEntriesFrom(input, _repeated_playerDismiss_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣//
/// ------------------------------------掼蛋 game--------------------------------------//
/// __________________________________________________________________________________//
///  手牌容器
/// </summary>
public sealed partial class GD_CGSHandCardItem : pb::IMessage<GD_CGSHandCardItem> {
  private static readonly pb::MessageParser<GD_CGSHandCardItem> _parser = new pb::MessageParser<GD_CGSHandCardItem>(() => new GD_CGSHandCardItem());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSHandCardItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[76]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSHandCardItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSHandCardItem(GD_CGSHandCardItem other) : this() {
    cards_ = other.cards_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSHandCardItem Clone() {
    return new GD_CGSHandCardItem(this);
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_cards_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 牌数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Cards {
    get { return cards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSHandCardItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSHandCardItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cards_.Equals(other.cards_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cards_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cards_.WriteTo(output, _repeated_cards_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cards_.CalculateSize(_repeated_cards_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSHandCardItem other) {
    if (other == null) {
      return;
    }
    cards_.Add(other.cards_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///  桌牌容器
/// </summary>
public sealed partial class GD_CGSTableCardItem : pb::IMessage<GD_CGSTableCardItem> {
  private static readonly pb::MessageParser<GD_CGSTableCardItem> _parser = new pb::MessageParser<GD_CGSTableCardItem>(() => new GD_CGSTableCardItem());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSTableCardItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[77]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTableCardItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTableCardItem(GD_CGSTableCardItem other) : this() {
    cards_ = other.cards_.Clone();
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTableCardItem Clone() {
    return new GD_CGSTableCardItem(this);
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_cards_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 牌数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Cards {
    get { return cards_; }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  /// <summary>
  /// 动作类型: 0-不出 1-没出过
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSTableCardItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSTableCardItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cards_.Equals(other.cards_)) return false;
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cards_.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cards_.WriteTo(output, _repeated_cards_codec);
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSTableCardItem other) {
    if (other == null) {
      return;
    }
    cards_.Add(other.cards_);
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///  玩家动态信息
/// </summary>
public sealed partial class GD_CGSPlayerInfoReal : pb::IMessage<GD_CGSPlayerInfoReal> {
  private static readonly pb::MessageParser<GD_CGSPlayerInfoReal> _parser = new pb::MessageParser<GD_CGSPlayerInfoReal>(() => new GD_CGSPlayerInfoReal());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSPlayerInfoReal> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[78]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerInfoReal() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerInfoReal(GD_CGSPlayerInfoReal other) : this() {
    CardTable = other.cardTable_ != null ? other.CardTable.Clone() : null;
    timeThink_ = other.timeThink_;
    cardHand_ = other.cardHand_.Clone();
    leftCardCount_ = other.leftCardCount_;
    whetherTribute_ = other.whetherTribute_;
    tributeCard_ = other.tributeCard_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerInfoReal Clone() {
    return new GD_CGSPlayerInfoReal(this);
  }

  /// <summary>Field number for the "card_table" field.</summary>
  public const int CardTableFieldNumber = 1;
  private global::GD_CGSTableCardItem cardTable_;
  /// <summary>
  ///  桌牌内容
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GD_CGSTableCardItem CardTable {
    get { return cardTable_; }
    set {
      cardTable_ = value;
    }
  }

  /// <summary>Field number for the "time_think" field.</summary>
  public const int TimeThinkFieldNumber = 2;
  private int timeThink_;
  /// <summary>
  ///  出牌思考时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeThink {
    get { return timeThink_; }
    set {
      timeThink_ = value;
    }
  }

  /// <summary>Field number for the "card_hand" field.</summary>
  public const int CardHandFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_cardHand_codec
      = pb::FieldCodec.ForInt32(26);
  private readonly pbc::RepeatedField<int> cardHand_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///  手牌内容
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> CardHand {
    get { return cardHand_; }
  }

  /// <summary>Field number for the "left_card_count" field.</summary>
  public const int LeftCardCountFieldNumber = 4;
  private int leftCardCount_;
  /// <summary>
  ///  当前剩余张数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeftCardCount {
    get { return leftCardCount_; }
    set {
      leftCardCount_ = value;
    }
  }

  /// <summary>Field number for the "whether_tribute" field.</summary>
  public const int WhetherTributeFieldNumber = 5;
  private int whetherTribute_;
  /// <summary>
  ///  当前是否需要进贡(0:为不需要 1:需要进贡 2:需要还贡)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WhetherTribute {
    get { return whetherTribute_; }
    set {
      whetherTribute_ = value;
    }
  }

  /// <summary>Field number for the "tribute_card" field.</summary>
  public const int TributeCardFieldNumber = 6;
  private int tributeCard_;
  /// <summary>
  ///  玩家进贡或者还贡的牌值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TributeCard {
    get { return tributeCard_; }
    set {
      tributeCard_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSPlayerInfoReal);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSPlayerInfoReal other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(CardTable, other.CardTable)) return false;
    if (TimeThink != other.TimeThink) return false;
    if(!cardHand_.Equals(other.cardHand_)) return false;
    if (LeftCardCount != other.LeftCardCount) return false;
    if (WhetherTribute != other.WhetherTribute) return false;
    if (TributeCard != other.TributeCard) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (cardTable_ != null) hash ^= CardTable.GetHashCode();
    if (TimeThink != 0) hash ^= TimeThink.GetHashCode();
    hash ^= cardHand_.GetHashCode();
    if (LeftCardCount != 0) hash ^= LeftCardCount.GetHashCode();
    if (WhetherTribute != 0) hash ^= WhetherTribute.GetHashCode();
    if (TributeCard != 0) hash ^= TributeCard.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (cardTable_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(CardTable);
    }
    if (TimeThink != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TimeThink);
    }
    cardHand_.WriteTo(output, _repeated_cardHand_codec);
    if (LeftCardCount != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(LeftCardCount);
    }
    if (WhetherTribute != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(WhetherTribute);
    }
    if (TributeCard != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(TributeCard);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (cardTable_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardTable);
    }
    if (TimeThink != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeThink);
    }
    size += cardHand_.CalculateSize(_repeated_cardHand_codec);
    if (LeftCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCardCount);
    }
    if (WhetherTribute != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WhetherTribute);
    }
    if (TributeCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TributeCard);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSPlayerInfoReal other) {
    if (other == null) {
      return;
    }
    if (other.cardTable_ != null) {
      if (cardTable_ == null) {
        cardTable_ = new global::GD_CGSTableCardItem();
      }
      CardTable.MergeFrom(other.CardTable);
    }
    if (other.TimeThink != 0) {
      TimeThink = other.TimeThink;
    }
    cardHand_.Add(other.cardHand_);
    if (other.LeftCardCount != 0) {
      LeftCardCount = other.LeftCardCount;
    }
    if (other.WhetherTribute != 0) {
      WhetherTribute = other.WhetherTribute;
    }
    if (other.TributeCard != 0) {
      TributeCard = other.TributeCard;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (cardTable_ == null) {
            cardTable_ = new global::GD_CGSTableCardItem();
          }
          input.ReadMessage(cardTable_);
          break;
        }
        case 16: {
          TimeThink = input.ReadInt32();
          break;
        }
        case 26:
        case 24: {
          cardHand_.AddEntriesFrom(input, _repeated_cardHand_codec);
          break;
        }
        case 32: {
          LeftCardCount = input.ReadInt32();
          break;
        }
        case 40: {
          WhetherTribute = input.ReadInt32();
          break;
        }
        case 48: {
          TributeCard = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///  游戏实时信息
/// </summary>
public sealed partial class GD_CGSGameInfoReal : pb::IMessage<GD_CGSGameInfoReal> {
  private static readonly pb::MessageParser<GD_CGSGameInfoReal> _parser = new pb::MessageParser<GD_CGSGameInfoReal>(() => new GD_CGSGameInfoReal());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSGameInfoReal> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[79]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameInfoReal() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameInfoReal(GD_CGSGameInfoReal other) : this() {
    statusGame_ = other.statusGame_;
    seatActive_ = other.seatActive_;
    curCard_ = other.curCard_;
    scoreBothParties_ = other.scoreBothParties_.Clone();
    isNextLead_ = other.isNextLead_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameInfoReal Clone() {
    return new GD_CGSGameInfoReal(this);
  }

  /// <summary>Field number for the "status_game" field.</summary>
  public const int StatusGameFieldNumber = 1;
  private int statusGame_;
  /// <summary>
  ///  游戏当前状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StatusGame {
    get { return statusGame_; }
    set {
      statusGame_ = value;
    }
  }

  /// <summary>Field number for the "seat_active" field.</summary>
  public const int SeatActiveFieldNumber = 2;
  private int seatActive_;
  /// <summary>
  ///  当前活动玩家座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatActive {
    get { return seatActive_; }
    set {
      seatActive_ = value;
    }
  }

  /// <summary>Field number for the "cur_card" field.</summary>
  public const int CurCardFieldNumber = 3;
  private int curCard_;
  /// <summary>
  ///  当前是打几的牌[例如:1和3号玩家赢的话，打1和3玩家当前达到的位置]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurCard {
    get { return curCard_; }
    set {
      curCard_ = value;
    }
  }

  /// <summary>Field number for the "score_both_parties" field.</summary>
  public const int ScoreBothPartiesFieldNumber = 4;
  private static readonly pb::FieldCodec<int> _repeated_scoreBothParties_codec
      = pb::FieldCodec.ForInt32(34);
  private readonly pbc::RepeatedField<int> scoreBothParties_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///  当前两家达到的牌数[0:位置为1和3号玩家 1:位置为2和4号玩家]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> ScoreBothParties {
    get { return scoreBothParties_; }
  }

  /// <summary>Field number for the "is_next_lead" field.</summary>
  public const int IsNextLeadFieldNumber = 5;
  private int isNextLead_;
  /// <summary>
  ///  是否领出
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsNextLead {
    get { return isNextLead_; }
    set {
      isNextLead_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSGameInfoReal);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSGameInfoReal other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StatusGame != other.StatusGame) return false;
    if (SeatActive != other.SeatActive) return false;
    if (CurCard != other.CurCard) return false;
    if(!scoreBothParties_.Equals(other.scoreBothParties_)) return false;
    if (IsNextLead != other.IsNextLead) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StatusGame != 0) hash ^= StatusGame.GetHashCode();
    if (SeatActive != 0) hash ^= SeatActive.GetHashCode();
    if (CurCard != 0) hash ^= CurCard.GetHashCode();
    hash ^= scoreBothParties_.GetHashCode();
    if (IsNextLead != 0) hash ^= IsNextLead.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StatusGame != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(StatusGame);
    }
    if (SeatActive != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SeatActive);
    }
    if (CurCard != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(CurCard);
    }
    scoreBothParties_.WriteTo(output, _repeated_scoreBothParties_codec);
    if (IsNextLead != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(IsNextLead);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StatusGame != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusGame);
    }
    if (SeatActive != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatActive);
    }
    if (CurCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurCard);
    }
    size += scoreBothParties_.CalculateSize(_repeated_scoreBothParties_codec);
    if (IsNextLead != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsNextLead);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSGameInfoReal other) {
    if (other == null) {
      return;
    }
    if (other.StatusGame != 0) {
      StatusGame = other.StatusGame;
    }
    if (other.SeatActive != 0) {
      SeatActive = other.SeatActive;
    }
    if (other.CurCard != 0) {
      CurCard = other.CurCard;
    }
    scoreBothParties_.Add(other.scoreBothParties_);
    if (other.IsNextLead != 0) {
      IsNextLead = other.IsNextLead;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          StatusGame = input.ReadInt32();
          break;
        }
        case 16: {
          SeatActive = input.ReadInt32();
          break;
        }
        case 24: {
          CurCard = input.ReadInt32();
          break;
        }
        case 34:
        case 32: {
          scoreBothParties_.AddEntriesFrom(input, _repeated_scoreBothParties_codec);
          break;
        }
        case 40: {
          IsNextLead = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_CLI_GS_REQ_HEARTBEAT         
/// 心跳消息
/// </summary>
public sealed partial class GD_CGSHeartBeatReq : pb::IMessage<GD_CGSHeartBeatReq> {
  private static readonly pb::MessageParser<GD_CGSHeartBeatReq> _parser = new pb::MessageParser<GD_CGSHeartBeatReq>(() => new GD_CGSHeartBeatReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSHeartBeatReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[80]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSHeartBeatReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSHeartBeatReq(GD_CGSHeartBeatReq other) : this() {
    time_ = other.time_;
    delay_ = other.delay_;
    heartCount_ = other.heartCount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSHeartBeatReq Clone() {
    return new GD_CGSHeartBeatReq(this);
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 1;
  private long time_;
  /// <summary>
  ///  客户端发出的时间，服务器原封不动的返回，用来计算网络延迟
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  /// <summary>Field number for the "delay" field.</summary>
  public const int DelayFieldNumber = 2;
  private int delay_;
  /// <summary>
  /// 延时毫秒数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Delay {
    get { return delay_; }
    set {
      delay_ = value;
    }
  }

  /// <summary>Field number for the "heartCount" field.</summary>
  public const int HeartCountFieldNumber = 3;
  private int heartCount_;
  /// <summary>
  /// 客户端超时计数器
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HeartCount {
    get { return heartCount_; }
    set {
      heartCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSHeartBeatReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSHeartBeatReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Time != other.Time) return false;
    if (Delay != other.Delay) return false;
    if (HeartCount != other.HeartCount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Time != 0L) hash ^= Time.GetHashCode();
    if (Delay != 0) hash ^= Delay.GetHashCode();
    if (HeartCount != 0) hash ^= HeartCount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Time != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Time);
    }
    if (Delay != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Delay);
    }
    if (HeartCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(HeartCount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Time != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
    }
    if (Delay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Delay);
    }
    if (HeartCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeartCount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSHeartBeatReq other) {
    if (other == null) {
      return;
    }
    if (other.Time != 0L) {
      Time = other.Time;
    }
    if (other.Delay != 0) {
      Delay = other.Delay;
    }
    if (other.HeartCount != 0) {
      HeartCount = other.HeartCount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Time = input.ReadInt64();
          break;
        }
        case 16: {
          Delay = input.ReadInt32();
          break;
        }
        case 24: {
          HeartCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GD_CGSHeartBeatAck : pb::IMessage<GD_CGSHeartBeatAck> {
  private static readonly pb::MessageParser<GD_CGSHeartBeatAck> _parser = new pb::MessageParser<GD_CGSHeartBeatAck>(() => new GD_CGSHeartBeatAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSHeartBeatAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[81]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSHeartBeatAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSHeartBeatAck(GD_CGSHeartBeatAck other) : this() {
    time_ = other.time_;
    delay_ = other.delay_;
    heartCount_ = other.heartCount_;
    timeExpend_ = other.timeExpend_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSHeartBeatAck Clone() {
    return new GD_CGSHeartBeatAck(this);
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 1;
  private long time_;
  /// <summary>
  ///  客户端发出的时间，服务器原封不动的返回，用来计算网络延迟
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  /// <summary>Field number for the "delay" field.</summary>
  public const int DelayFieldNumber = 2;
  private int delay_;
  /// <summary>
  /// 延时毫秒数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Delay {
    get { return delay_; }
    set {
      delay_ = value;
    }
  }

  /// <summary>Field number for the "heartCount" field.</summary>
  public const int HeartCountFieldNumber = 3;
  private int heartCount_;
  /// <summary>
  /// 客户端超时计数器
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HeartCount {
    get { return heartCount_; }
    set {
      heartCount_ = value;
    }
  }

  /// <summary>Field number for the "time_expend" field.</summary>
  public const int TimeExpendFieldNumber = 4;
  private int timeExpend_;
  /// <summary>
  /// 游戏时长
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeExpend {
    get { return timeExpend_; }
    set {
      timeExpend_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSHeartBeatAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSHeartBeatAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Time != other.Time) return false;
    if (Delay != other.Delay) return false;
    if (HeartCount != other.HeartCount) return false;
    if (TimeExpend != other.TimeExpend) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Time != 0L) hash ^= Time.GetHashCode();
    if (Delay != 0) hash ^= Delay.GetHashCode();
    if (HeartCount != 0) hash ^= HeartCount.GetHashCode();
    if (TimeExpend != 0) hash ^= TimeExpend.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Time != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Time);
    }
    if (Delay != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Delay);
    }
    if (HeartCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(HeartCount);
    }
    if (TimeExpend != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TimeExpend);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Time != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
    }
    if (Delay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Delay);
    }
    if (HeartCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeartCount);
    }
    if (TimeExpend != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeExpend);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSHeartBeatAck other) {
    if (other == null) {
      return;
    }
    if (other.Time != 0L) {
      Time = other.Time;
    }
    if (other.Delay != 0) {
      Delay = other.Delay;
    }
    if (other.HeartCount != 0) {
      HeartCount = other.HeartCount;
    }
    if (other.TimeExpend != 0) {
      TimeExpend = other.TimeExpend;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Time = input.ReadInt64();
          break;
        }
        case 16: {
          Delay = input.ReadInt32();
          break;
        }
        case 24: {
          HeartCount = input.ReadInt32();
          break;
        }
        case 32: {
          TimeExpend = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_CLI_GS_REQ_GAMEENTER         
/// 进入游戏
/// </summary>
public sealed partial class GD_CGSGameEnterReq : pb::IMessage<GD_CGSGameEnterReq> {
  private static readonly pb::MessageParser<GD_CGSGameEnterReq> _parser = new pb::MessageParser<GD_CGSGameEnterReq>(() => new GD_CGSGameEnterReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSGameEnterReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[82]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameEnterReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameEnterReq(GD_CGSGameEnterReq other) : this() {
    tableid_ = other.tableid_;
    username_ = other.username_;
    ticket_ = other.ticket_;
    userid_ = other.userid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameEnterReq Clone() {
    return new GD_CGSGameEnterReq(this);
  }

  /// <summary>Field number for the "tableid" field.</summary>
  public const int TableidFieldNumber = 1;
  private int tableid_;
  /// <summary>
  ///  桌号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Tableid {
    get { return tableid_; }
    set {
      tableid_ = value;
    }
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 2;
  private string username_ = "";
  /// <summary>
  ///  用户名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ticket" field.</summary>
  public const int TicketFieldNumber = 3;
  private string ticket_ = "";
  /// <summary>
  ///  加密验证（证书之类的）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ticket {
    get { return ticket_; }
    set {
      ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 4;
  private int userid_;
  /// <summary>
  ///  用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSGameEnterReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSGameEnterReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Tableid != other.Tableid) return false;
    if (Username != other.Username) return false;
    if (Ticket != other.Ticket) return false;
    if (Userid != other.Userid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Tableid != 0) hash ^= Tableid.GetHashCode();
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (Ticket.Length != 0) hash ^= Ticket.GetHashCode();
    if (Userid != 0) hash ^= Userid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Tableid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Tableid);
    }
    if (Username.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Username);
    }
    if (Ticket.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Ticket);
    }
    if (Userid != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Userid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Tableid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tableid);
    }
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (Ticket.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticket);
    }
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSGameEnterReq other) {
    if (other == null) {
      return;
    }
    if (other.Tableid != 0) {
      Tableid = other.Tableid;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.Ticket.Length != 0) {
      Ticket = other.Ticket;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Tableid = input.ReadInt32();
          break;
        }
        case 18: {
          Username = input.ReadString();
          break;
        }
        case 26: {
          Ticket = input.ReadString();
          break;
        }
        case 32: {
          Userid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GD_CGSPlayerInfo : pb::IMessage<GD_CGSPlayerInfo> {
  private static readonly pb::MessageParser<GD_CGSPlayerInfo> _parser = new pb::MessageParser<GD_CGSPlayerInfo>(() => new GD_CGSPlayerInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSPlayerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[83]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerInfo(GD_CGSPlayerInfo other) : this() {
    userid_ = other.userid_;
    seat_ = other.seat_;
    nickname_ = other.nickname_;
    sex_ = other.sex_;
    headimg_ = other.headimg_;
    ip_ = other.ip_;
    statusOnline_ = other.statusOnline_;
    breakType_ = other.breakType_;
    score_ = other.score_;
    statusReady_ = other.statusReady_;
    score510K_ = other.score510K_;
    winOrder_ = other.winOrder_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerInfo Clone() {
    return new GD_CGSPlayerInfo(this);
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 1;
  private int userid_;
  /// <summary>
  ///  用户id	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 2;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 3;
  private string nickname_ = "";
  /// <summary>
  /// 昵称
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sex" field.</summary>
  public const int SexFieldNumber = 4;
  private int sex_;
  /// <summary>
  /// 用户性别
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Sex {
    get { return sex_; }
    set {
      sex_ = value;
    }
  }

  /// <summary>Field number for the "headimg" field.</summary>
  public const int HeadimgFieldNumber = 5;
  private string headimg_ = "";
  /// <summary>
  /// 头像地址
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Headimg {
    get { return headimg_; }
    set {
      headimg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ip" field.</summary>
  public const int IpFieldNumber = 6;
  private uint ip_;
  /// <summary>
  /// ip地址
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Ip {
    get { return ip_; }
    set {
      ip_ = value;
    }
  }

  /// <summary>Field number for the "status_online" field.</summary>
  public const int StatusOnlineFieldNumber = 7;
  private int statusOnline_;
  /// <summary>
  /// 在线状态 0:在线 1:离线
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StatusOnline {
    get { return statusOnline_; }
    set {
      statusOnline_ = value;
    }
  }

  /// <summary>Field number for the "break_type" field.</summary>
  public const int BreakTypeFieldNumber = 8;
  private int breakType_;
  /// <summary>
  /// 切入切出状态 0：切入 1：切出
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BreakType {
    get { return breakType_; }
    set {
      breakType_ = value;
    }
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 9;
  private int score_;
  /// <summary>
  /// 当前总分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Score {
    get { return score_; }
    set {
      score_ = value;
    }
  }

  /// <summary>Field number for the "status_ready" field.</summary>
  public const int StatusReadyFieldNumber = 10;
  private int statusReady_;
  /// <summary>
  /// 准备状态 0:准备好 1:没准备
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StatusReady {
    get { return statusReady_; }
    set {
      statusReady_ = value;
    }
  }

  /// <summary>Field number for the "score_510k" field.</summary>
  public const int Score510KFieldNumber = 11;
  private int score510K_;
  /// <summary>
  /// 当前510k分数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Score510K {
    get { return score510K_; }
    set {
      score510K_ = value;
    }
  }

  /// <summary>Field number for the "win_order" field.</summary>
  public const int WinOrderFieldNumber = 12;
  private int winOrder_;
  /// <summary>
  /// 排名 0：没出完 1,2,3,4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WinOrder {
    get { return winOrder_; }
    set {
      winOrder_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSPlayerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSPlayerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Userid != other.Userid) return false;
    if (Seat != other.Seat) return false;
    if (Nickname != other.Nickname) return false;
    if (Sex != other.Sex) return false;
    if (Headimg != other.Headimg) return false;
    if (Ip != other.Ip) return false;
    if (StatusOnline != other.StatusOnline) return false;
    if (BreakType != other.BreakType) return false;
    if (Score != other.Score) return false;
    if (StatusReady != other.StatusReady) return false;
    if (Score510K != other.Score510K) return false;
    if (WinOrder != other.WinOrder) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (Sex != 0) hash ^= Sex.GetHashCode();
    if (Headimg.Length != 0) hash ^= Headimg.GetHashCode();
    if (Ip != 0) hash ^= Ip.GetHashCode();
    if (StatusOnline != 0) hash ^= StatusOnline.GetHashCode();
    if (BreakType != 0) hash ^= BreakType.GetHashCode();
    if (Score != 0) hash ^= Score.GetHashCode();
    if (StatusReady != 0) hash ^= StatusReady.GetHashCode();
    if (Score510K != 0) hash ^= Score510K.GetHashCode();
    if (WinOrder != 0) hash ^= WinOrder.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Userid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Userid);
    }
    if (Seat != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Seat);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Nickname);
    }
    if (Sex != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Sex);
    }
    if (Headimg.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Headimg);
    }
    if (Ip != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Ip);
    }
    if (StatusOnline != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(StatusOnline);
    }
    if (BreakType != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(BreakType);
    }
    if (Score != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(Score);
    }
    if (StatusReady != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(StatusReady);
    }
    if (Score510K != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(Score510K);
    }
    if (WinOrder != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(WinOrder);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (Sex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
    }
    if (Headimg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Headimg);
    }
    if (Ip != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ip);
    }
    if (StatusOnline != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusOnline);
    }
    if (BreakType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakType);
    }
    if (Score != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
    }
    if (StatusReady != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusReady);
    }
    if (Score510K != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score510K);
    }
    if (WinOrder != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinOrder);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSPlayerInfo other) {
    if (other == null) {
      return;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    if (other.Sex != 0) {
      Sex = other.Sex;
    }
    if (other.Headimg.Length != 0) {
      Headimg = other.Headimg;
    }
    if (other.Ip != 0) {
      Ip = other.Ip;
    }
    if (other.StatusOnline != 0) {
      StatusOnline = other.StatusOnline;
    }
    if (other.BreakType != 0) {
      BreakType = other.BreakType;
    }
    if (other.Score != 0) {
      Score = other.Score;
    }
    if (other.StatusReady != 0) {
      StatusReady = other.StatusReady;
    }
    if (other.Score510K != 0) {
      Score510K = other.Score510K;
    }
    if (other.WinOrder != 0) {
      WinOrder = other.WinOrder;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Userid = input.ReadInt32();
          break;
        }
        case 16: {
          Seat = input.ReadInt32();
          break;
        }
        case 26: {
          Nickname = input.ReadString();
          break;
        }
        case 32: {
          Sex = input.ReadInt32();
          break;
        }
        case 42: {
          Headimg = input.ReadString();
          break;
        }
        case 48: {
          Ip = input.ReadUInt32();
          break;
        }
        case 56: {
          StatusOnline = input.ReadInt32();
          break;
        }
        case 64: {
          BreakType = input.ReadInt32();
          break;
        }
        case 72: {
          Score = input.ReadInt32();
          break;
        }
        case 80: {
          StatusReady = input.ReadInt32();
          break;
        }
        case 88: {
          Score510K = input.ReadInt32();
          break;
        }
        case 96: {
          WinOrder = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 桌子规则定义扩展
/// </summary>
public sealed partial class GD_CGSTableRule : pb::IMessage<GD_CGSTableRule> {
  private static readonly pb::MessageParser<GD_CGSTableRule> _parser = new pb::MessageParser<GD_CGSTableRule>(() => new GD_CGSTableRule());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSTableRule> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[84]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTableRule() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTableRule(GD_CGSTableRule other) : this() {
    playerCount_ = other.playerCount_;
    round_ = other.round_;
    timeThink_ = other.timeThink_;
    curRound_ = other.curRound_;
    playType_ = other.playType_;
    upgradeType_ = other.upgradeType_;
    straightFlush_ = other.straightFlush_;
    sixBombDouble_ = other.sixBombDouble_;
    sixBombLottery_ = other.sixBombLottery_;
    remianCard_ = other.remianCard_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTableRule Clone() {
    return new GD_CGSTableRule(this);
  }

  /// <summary>Field number for the "player_count" field.</summary>
  public const int PlayerCountFieldNumber = 1;
  private int playerCount_;
  /// <summary>
  ///  玩家数 2, 3，4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerCount {
    get { return playerCount_; }
    set {
      playerCount_ = value;
    }
  }

  /// <summary>Field number for the "round" field.</summary>
  public const int RoundFieldNumber = 2;
  private int round_;
  /// <summary>
  ///  总局数 (0:过六 1:过八 2:过十 3:过A 4:4局 8:8局 12:12局)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Round {
    get { return round_; }
    set {
      round_ = value;
    }
  }

  /// <summary>Field number for the "time_think" field.</summary>
  public const int TimeThinkFieldNumber = 3;
  private int timeThink_;
  /// <summary>
  ///  出牌思考时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeThink {
    get { return timeThink_; }
    set {
      timeThink_ = value;
    }
  }

  /// <summary>Field number for the "cur_round" field.</summary>
  public const int CurRoundFieldNumber = 4;
  private int curRound_;
  /// <summary>
  ///  本桌的连续游戏盘数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurRound {
    get { return curRound_; }
    set {
      curRound_ = value;
    }
  }

  /// <summary>Field number for the "play_type" field.</summary>
  public const int PlayTypeFieldNumber = 5;
  private int playType_;
  /// <summary>
  ///  玩法类型  (0:经典	1:团团转)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayType {
    get { return playType_; }
    set {
      playType_ = value;
    }
  }

  /// <summary>Field number for the "upgrade_type" field.</summary>
  public const int UpgradeTypeFieldNumber = 6;
  private int upgradeType_;
  /// <summary>
  ///  升级类型[经典玩法]  (0:双下升三级	1:双下升四级)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UpgradeType {
    get { return upgradeType_; }
    set {
      upgradeType_ = value;
    }
  }

  /// <summary>Field number for the "straight_flush" field.</summary>
  public const int StraightFlushFieldNumber = 7;
  private int straightFlush_;
  /// <summary>
  ///  同花顺翻倍
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StraightFlush {
    get { return straightFlush_; }
    set {
      straightFlush_ = value;
    }
  }

  /// <summary>Field number for the "six_bomb_double" field.</summary>
  public const int SixBombDoubleFieldNumber = 8;
  private int sixBombDouble_;
  /// <summary>
  ///  六炸以上炸弹赢翻倍
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SixBombDouble {
    get { return sixBombDouble_; }
    set {
      sixBombDouble_ = value;
    }
  }

  /// <summary>Field number for the "six_bomb_lottery" field.</summary>
  public const int SixBombLotteryFieldNumber = 9;
  private int sixBombLottery_;
  /// <summary>
  ///  六炸以上炸弹赢彩金
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SixBombLottery {
    get { return sixBombLottery_; }
    set {
      sixBombLottery_ = value;
    }
  }

  /// <summary>Field number for the "remian_card" field.</summary>
  public const int RemianCardFieldNumber = 10;
  private int remianCard_;
  /// <summary>
  ///  剩余几张牌时报牌 (0:6张 1:10张 2:始终)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RemianCard {
    get { return remianCard_; }
    set {
      remianCard_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSTableRule);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSTableRule other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerCount != other.PlayerCount) return false;
    if (Round != other.Round) return false;
    if (TimeThink != other.TimeThink) return false;
    if (CurRound != other.CurRound) return false;
    if (PlayType != other.PlayType) return false;
    if (UpgradeType != other.UpgradeType) return false;
    if (StraightFlush != other.StraightFlush) return false;
    if (SixBombDouble != other.SixBombDouble) return false;
    if (SixBombLottery != other.SixBombLottery) return false;
    if (RemianCard != other.RemianCard) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerCount != 0) hash ^= PlayerCount.GetHashCode();
    if (Round != 0) hash ^= Round.GetHashCode();
    if (TimeThink != 0) hash ^= TimeThink.GetHashCode();
    if (CurRound != 0) hash ^= CurRound.GetHashCode();
    if (PlayType != 0) hash ^= PlayType.GetHashCode();
    if (UpgradeType != 0) hash ^= UpgradeType.GetHashCode();
    if (StraightFlush != 0) hash ^= StraightFlush.GetHashCode();
    if (SixBombDouble != 0) hash ^= SixBombDouble.GetHashCode();
    if (SixBombLottery != 0) hash ^= SixBombLottery.GetHashCode();
    if (RemianCard != 0) hash ^= RemianCard.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerCount != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerCount);
    }
    if (Round != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Round);
    }
    if (TimeThink != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TimeThink);
    }
    if (CurRound != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(CurRound);
    }
    if (PlayType != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(PlayType);
    }
    if (UpgradeType != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(UpgradeType);
    }
    if (StraightFlush != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(StraightFlush);
    }
    if (SixBombDouble != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(SixBombDouble);
    }
    if (SixBombLottery != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(SixBombLottery);
    }
    if (RemianCard != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(RemianCard);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerCount);
    }
    if (Round != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
    }
    if (TimeThink != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeThink);
    }
    if (CurRound != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurRound);
    }
    if (PlayType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayType);
    }
    if (UpgradeType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpgradeType);
    }
    if (StraightFlush != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StraightFlush);
    }
    if (SixBombDouble != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SixBombDouble);
    }
    if (SixBombLottery != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SixBombLottery);
    }
    if (RemianCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemianCard);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSTableRule other) {
    if (other == null) {
      return;
    }
    if (other.PlayerCount != 0) {
      PlayerCount = other.PlayerCount;
    }
    if (other.Round != 0) {
      Round = other.Round;
    }
    if (other.TimeThink != 0) {
      TimeThink = other.TimeThink;
    }
    if (other.CurRound != 0) {
      CurRound = other.CurRound;
    }
    if (other.PlayType != 0) {
      PlayType = other.PlayType;
    }
    if (other.UpgradeType != 0) {
      UpgradeType = other.UpgradeType;
    }
    if (other.StraightFlush != 0) {
      StraightFlush = other.StraightFlush;
    }
    if (other.SixBombDouble != 0) {
      SixBombDouble = other.SixBombDouble;
    }
    if (other.SixBombLottery != 0) {
      SixBombLottery = other.SixBombLottery;
    }
    if (other.RemianCard != 0) {
      RemianCard = other.RemianCard;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PlayerCount = input.ReadInt32();
          break;
        }
        case 16: {
          Round = input.ReadInt32();
          break;
        }
        case 24: {
          TimeThink = input.ReadInt32();
          break;
        }
        case 32: {
          CurRound = input.ReadInt32();
          break;
        }
        case 40: {
          PlayType = input.ReadInt32();
          break;
        }
        case 48: {
          UpgradeType = input.ReadInt32();
          break;
        }
        case 56: {
          StraightFlush = input.ReadInt32();
          break;
        }
        case 64: {
          SixBombDouble = input.ReadInt32();
          break;
        }
        case 72: {
          SixBombLottery = input.ReadInt32();
          break;
        }
        case 80: {
          RemianCard = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GD_CGSGameEnterAck : pb::IMessage<GD_CGSGameEnterAck> {
  private static readonly pb::MessageParser<GD_CGSGameEnterAck> _parser = new pb::MessageParser<GD_CGSGameEnterAck>(() => new GD_CGSGameEnterAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSGameEnterAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[85]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameEnterAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameEnterAck(GD_CGSGameEnterAck other) : this() {
    result_ = other.result_;
    statusGame_ = other.statusGame_;
    seat_ = other.seat_;
    pis_ = other.pis_.Clone();
    Ptr = other.ptr_ != null ? other.Ptr.Clone() : null;
    ruleStr_ = other.ruleStr_;
    GameInfo = other.gameInfo_ != null ? other.GameInfo.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameEnterAck Clone() {
    return new GD_CGSGameEnterAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "status_game" field.</summary>
  public const int StatusGameFieldNumber = 2;
  private int statusGame_;
  /// <summary>
  /// 游戏状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StatusGame {
    get { return statusGame_; }
    set {
      statusGame_ = value;
    }
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 3;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "pis" field.</summary>
  public const int PisFieldNumber = 4;
  private static readonly pb::FieldCodec<global::GD_CGSPlayerInfo> _repeated_pis_codec
      = pb::FieldCodec.ForMessage(34, global::GD_CGSPlayerInfo.Parser);
  private readonly pbc::RepeatedField<global::GD_CGSPlayerInfo> pis_ = new pbc::RepeatedField<global::GD_CGSPlayerInfo>();
  /// <summary>
  /// 用户信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GD_CGSPlayerInfo> Pis {
    get { return pis_; }
  }

  /// <summary>Field number for the "ptr" field.</summary>
  public const int PtrFieldNumber = 5;
  private global::GD_CGSTableRule ptr_;
  /// <summary>
  /// 桌子规则
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GD_CGSTableRule Ptr {
    get { return ptr_; }
    set {
      ptr_ = value;
    }
  }

  /// <summary>Field number for the "rule_str" field.</summary>
  public const int RuleStrFieldNumber = 6;
  private string ruleStr_ = "";
  /// <summary>
  /// 桌子属性字符串 空格隔开
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RuleStr {
    get { return ruleStr_; }
    set {
      ruleStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "game_info" field.</summary>
  public const int GameInfoFieldNumber = 7;
  private global::GD_CGSGameInfoReal gameInfo_;
  /// <summary>
  /// 游戏信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GD_CGSGameInfoReal GameInfo {
    get { return gameInfo_; }
    set {
      gameInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSGameEnterAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSGameEnterAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (StatusGame != other.StatusGame) return false;
    if (Seat != other.Seat) return false;
    if(!pis_.Equals(other.pis_)) return false;
    if (!object.Equals(Ptr, other.Ptr)) return false;
    if (RuleStr != other.RuleStr) return false;
    if (!object.Equals(GameInfo, other.GameInfo)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (StatusGame != 0) hash ^= StatusGame.GetHashCode();
    if (Seat != 0) hash ^= Seat.GetHashCode();
    hash ^= pis_.GetHashCode();
    if (ptr_ != null) hash ^= Ptr.GetHashCode();
    if (RuleStr.Length != 0) hash ^= RuleStr.GetHashCode();
    if (gameInfo_ != null) hash ^= GameInfo.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (StatusGame != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(StatusGame);
    }
    if (Seat != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Seat);
    }
    pis_.WriteTo(output, _repeated_pis_codec);
    if (ptr_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Ptr);
    }
    if (RuleStr.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(RuleStr);
    }
    if (gameInfo_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(GameInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (StatusGame != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusGame);
    }
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    size += pis_.CalculateSize(_repeated_pis_codec);
    if (ptr_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ptr);
    }
    if (RuleStr.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RuleStr);
    }
    if (gameInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameInfo);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSGameEnterAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.StatusGame != 0) {
      StatusGame = other.StatusGame;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    pis_.Add(other.pis_);
    if (other.ptr_ != null) {
      if (ptr_ == null) {
        ptr_ = new global::GD_CGSTableRule();
      }
      Ptr.MergeFrom(other.Ptr);
    }
    if (other.RuleStr.Length != 0) {
      RuleStr = other.RuleStr;
    }
    if (other.gameInfo_ != null) {
      if (gameInfo_ == null) {
        gameInfo_ = new global::GD_CGSGameInfoReal();
      }
      GameInfo.MergeFrom(other.GameInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          StatusGame = input.ReadInt32();
          break;
        }
        case 24: {
          Seat = input.ReadInt32();
          break;
        }
        case 34: {
          pis_.AddEntriesFrom(input, _repeated_pis_codec);
          break;
        }
        case 42: {
          if (ptr_ == null) {
            ptr_ = new global::GD_CGSTableRule();
          }
          input.ReadMessage(ptr_);
          break;
        }
        case 50: {
          RuleStr = input.ReadString();
          break;
        }
        case 58: {
          if (gameInfo_ == null) {
            gameInfo_ = new global::GD_CGSGameInfoReal();
          }
          input.ReadMessage(gameInfo_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_CLI_GS_REQ_PLAYERREADY       
/// 准备就绪
/// </summary>
public sealed partial class GD_CGSPlayerReadyReq : pb::IMessage<GD_CGSPlayerReadyReq> {
  private static readonly pb::MessageParser<GD_CGSPlayerReadyReq> _parser = new pb::MessageParser<GD_CGSPlayerReadyReq>(() => new GD_CGSPlayerReadyReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSPlayerReadyReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[86]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerReadyReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerReadyReq(GD_CGSPlayerReadyReq other) : this() {
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerReadyReq Clone() {
    return new GD_CGSPlayerReadyReq(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///  0:准备  2:取消准备
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSPlayerReadyReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSPlayerReadyReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSPlayerReadyReq other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GD_CGSPlayerReadyAck : pb::IMessage<GD_CGSPlayerReadyAck> {
  private static readonly pb::MessageParser<GD_CGSPlayerReadyAck> _parser = new pb::MessageParser<GD_CGSPlayerReadyAck>(() => new GD_CGSPlayerReadyAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSPlayerReadyAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[87]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerReadyAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerReadyAck(GD_CGSPlayerReadyAck other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerReadyAck Clone() {
    return new GD_CGSPlayerReadyAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSPlayerReadyAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSPlayerReadyAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSPlayerReadyAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_CLI_GS_REQ_TAKEOUT           
/// 出牌
/// </summary>
public sealed partial class GD_CGSTakeoutCardReq : pb::IMessage<GD_CGSTakeoutCardReq> {
  private static readonly pb::MessageParser<GD_CGSTakeoutCardReq> _parser = new pb::MessageParser<GD_CGSTakeoutCardReq>(() => new GD_CGSTakeoutCardReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSTakeoutCardReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[88]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTakeoutCardReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTakeoutCardReq(GD_CGSTakeoutCardReq other) : this() {
    cards_ = other.cards_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTakeoutCardReq Clone() {
    return new GD_CGSTakeoutCardReq(this);
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_cards_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 出牌数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Cards {
    get { return cards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSTakeoutCardReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSTakeoutCardReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cards_.Equals(other.cards_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cards_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cards_.WriteTo(output, _repeated_cards_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cards_.CalculateSize(_repeated_cards_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSTakeoutCardReq other) {
    if (other == null) {
      return;
    }
    cards_.Add(other.cards_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class GD_CGSTakeoutCardAck : pb::IMessage<GD_CGSTakeoutCardAck> {
  private static readonly pb::MessageParser<GD_CGSTakeoutCardAck> _parser = new pb::MessageParser<GD_CGSTakeoutCardAck>(() => new GD_CGSTakeoutCardAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSTakeoutCardAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[89]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTakeoutCardAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTakeoutCardAck(GD_CGSTakeoutCardAck other) : this() {
    result_ = other.result_;
    selfCardInfo_ = other.selfCardInfo_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTakeoutCardAck Clone() {
    return new GD_CGSTakeoutCardAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "self_card_info" field.</summary>
  public const int SelfCardInfoFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_selfCardInfo_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> selfCardInfo_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 玩家自己手牌信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> SelfCardInfo {
    get { return selfCardInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSTakeoutCardAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSTakeoutCardAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!selfCardInfo_.Equals(other.selfCardInfo_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= selfCardInfo_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    selfCardInfo_.WriteTo(output, _repeated_selfCardInfo_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += selfCardInfo_.CalculateSize(_repeated_selfCardInfo_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSTakeoutCardAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    selfCardInfo_.Add(other.selfCardInfo_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          selfCardInfo_.AddEntriesFrom(input, _repeated_selfCardInfo_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_STATUSUPDATE      
/// 游戏状态
/// </summary>
public sealed partial class GD_CGSStatusUpdateNtf : pb::IMessage<GD_CGSStatusUpdateNtf> {
  private static readonly pb::MessageParser<GD_CGSStatusUpdateNtf> _parser = new pb::MessageParser<GD_CGSStatusUpdateNtf>(() => new GD_CGSStatusUpdateNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSStatusUpdateNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[90]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSStatusUpdateNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSStatusUpdateNtf(GD_CGSStatusUpdateNtf other) : this() {
    statusGame_ = other.statusGame_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSStatusUpdateNtf Clone() {
    return new GD_CGSStatusUpdateNtf(this);
  }

  /// <summary>Field number for the "status_game" field.</summary>
  public const int StatusGameFieldNumber = 1;
  private int statusGame_;
  /// <summary>
  /// 游戏当前状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StatusGame {
    get { return statusGame_; }
    set {
      statusGame_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSStatusUpdateNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSStatusUpdateNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StatusGame != other.StatusGame) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StatusGame != 0) hash ^= StatusGame.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StatusGame != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(StatusGame);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StatusGame != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusGame);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSStatusUpdateNtf other) {
    if (other == null) {
      return;
    }
    if (other.StatusGame != 0) {
      StatusGame = other.StatusGame;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          StatusGame = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_PLYONLINE         
/// 上线
/// </summary>
public sealed partial class GD_CGSPlayerOnLineNtf : pb::IMessage<GD_CGSPlayerOnLineNtf> {
  private static readonly pb::MessageParser<GD_CGSPlayerOnLineNtf> _parser = new pb::MessageParser<GD_CGSPlayerOnLineNtf>(() => new GD_CGSPlayerOnLineNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSPlayerOnLineNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[91]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerOnLineNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerOnLineNtf(GD_CGSPlayerOnLineNtf other) : this() {
    seat_ = other.seat_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerOnLineNtf Clone() {
    return new GD_CGSPlayerOnLineNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 用户座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSPlayerOnLineNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSPlayerOnLineNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSPlayerOnLineNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_PLYOFFLINE        
/// 离线
/// </summary>
public sealed partial class GD_CGSPlayerOffLineNtf : pb::IMessage<GD_CGSPlayerOffLineNtf> {
  private static readonly pb::MessageParser<GD_CGSPlayerOffLineNtf> _parser = new pb::MessageParser<GD_CGSPlayerOffLineNtf>(() => new GD_CGSPlayerOffLineNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSPlayerOffLineNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[92]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerOffLineNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerOffLineNtf(GD_CGSPlayerOffLineNtf other) : this() {
    seat_ = other.seat_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerOffLineNtf Clone() {
    return new GD_CGSPlayerOffLineNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSPlayerOffLineNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSPlayerOffLineNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSPlayerOffLineNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_PLYREADY          
/// 准备
/// </summary>
public sealed partial class GD_CGSPlayerReadyNtf : pb::IMessage<GD_CGSPlayerReadyNtf> {
  private static readonly pb::MessageParser<GD_CGSPlayerReadyNtf> _parser = new pb::MessageParser<GD_CGSPlayerReadyNtf>(() => new GD_CGSPlayerReadyNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSPlayerReadyNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[93]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerReadyNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerReadyNtf(GD_CGSPlayerReadyNtf other) : this() {
    seat_ = other.seat_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSPlayerReadyNtf Clone() {
    return new GD_CGSPlayerReadyNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSPlayerReadyNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSPlayerReadyNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSPlayerReadyNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_DEALCARD          
/// 发牌
/// </summary>
public sealed partial class GD_CGSDealCardNtf : pb::IMessage<GD_CGSDealCardNtf> {
  private static readonly pb::MessageParser<GD_CGSDealCardNtf> _parser = new pb::MessageParser<GD_CGSDealCardNtf>(() => new GD_CGSDealCardNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSDealCardNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[94]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSDealCardNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSDealCardNtf(GD_CGSDealCardNtf other) : this() {
    seat_ = other.seat_;
    whetherTribute_ = other.whetherTribute_;
    curCard_ = other.curCard_;
    CardHand = other.cardHand_ != null ? other.CardHand.Clone() : null;
    scoreBothParties_ = other.scoreBothParties_.Clone();
    mingCardSeat_ = other.mingCardSeat_.Clone();
    operateType_ = other.operateType_;
    mingCard_ = other.mingCard_;
    changePosSeat_ = other.changePosSeat_.Clone();
    curPowerPos_ = other.curPowerPos_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSDealCardNtf Clone() {
    return new GD_CGSDealCardNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  ///  第一个出牌座位
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "whether_tribute" field.</summary>
  public const int WhetherTributeFieldNumber = 2;
  private int whetherTribute_;
  /// <summary>
  ///  当前是否需要进贡(0:为不需要 1:需要进贡 2:需要还贡 3:抗贡)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WhetherTribute {
    get { return whetherTribute_; }
    set {
      whetherTribute_ = value;
    }
  }

  /// <summary>Field number for the "cur_card" field.</summary>
  public const int CurCardFieldNumber = 3;
  private int curCard_;
  /// <summary>
  ///  当前是打几的牌[例如:1和3号玩家赢的话，打1和3玩家当前达到的位置]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurCard {
    get { return curCard_; }
    set {
      curCard_ = value;
    }
  }

  /// <summary>Field number for the "card_hand" field.</summary>
  public const int CardHandFieldNumber = 4;
  private global::GD_CGSHandCardItem cardHand_;
  /// <summary>
  ///  所有用户的手牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GD_CGSHandCardItem CardHand {
    get { return cardHand_; }
    set {
      cardHand_ = value;
    }
  }

  /// <summary>Field number for the "score_both_parties" field.</summary>
  public const int ScoreBothPartiesFieldNumber = 5;
  private static readonly pb::FieldCodec<int> _repeated_scoreBothParties_codec
      = pb::FieldCodec.ForInt32(42);
  private readonly pbc::RepeatedField<int> scoreBothParties_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///  当前两家达到的牌数[0:位置为1和3号玩家 1:位置为2和4号玩家]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> ScoreBothParties {
    get { return scoreBothParties_; }
  }

  /// <summary>Field number for the "ming_card_seat" field.</summary>
  public const int MingCardSeatFieldNumber = 6;
  private static readonly pb::FieldCodec<int> _repeated_mingCardSeat_codec
      = pb::FieldCodec.ForInt32(50);
  private readonly pbc::RepeatedField<int> mingCardSeat_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///  明牌的玩家
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> MingCardSeat {
    get { return mingCardSeat_; }
  }

  /// <summary>Field number for the "operate_type" field.</summary>
  public const int OperateTypeFieldNumber = 7;
  private int operateType_;
  /// <summary>
  ///  操作类型 1 &lt;&lt; 0:出牌,1 &lt;&lt; 1:过牌 两值合并, 1 + 1 &lt;&lt; 1 = 3 既能出牌又能过牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OperateType {
    get { return operateType_; }
    set {
      operateType_ = value;
    }
  }

  /// <summary>Field number for the "ming_card" field.</summary>
  public const int MingCardFieldNumber = 8;
  private int mingCard_;
  /// <summary>
  ///  明牌的牌值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MingCard {
    get { return mingCard_; }
    set {
      mingCard_ = value;
    }
  }

  /// <summary>Field number for the "change_pos_seat" field.</summary>
  public const int ChangePosSeatFieldNumber = 9;
  private static readonly pb::FieldCodec<int> _repeated_changePosSeat_codec
      = pb::FieldCodec.ForInt32(74);
  private readonly pbc::RepeatedField<int> changePosSeat_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///  需要转换座位的玩家
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> ChangePosSeat {
    get { return changePosSeat_; }
  }

  /// <summary>Field number for the "cur_power_pos" field.</summary>
  public const int CurPowerPosFieldNumber = 10;
  private int curPowerPos_;
  /// <summary>
  ///  当前活跃的位置[例如:1和3号为1，2和4号为2, 0为默认开始]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurPowerPos {
    get { return curPowerPos_; }
    set {
      curPowerPos_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSDealCardNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSDealCardNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (WhetherTribute != other.WhetherTribute) return false;
    if (CurCard != other.CurCard) return false;
    if (!object.Equals(CardHand, other.CardHand)) return false;
    if(!scoreBothParties_.Equals(other.scoreBothParties_)) return false;
    if(!mingCardSeat_.Equals(other.mingCardSeat_)) return false;
    if (OperateType != other.OperateType) return false;
    if (MingCard != other.MingCard) return false;
    if(!changePosSeat_.Equals(other.changePosSeat_)) return false;
    if (CurPowerPos != other.CurPowerPos) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (WhetherTribute != 0) hash ^= WhetherTribute.GetHashCode();
    if (CurCard != 0) hash ^= CurCard.GetHashCode();
    if (cardHand_ != null) hash ^= CardHand.GetHashCode();
    hash ^= scoreBothParties_.GetHashCode();
    hash ^= mingCardSeat_.GetHashCode();
    if (OperateType != 0) hash ^= OperateType.GetHashCode();
    if (MingCard != 0) hash ^= MingCard.GetHashCode();
    hash ^= changePosSeat_.GetHashCode();
    if (CurPowerPos != 0) hash ^= CurPowerPos.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (WhetherTribute != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(WhetherTribute);
    }
    if (CurCard != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(CurCard);
    }
    if (cardHand_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(CardHand);
    }
    scoreBothParties_.WriteTo(output, _repeated_scoreBothParties_codec);
    mingCardSeat_.WriteTo(output, _repeated_mingCardSeat_codec);
    if (OperateType != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(OperateType);
    }
    if (MingCard != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(MingCard);
    }
    changePosSeat_.WriteTo(output, _repeated_changePosSeat_codec);
    if (CurPowerPos != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(CurPowerPos);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (WhetherTribute != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WhetherTribute);
    }
    if (CurCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurCard);
    }
    if (cardHand_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardHand);
    }
    size += scoreBothParties_.CalculateSize(_repeated_scoreBothParties_codec);
    size += mingCardSeat_.CalculateSize(_repeated_mingCardSeat_codec);
    if (OperateType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperateType);
    }
    if (MingCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MingCard);
    }
    size += changePosSeat_.CalculateSize(_repeated_changePosSeat_codec);
    if (CurPowerPos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurPowerPos);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSDealCardNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.WhetherTribute != 0) {
      WhetherTribute = other.WhetherTribute;
    }
    if (other.CurCard != 0) {
      CurCard = other.CurCard;
    }
    if (other.cardHand_ != null) {
      if (cardHand_ == null) {
        cardHand_ = new global::GD_CGSHandCardItem();
      }
      CardHand.MergeFrom(other.CardHand);
    }
    scoreBothParties_.Add(other.scoreBothParties_);
    mingCardSeat_.Add(other.mingCardSeat_);
    if (other.OperateType != 0) {
      OperateType = other.OperateType;
    }
    if (other.MingCard != 0) {
      MingCard = other.MingCard;
    }
    changePosSeat_.Add(other.changePosSeat_);
    if (other.CurPowerPos != 0) {
      CurPowerPos = other.CurPowerPos;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 16: {
          WhetherTribute = input.ReadInt32();
          break;
        }
        case 24: {
          CurCard = input.ReadInt32();
          break;
        }
        case 34: {
          if (cardHand_ == null) {
            cardHand_ = new global::GD_CGSHandCardItem();
          }
          input.ReadMessage(cardHand_);
          break;
        }
        case 42:
        case 40: {
          scoreBothParties_.AddEntriesFrom(input, _repeated_scoreBothParties_codec);
          break;
        }
        case 50:
        case 48: {
          mingCardSeat_.AddEntriesFrom(input, _repeated_mingCardSeat_codec);
          break;
        }
        case 56: {
          OperateType = input.ReadInt32();
          break;
        }
        case 64: {
          MingCard = input.ReadInt32();
          break;
        }
        case 74:
        case 72: {
          changePosSeat_.AddEntriesFrom(input, _repeated_changePosSeat_codec);
          break;
        }
        case 80: {
          CurPowerPos = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ******************************************************************************************//
/// #define CGS_MSG_GS_CLI_NTF_OPERATEGONG         // 需进贡模式下，玩家发送的进贡消息
/// </summary>
public sealed partial class GD_CGSAckOperateDataNtf : pb::IMessage<GD_CGSAckOperateDataNtf> {
  private static readonly pb::MessageParser<GD_CGSAckOperateDataNtf> _parser = new pb::MessageParser<GD_CGSAckOperateDataNtf>(() => new GD_CGSAckOperateDataNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSAckOperateDataNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[95]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSAckOperateDataNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSAckOperateDataNtf(GD_CGSAckOperateDataNtf other) : this() {
    tributeSeat_ = other.tributeSeat_;
    tributeCard_ = other.tributeCard_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSAckOperateDataNtf Clone() {
    return new GD_CGSAckOperateDataNtf(this);
  }

  /// <summary>Field number for the "tribute_seat" field.</summary>
  public const int TributeSeatFieldNumber = 1;
  private int tributeSeat_;
  /// <summary>
  ///  进贡玩家座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TributeSeat {
    get { return tributeSeat_; }
    set {
      tributeSeat_ = value;
    }
  }

  /// <summary>Field number for the "tribute_card" field.</summary>
  public const int TributeCardFieldNumber = 2;
  private int tributeCard_;
  /// <summary>
  ///  进贡玩家进贡的牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TributeCard {
    get { return tributeCard_; }
    set {
      tributeCard_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSAckOperateDataNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSAckOperateDataNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TributeSeat != other.TributeSeat) return false;
    if (TributeCard != other.TributeCard) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TributeSeat != 0) hash ^= TributeSeat.GetHashCode();
    if (TributeCard != 0) hash ^= TributeCard.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TributeSeat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TributeSeat);
    }
    if (TributeCard != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TributeCard);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TributeSeat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TributeSeat);
    }
    if (TributeCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TributeCard);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSAckOperateDataNtf other) {
    if (other == null) {
      return;
    }
    if (other.TributeSeat != 0) {
      TributeSeat = other.TributeSeat;
    }
    if (other.TributeCard != 0) {
      TributeCard = other.TributeCard;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          TributeSeat = input.ReadInt32();
          break;
        }
        case 16: {
          TributeCard = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// 进贡
/// #define GD_CGS_MSG_CLI_GS_REQ_       
/// </summary>
public sealed partial class GD_CGSOperateDataNtf : pb::IMessage<GD_CGSOperateDataNtf> {
  private static readonly pb::MessageParser<GD_CGSOperateDataNtf> _parser = new pb::MessageParser<GD_CGSOperateDataNtf>(() => new GD_CGSOperateDataNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSOperateDataNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[96]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSOperateDataNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSOperateDataNtf(GD_CGSOperateDataNtf other) : this() {
    tributeSeat_ = other.tributeSeat_;
    tributeCard_ = other.tributeCard_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSOperateDataNtf Clone() {
    return new GD_CGSOperateDataNtf(this);
  }

  /// <summary>Field number for the "tribute_seat" field.</summary>
  public const int TributeSeatFieldNumber = 1;
  private int tributeSeat_;
  /// <summary>
  ///  进贡玩家座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TributeSeat {
    get { return tributeSeat_; }
    set {
      tributeSeat_ = value;
    }
  }

  /// <summary>Field number for the "tribute_card" field.</summary>
  public const int TributeCardFieldNumber = 2;
  private int tributeCard_;
  /// <summary>
  ///  进贡玩家进贡的牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TributeCard {
    get { return tributeCard_; }
    set {
      tributeCard_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSOperateDataNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSOperateDataNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TributeSeat != other.TributeSeat) return false;
    if (TributeCard != other.TributeCard) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TributeSeat != 0) hash ^= TributeSeat.GetHashCode();
    if (TributeCard != 0) hash ^= TributeCard.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TributeSeat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TributeSeat);
    }
    if (TributeCard != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TributeCard);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TributeSeat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TributeSeat);
    }
    if (TributeCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TributeCard);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSOperateDataNtf other) {
    if (other == null) {
      return;
    }
    if (other.TributeSeat != 0) {
      TributeSeat = other.TributeSeat;
    }
    if (other.TributeCard != 0) {
      TributeCard = other.TributeCard;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          TributeSeat = input.ReadInt32();
          break;
        }
        case 16: {
          TributeCard = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ******************************************************************************************//
/// #define CGS_MSG_GS_CLI_NTF_OPERATEGONG         // 需进贡模式下，玩家发送的进贡消息
/// </summary>
public sealed partial class GD_CGSTributeNtf : pb::IMessage<GD_CGSTributeNtf> {
  private static readonly pb::MessageParser<GD_CGSTributeNtf> _parser = new pb::MessageParser<GD_CGSTributeNtf>(() => new GD_CGSTributeNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSTributeNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[97]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTributeNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTributeNtf(GD_CGSTributeNtf other) : this() {
    tributeSeat_ = other.tributeSeat_.Clone();
    tributeCard_ = other.tributeCard_.Clone();
    huangongSeat_ = other.huangongSeat_.Clone();
    huangongCard_ = other.huangongCard_.Clone();
    activeSeat_ = other.activeSeat_;
    timeThink_ = other.timeThink_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTributeNtf Clone() {
    return new GD_CGSTributeNtf(this);
  }

  /// <summary>Field number for the "tribute_seat" field.</summary>
  public const int TributeSeatFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_tributeSeat_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> tributeSeat_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///  进贡玩家座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> TributeSeat {
    get { return tributeSeat_; }
  }

  /// <summary>Field number for the "tribute_card" field.</summary>
  public const int TributeCardFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_tributeCard_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> tributeCard_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///  进贡玩家进贡的牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> TributeCard {
    get { return tributeCard_; }
  }

  /// <summary>Field number for the "huangong_seat" field.</summary>
  public const int HuangongSeatFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_huangongSeat_codec
      = pb::FieldCodec.ForInt32(26);
  private readonly pbc::RepeatedField<int> huangongSeat_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///  还贡玩家的座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> HuangongSeat {
    get { return huangongSeat_; }
  }

  /// <summary>Field number for the "huangong_card" field.</summary>
  public const int HuangongCardFieldNumber = 4;
  private static readonly pb::FieldCodec<int> _repeated_huangongCard_codec
      = pb::FieldCodec.ForInt32(34);
  private readonly pbc::RepeatedField<int> huangongCard_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///  还贡玩家还贡的牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> HuangongCard {
    get { return huangongCard_; }
  }

  /// <summary>Field number for the "active_seat" field.</summary>
  public const int ActiveSeatFieldNumber = 5;
  private int activeSeat_;
  /// <summary>
  ///  当前出牌玩家座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ActiveSeat {
    get { return activeSeat_; }
    set {
      activeSeat_ = value;
    }
  }

  /// <summary>Field number for the "time_think" field.</summary>
  public const int TimeThinkFieldNumber = 6;
  private int timeThink_;
  /// <summary>
  ///  首出玩家出牌思考时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeThink {
    get { return timeThink_; }
    set {
      timeThink_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSTributeNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSTributeNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!tributeSeat_.Equals(other.tributeSeat_)) return false;
    if(!tributeCard_.Equals(other.tributeCard_)) return false;
    if(!huangongSeat_.Equals(other.huangongSeat_)) return false;
    if(!huangongCard_.Equals(other.huangongCard_)) return false;
    if (ActiveSeat != other.ActiveSeat) return false;
    if (TimeThink != other.TimeThink) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= tributeSeat_.GetHashCode();
    hash ^= tributeCard_.GetHashCode();
    hash ^= huangongSeat_.GetHashCode();
    hash ^= huangongCard_.GetHashCode();
    if (ActiveSeat != 0) hash ^= ActiveSeat.GetHashCode();
    if (TimeThink != 0) hash ^= TimeThink.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    tributeSeat_.WriteTo(output, _repeated_tributeSeat_codec);
    tributeCard_.WriteTo(output, _repeated_tributeCard_codec);
    huangongSeat_.WriteTo(output, _repeated_huangongSeat_codec);
    huangongCard_.WriteTo(output, _repeated_huangongCard_codec);
    if (ActiveSeat != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(ActiveSeat);
    }
    if (TimeThink != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(TimeThink);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += tributeSeat_.CalculateSize(_repeated_tributeSeat_codec);
    size += tributeCard_.CalculateSize(_repeated_tributeCard_codec);
    size += huangongSeat_.CalculateSize(_repeated_huangongSeat_codec);
    size += huangongCard_.CalculateSize(_repeated_huangongCard_codec);
    if (ActiveSeat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveSeat);
    }
    if (TimeThink != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeThink);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSTributeNtf other) {
    if (other == null) {
      return;
    }
    tributeSeat_.Add(other.tributeSeat_);
    tributeCard_.Add(other.tributeCard_);
    huangongSeat_.Add(other.huangongSeat_);
    huangongCard_.Add(other.huangongCard_);
    if (other.ActiveSeat != 0) {
      ActiveSeat = other.ActiveSeat;
    }
    if (other.TimeThink != 0) {
      TimeThink = other.TimeThink;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          tributeSeat_.AddEntriesFrom(input, _repeated_tributeSeat_codec);
          break;
        }
        case 18:
        case 16: {
          tributeCard_.AddEntriesFrom(input, _repeated_tributeCard_codec);
          break;
        }
        case 26:
        case 24: {
          huangongSeat_.AddEntriesFrom(input, _repeated_huangongSeat_codec);
          break;
        }
        case 34:
        case 32: {
          huangongCard_.AddEntriesFrom(input, _repeated_huangongCard_codec);
          break;
        }
        case 40: {
          ActiveSeat = input.ReadInt32();
          break;
        }
        case 48: {
          TimeThink = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// </summary>
public sealed partial class GD_CGSTribudeAck : pb::IMessage<GD_CGSTribudeAck> {
  private static readonly pb::MessageParser<GD_CGSTribudeAck> _parser = new pb::MessageParser<GD_CGSTribudeAck>(() => new GD_CGSTribudeAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSTribudeAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[98]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTribudeAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTribudeAck(GD_CGSTribudeAck other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTribudeAck Clone() {
    return new GD_CGSTribudeAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSTribudeAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSTribudeAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSTribudeAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_TAKEOUT			
/// 出牌
/// </summary>
public sealed partial class GD_CGSTakeoutCardNtf : pb::IMessage<GD_CGSTakeoutCardNtf> {
  private static readonly pb::MessageParser<GD_CGSTakeoutCardNtf> _parser = new pb::MessageParser<GD_CGSTakeoutCardNtf>(() => new GD_CGSTakeoutCardNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSTakeoutCardNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[99]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTakeoutCardNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTakeoutCardNtf(GD_CGSTakeoutCardNtf other) : this() {
    seat_ = other.seat_;
    seatNext_ = other.seatNext_;
    timeThink_ = other.timeThink_;
    cardsTakeout_ = other.cardsTakeout_.Clone();
    multiple_ = other.multiple_;
    bombCount_ = other.bombCount_;
    remainderCard_ = other.remainderCard_.Clone();
    seatRanking_ = other.seatRanking_.Clone();
    OppositeCards = other.oppositeCards_ != null ? other.OppositeCards.Clone() : null;
    operateType_ = other.operateType_;
    isNextLead_ = other.isNextLead_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSTakeoutCardNtf Clone() {
    return new GD_CGSTakeoutCardNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  ///  出牌座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "seat_next" field.</summary>
  public const int SeatNextFieldNumber = 2;
  private int seatNext_;
  /// <summary>
  ///  下一个出牌座位
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatNext {
    get { return seatNext_; }
    set {
      seatNext_ = value;
    }
  }

  /// <summary>Field number for the "time_think" field.</summary>
  public const int TimeThinkFieldNumber = 3;
  private int timeThink_;
  /// <summary>
  ///  下一个出牌座位思考时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeThink {
    get { return timeThink_; }
    set {
      timeThink_ = value;
    }
  }

  /// <summary>Field number for the "cards_takeout" field.</summary>
  public const int CardsTakeoutFieldNumber = 4;
  private static readonly pb::FieldCodec<int> _repeated_cardsTakeout_codec
      = pb::FieldCodec.ForInt32(34);
  private readonly pbc::RepeatedField<int> cardsTakeout_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///  出牌数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> CardsTakeout {
    get { return cardsTakeout_; }
  }

  /// <summary>Field number for the "multiple" field.</summary>
  public const int MultipleFieldNumber = 5;
  private int multiple_;
  /// <summary>
  ///  当前倍数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Multiple {
    get { return multiple_; }
    set {
      multiple_ = value;
    }
  }

  /// <summary>Field number for the "bomb_count" field.</summary>
  public const int BombCountFieldNumber = 6;
  private int bombCount_;
  /// <summary>
  ///  当前炸弹个数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BombCount {
    get { return bombCount_; }
    set {
      bombCount_ = value;
    }
  }

  /// <summary>Field number for the "remainder_card" field.</summary>
  public const int RemainderCardFieldNumber = 7;
  private static readonly pb::FieldCodec<int> _repeated_remainderCard_codec
      = pb::FieldCodec.ForInt32(58);
  private readonly pbc::RepeatedField<int> remainderCard_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///  玩家剩余手牌 序号0,1,2,3
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> RemainderCard {
    get { return remainderCard_; }
  }

  /// <summary>Field number for the "seat_ranking" field.</summary>
  public const int SeatRankingFieldNumber = 8;
  private static readonly pb::FieldCodec<int> _repeated_seatRanking_codec
      = pb::FieldCodec.ForInt32(66);
  private readonly pbc::RepeatedField<int> seatRanking_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///  玩家名次 [默认为0, 头游为1 二游为2]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> SeatRanking {
    get { return seatRanking_; }
  }

  /// <summary>Field number for the "opposite_cards" field.</summary>
  public const int OppositeCardsFieldNumber = 9;
  private global::GD_CGSHandCardItem oppositeCards_;
  /// <summary>
  ///  队友手牌 [只在自己出完牌的那一刻下发]  
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GD_CGSHandCardItem OppositeCards {
    get { return oppositeCards_; }
    set {
      oppositeCards_ = value;
    }
  }

  /// <summary>Field number for the "operate_type" field.</summary>
  public const int OperateTypeFieldNumber = 10;
  private int operateType_;
  /// <summary>
  ///  操作类型 1 &lt;&lt; 0:出牌,1 &lt;&lt; 1:过牌 两值合并, 1 + 1 &lt;&lt; 1 = 3 既能出牌又能过牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OperateType {
    get { return operateType_; }
    set {
      operateType_ = value;
    }
  }

  /// <summary>Field number for the "is_next_lead" field.</summary>
  public const int IsNextLeadFieldNumber = 11;
  private int isNextLead_;
  /// <summary>
  ///  是否领出
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsNextLead {
    get { return isNextLead_; }
    set {
      isNextLead_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSTakeoutCardNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSTakeoutCardNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (SeatNext != other.SeatNext) return false;
    if (TimeThink != other.TimeThink) return false;
    if(!cardsTakeout_.Equals(other.cardsTakeout_)) return false;
    if (Multiple != other.Multiple) return false;
    if (BombCount != other.BombCount) return false;
    if(!remainderCard_.Equals(other.remainderCard_)) return false;
    if(!seatRanking_.Equals(other.seatRanking_)) return false;
    if (!object.Equals(OppositeCards, other.OppositeCards)) return false;
    if (OperateType != other.OperateType) return false;
    if (IsNextLead != other.IsNextLead) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (SeatNext != 0) hash ^= SeatNext.GetHashCode();
    if (TimeThink != 0) hash ^= TimeThink.GetHashCode();
    hash ^= cardsTakeout_.GetHashCode();
    if (Multiple != 0) hash ^= Multiple.GetHashCode();
    if (BombCount != 0) hash ^= BombCount.GetHashCode();
    hash ^= remainderCard_.GetHashCode();
    hash ^= seatRanking_.GetHashCode();
    if (oppositeCards_ != null) hash ^= OppositeCards.GetHashCode();
    if (OperateType != 0) hash ^= OperateType.GetHashCode();
    if (IsNextLead != 0) hash ^= IsNextLead.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (SeatNext != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SeatNext);
    }
    if (TimeThink != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TimeThink);
    }
    cardsTakeout_.WriteTo(output, _repeated_cardsTakeout_codec);
    if (Multiple != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Multiple);
    }
    if (BombCount != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(BombCount);
    }
    remainderCard_.WriteTo(output, _repeated_remainderCard_codec);
    seatRanking_.WriteTo(output, _repeated_seatRanking_codec);
    if (oppositeCards_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(OppositeCards);
    }
    if (OperateType != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(OperateType);
    }
    if (IsNextLead != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(IsNextLead);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (SeatNext != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNext);
    }
    if (TimeThink != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeThink);
    }
    size += cardsTakeout_.CalculateSize(_repeated_cardsTakeout_codec);
    if (Multiple != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
    }
    if (BombCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombCount);
    }
    size += remainderCard_.CalculateSize(_repeated_remainderCard_codec);
    size += seatRanking_.CalculateSize(_repeated_seatRanking_codec);
    if (oppositeCards_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(OppositeCards);
    }
    if (OperateType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperateType);
    }
    if (IsNextLead != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsNextLead);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSTakeoutCardNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.SeatNext != 0) {
      SeatNext = other.SeatNext;
    }
    if (other.TimeThink != 0) {
      TimeThink = other.TimeThink;
    }
    cardsTakeout_.Add(other.cardsTakeout_);
    if (other.Multiple != 0) {
      Multiple = other.Multiple;
    }
    if (other.BombCount != 0) {
      BombCount = other.BombCount;
    }
    remainderCard_.Add(other.remainderCard_);
    seatRanking_.Add(other.seatRanking_);
    if (other.oppositeCards_ != null) {
      if (oppositeCards_ == null) {
        oppositeCards_ = new global::GD_CGSHandCardItem();
      }
      OppositeCards.MergeFrom(other.OppositeCards);
    }
    if (other.OperateType != 0) {
      OperateType = other.OperateType;
    }
    if (other.IsNextLead != 0) {
      IsNextLead = other.IsNextLead;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 16: {
          SeatNext = input.ReadInt32();
          break;
        }
        case 24: {
          TimeThink = input.ReadInt32();
          break;
        }
        case 34:
        case 32: {
          cardsTakeout_.AddEntriesFrom(input, _repeated_cardsTakeout_codec);
          break;
        }
        case 40: {
          Multiple = input.ReadInt32();
          break;
        }
        case 48: {
          BombCount = input.ReadInt32();
          break;
        }
        case 58:
        case 56: {
          remainderCard_.AddEntriesFrom(input, _repeated_remainderCard_codec);
          break;
        }
        case 66:
        case 64: {
          seatRanking_.AddEntriesFrom(input, _repeated_seatRanking_codec);
          break;
        }
        case 74: {
          if (oppositeCards_ == null) {
            oppositeCards_ = new global::GD_CGSHandCardItem();
          }
          input.ReadMessage(oppositeCards_);
          break;
        }
        case 80: {
          OperateType = input.ReadInt32();
          break;
        }
        case 88: {
          IsNextLead = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_BREAK			
/// 用户切出切回
/// </summary>
public sealed partial class GD_CGSBreakReqNtf : pb::IMessage<GD_CGSBreakReqNtf> {
  private static readonly pb::MessageParser<GD_CGSBreakReqNtf> _parser = new pb::MessageParser<GD_CGSBreakReqNtf>(() => new GD_CGSBreakReqNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSBreakReqNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[100]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSBreakReqNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSBreakReqNtf(GD_CGSBreakReqNtf other) : this() {
    seat_ = other.seat_;
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSBreakReqNtf Clone() {
    return new GD_CGSBreakReqNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  /// <summary>
  ///  0:切回  2:切走
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSBreakReqNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSBreakReqNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSBreakReqNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_DISMISS			
/// 用户请求解散
/// </summary>
public sealed partial class GD_CGSDismissReqNtf : pb::IMessage<GD_CGSDismissReqNtf> {
  private static readonly pb::MessageParser<GD_CGSDismissReqNtf> _parser = new pb::MessageParser<GD_CGSDismissReqNtf>(() => new GD_CGSDismissReqNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSDismissReqNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[101]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSDismissReqNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSDismissReqNtf(GD_CGSDismissReqNtf other) : this() {
    seat_ = other.seat_;
    leadSeat_ = other.leadSeat_;
    leftTime_ = other.leftTime_;
    playerDismiss_ = other.playerDismiss_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSDismissReqNtf Clone() {
    return new GD_CGSDismissReqNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 当前回复座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "lead_seat" field.</summary>
  public const int LeadSeatFieldNumber = 2;
  private int leadSeat_;
  /// <summary>
  /// 发起者座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeadSeat {
    get { return leadSeat_; }
    set {
      leadSeat_ = value;
    }
  }

  /// <summary>Field number for the "left_time" field.</summary>
  public const int LeftTimeFieldNumber = 3;
  private int leftTime_;
  /// <summary>
  /// 剩余强制解散时间 秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeftTime {
    get { return leftTime_; }
    set {
      leftTime_ = value;
    }
  }

  /// <summary>Field number for the "player_dismiss" field.</summary>
  public const int PlayerDismissFieldNumber = 4;
  private static readonly pb::FieldCodec<int> _repeated_playerDismiss_codec
      = pb::FieldCodec.ForInt32(34);
  private readonly pbc::RepeatedField<int> playerDismiss_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 所有人断线状态  是否同意解散 1 同意，2 不同意 0 未选
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> PlayerDismiss {
    get { return playerDismiss_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSDismissReqNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSDismissReqNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (LeadSeat != other.LeadSeat) return false;
    if (LeftTime != other.LeftTime) return false;
    if(!playerDismiss_.Equals(other.playerDismiss_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (LeadSeat != 0) hash ^= LeadSeat.GetHashCode();
    if (LeftTime != 0) hash ^= LeftTime.GetHashCode();
    hash ^= playerDismiss_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (LeadSeat != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(LeadSeat);
    }
    if (LeftTime != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(LeftTime);
    }
    playerDismiss_.WriteTo(output, _repeated_playerDismiss_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (LeadSeat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeadSeat);
    }
    if (LeftTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftTime);
    }
    size += playerDismiss_.CalculateSize(_repeated_playerDismiss_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSDismissReqNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.LeadSeat != 0) {
      LeadSeat = other.LeadSeat;
    }
    if (other.LeftTime != 0) {
      LeftTime = other.LeftTime;
    }
    playerDismiss_.Add(other.playerDismiss_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 16: {
          LeadSeat = input.ReadInt32();
          break;
        }
        case 24: {
          LeftTime = input.ReadInt32();
          break;
        }
        case 34:
        case 32: {
          playerDismiss_.AddEntriesFrom(input, _repeated_playerDismiss_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_GAMERESULT        
/// 游戏结果
/// </summary>
public sealed partial class GD_CGSGameUserResult : pb::IMessage<GD_CGSGameUserResult> {
  private static readonly pb::MessageParser<GD_CGSGameUserResult> _parser = new pb::MessageParser<GD_CGSGameUserResult>(() => new GD_CGSGameUserResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSGameUserResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[102]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameUserResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameUserResult(GD_CGSGameUserResult other) : this() {
    CardHand = other.cardHand_ != null ? other.CardHand.Clone() : null;
    curScore_ = other.curScore_;
    totalScore_ = other.totalScore_;
    winOrder_ = other.winOrder_;
    score510K_ = other.score510K_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameUserResult Clone() {
    return new GD_CGSGameUserResult(this);
  }

  /// <summary>Field number for the "card_hand" field.</summary>
  public const int CardHandFieldNumber = 1;
  private global::GD_CGSHandCardItem cardHand_;
  /// <summary>
  /// 玩家手牌[数组下表代表座位号]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GD_CGSHandCardItem CardHand {
    get { return cardHand_; }
    set {
      cardHand_ = value;
    }
  }

  /// <summary>Field number for the "cur_score" field.</summary>
  public const int CurScoreFieldNumber = 2;
  private int curScore_;
  /// <summary>
  /// 当前盘成绩
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurScore {
    get { return curScore_; }
    set {
      curScore_ = value;
    }
  }

  /// <summary>Field number for the "total_score" field.</summary>
  public const int TotalScoreFieldNumber = 3;
  private int totalScore_;
  /// <summary>
  /// 当前总成绩
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalScore {
    get { return totalScore_; }
    set {
      totalScore_ = value;
    }
  }

  /// <summary>Field number for the "win_order" field.</summary>
  public const int WinOrderFieldNumber = 4;
  private int winOrder_;
  /// <summary>
  /// 排名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WinOrder {
    get { return winOrder_; }
    set {
      winOrder_ = value;
    }
  }

  /// <summary>Field number for the "score_510k" field.</summary>
  public const int Score510KFieldNumber = 5;
  private int score510K_;
  /// <summary>
  /// 赢分 510k分数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Score510K {
    get { return score510K_; }
    set {
      score510K_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSGameUserResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSGameUserResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(CardHand, other.CardHand)) return false;
    if (CurScore != other.CurScore) return false;
    if (TotalScore != other.TotalScore) return false;
    if (WinOrder != other.WinOrder) return false;
    if (Score510K != other.Score510K) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (cardHand_ != null) hash ^= CardHand.GetHashCode();
    if (CurScore != 0) hash ^= CurScore.GetHashCode();
    if (TotalScore != 0) hash ^= TotalScore.GetHashCode();
    if (WinOrder != 0) hash ^= WinOrder.GetHashCode();
    if (Score510K != 0) hash ^= Score510K.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (cardHand_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(CardHand);
    }
    if (CurScore != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CurScore);
    }
    if (TotalScore != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TotalScore);
    }
    if (WinOrder != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(WinOrder);
    }
    if (Score510K != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Score510K);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (cardHand_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardHand);
    }
    if (CurScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurScore);
    }
    if (TotalScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalScore);
    }
    if (WinOrder != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinOrder);
    }
    if (Score510K != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score510K);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSGameUserResult other) {
    if (other == null) {
      return;
    }
    if (other.cardHand_ != null) {
      if (cardHand_ == null) {
        cardHand_ = new global::GD_CGSHandCardItem();
      }
      CardHand.MergeFrom(other.CardHand);
    }
    if (other.CurScore != 0) {
      CurScore = other.CurScore;
    }
    if (other.TotalScore != 0) {
      TotalScore = other.TotalScore;
    }
    if (other.WinOrder != 0) {
      WinOrder = other.WinOrder;
    }
    if (other.Score510K != 0) {
      Score510K = other.Score510K;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (cardHand_ == null) {
            cardHand_ = new global::GD_CGSHandCardItem();
          }
          input.ReadMessage(cardHand_);
          break;
        }
        case 16: {
          CurScore = input.ReadInt32();
          break;
        }
        case 24: {
          TotalScore = input.ReadInt32();
          break;
        }
        case 32: {
          WinOrder = input.ReadInt32();
          break;
        }
        case 40: {
          Score510K = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 游戏总结果
/// </summary>
public sealed partial class GD_CGSGameSumResult : pb::IMessage<GD_CGSGameSumResult> {
  private static readonly pb::MessageParser<GD_CGSGameSumResult> _parser = new pb::MessageParser<GD_CGSGameSumResult>(() => new GD_CGSGameSumResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSGameSumResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[103]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameSumResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameSumResult(GD_CGSGameSumResult other) : this() {
    highestScore_ = other.highestScore_;
    winCount_ = other.winCount_;
    failureCount_ = other.failureCount_;
    totalScore_ = other.totalScore_;
    headTourCnt_ = other.headTourCnt_;
    lastTourCnt_ = other.lastTourCnt_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameSumResult Clone() {
    return new GD_CGSGameSumResult(this);
  }

  /// <summary>Field number for the "highest_score" field.</summary>
  public const int HighestScoreFieldNumber = 1;
  private int highestScore_;
  /// <summary>
  /// 单局最高分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HighestScore {
    get { return highestScore_; }
    set {
      highestScore_ = value;
    }
  }

  /// <summary>Field number for the "win_count" field.</summary>
  public const int WinCountFieldNumber = 2;
  private int winCount_;
  /// <summary>
  /// 次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WinCount {
    get { return winCount_; }
    set {
      winCount_ = value;
    }
  }

  /// <summary>Field number for the "failure_count" field.</summary>
  public const int FailureCountFieldNumber = 3;
  private int failureCount_;
  /// <summary>
  /// 失败次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FailureCount {
    get { return failureCount_; }
    set {
      failureCount_ = value;
    }
  }

  /// <summary>Field number for the "total_score" field.</summary>
  public const int TotalScoreFieldNumber = 4;
  private int totalScore_;
  /// <summary>
  /// 当前总成绩
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalScore {
    get { return totalScore_; }
    set {
      totalScore_ = value;
    }
  }

  /// <summary>Field number for the "head_tour_cnt" field.</summary>
  public const int HeadTourCntFieldNumber = 5;
  private int headTourCnt_;
  /// <summary>
  /// 头游次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HeadTourCnt {
    get { return headTourCnt_; }
    set {
      headTourCnt_ = value;
    }
  }

  /// <summary>Field number for the "last_tour_cnt" field.</summary>
  public const int LastTourCntFieldNumber = 6;
  private int lastTourCnt_;
  /// <summary>
  /// 末游次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LastTourCnt {
    get { return lastTourCnt_; }
    set {
      lastTourCnt_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSGameSumResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSGameSumResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HighestScore != other.HighestScore) return false;
    if (WinCount != other.WinCount) return false;
    if (FailureCount != other.FailureCount) return false;
    if (TotalScore != other.TotalScore) return false;
    if (HeadTourCnt != other.HeadTourCnt) return false;
    if (LastTourCnt != other.LastTourCnt) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HighestScore != 0) hash ^= HighestScore.GetHashCode();
    if (WinCount != 0) hash ^= WinCount.GetHashCode();
    if (FailureCount != 0) hash ^= FailureCount.GetHashCode();
    if (TotalScore != 0) hash ^= TotalScore.GetHashCode();
    if (HeadTourCnt != 0) hash ^= HeadTourCnt.GetHashCode();
    if (LastTourCnt != 0) hash ^= LastTourCnt.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HighestScore != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(HighestScore);
    }
    if (WinCount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(WinCount);
    }
    if (FailureCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(FailureCount);
    }
    if (TotalScore != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TotalScore);
    }
    if (HeadTourCnt != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(HeadTourCnt);
    }
    if (LastTourCnt != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(LastTourCnt);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HighestScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HighestScore);
    }
    if (WinCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinCount);
    }
    if (FailureCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FailureCount);
    }
    if (TotalScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalScore);
    }
    if (HeadTourCnt != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadTourCnt);
    }
    if (LastTourCnt != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTourCnt);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSGameSumResult other) {
    if (other == null) {
      return;
    }
    if (other.HighestScore != 0) {
      HighestScore = other.HighestScore;
    }
    if (other.WinCount != 0) {
      WinCount = other.WinCount;
    }
    if (other.FailureCount != 0) {
      FailureCount = other.FailureCount;
    }
    if (other.TotalScore != 0) {
      TotalScore = other.TotalScore;
    }
    if (other.HeadTourCnt != 0) {
      HeadTourCnt = other.HeadTourCnt;
    }
    if (other.LastTourCnt != 0) {
      LastTourCnt = other.LastTourCnt;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          HighestScore = input.ReadInt32();
          break;
        }
        case 16: {
          WinCount = input.ReadInt32();
          break;
        }
        case 24: {
          FailureCount = input.ReadInt32();
          break;
        }
        case 32: {
          TotalScore = input.ReadInt32();
          break;
        }
        case 40: {
          HeadTourCnt = input.ReadInt32();
          break;
        }
        case 48: {
          LastTourCnt = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GD_CGSGameResultNtf : pb::IMessage<GD_CGSGameResultNtf> {
  private static readonly pb::MessageParser<GD_CGSGameResultNtf> _parser = new pb::MessageParser<GD_CGSGameResultNtf>(() => new GD_CGSGameResultNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSGameResultNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[104]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameResultNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameResultNtf(GD_CGSGameResultNtf other) : this() {
    seatWin_ = other.seatWin_;
    multipleBase_ = other.multipleBase_;
    curRound_ = other.curRound_;
    totalRound_ = other.totalRound_;
    useTime_ = other.useTime_;
    ur_ = other.ur_.Clone();
    isGameover_ = other.isGameover_;
    sur_ = other.sur_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameResultNtf Clone() {
    return new GD_CGSGameResultNtf(this);
  }

  /// <summary>Field number for the "seat_win" field.</summary>
  public const int SeatWinFieldNumber = 1;
  private int seatWin_;
  /// <summary>
  /// 座位
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatWin {
    get { return seatWin_; }
    set {
      seatWin_ = value;
    }
  }

  /// <summary>Field number for the "multiple_base" field.</summary>
  public const int MultipleBaseFieldNumber = 2;
  private int multipleBase_;
  /// <summary>
  /// 基础倍数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MultipleBase {
    get { return multipleBase_; }
    set {
      multipleBase_ = value;
    }
  }

  /// <summary>Field number for the "cur_round" field.</summary>
  public const int CurRoundFieldNumber = 3;
  private int curRound_;
  /// <summary>
  /// 当前盘
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurRound {
    get { return curRound_; }
    set {
      curRound_ = value;
    }
  }

  /// <summary>Field number for the "total_round" field.</summary>
  public const int TotalRoundFieldNumber = 4;
  private int totalRound_;
  /// <summary>
  /// 总盘数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalRound {
    get { return totalRound_; }
    set {
      totalRound_ = value;
    }
  }

  /// <summary>Field number for the "use_time" field.</summary>
  public const int UseTimeFieldNumber = 5;
  private int useTime_;
  /// <summary>
  /// 总用时秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UseTime {
    get { return useTime_; }
    set {
      useTime_ = value;
    }
  }

  /// <summary>Field number for the "ur" field.</summary>
  public const int UrFieldNumber = 6;
  private static readonly pb::FieldCodec<global::GD_CGSGameUserResult> _repeated_ur_codec
      = pb::FieldCodec.ForMessage(50, global::GD_CGSGameUserResult.Parser);
  private readonly pbc::RepeatedField<global::GD_CGSGameUserResult> ur_ = new pbc::RepeatedField<global::GD_CGSGameUserResult>();
  /// <summary>
  /// 玩家结算成绩结构 0 ,1,2 对应座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GD_CGSGameUserResult> Ur {
    get { return ur_; }
  }

  /// <summary>Field number for the "is_gameover" field.</summary>
  public const int IsGameoverFieldNumber = 7;
  private int isGameover_;
  /// <summary>
  /// 结算类型（0：小结算、1：大结算）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsGameover {
    get { return isGameover_; }
    set {
      isGameover_ = value;
    }
  }

  /// <summary>Field number for the "sur" field.</summary>
  public const int SurFieldNumber = 8;
  private static readonly pb::FieldCodec<global::GD_CGSGameSumResult> _repeated_sur_codec
      = pb::FieldCodec.ForMessage(66, global::GD_CGSGameSumResult.Parser);
  private readonly pbc::RepeatedField<global::GD_CGSGameSumResult> sur_ = new pbc::RepeatedField<global::GD_CGSGameSumResult>();
  /// <summary>
  /// 玩家结算总成绩结构 0 ,1,2 对应座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GD_CGSGameSumResult> Sur {
    get { return sur_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSGameResultNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSGameResultNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SeatWin != other.SeatWin) return false;
    if (MultipleBase != other.MultipleBase) return false;
    if (CurRound != other.CurRound) return false;
    if (TotalRound != other.TotalRound) return false;
    if (UseTime != other.UseTime) return false;
    if(!ur_.Equals(other.ur_)) return false;
    if (IsGameover != other.IsGameover) return false;
    if(!sur_.Equals(other.sur_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SeatWin != 0) hash ^= SeatWin.GetHashCode();
    if (MultipleBase != 0) hash ^= MultipleBase.GetHashCode();
    if (CurRound != 0) hash ^= CurRound.GetHashCode();
    if (TotalRound != 0) hash ^= TotalRound.GetHashCode();
    if (UseTime != 0) hash ^= UseTime.GetHashCode();
    hash ^= ur_.GetHashCode();
    if (IsGameover != 0) hash ^= IsGameover.GetHashCode();
    hash ^= sur_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SeatWin != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SeatWin);
    }
    if (MultipleBase != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MultipleBase);
    }
    if (CurRound != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(CurRound);
    }
    if (TotalRound != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TotalRound);
    }
    if (UseTime != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(UseTime);
    }
    ur_.WriteTo(output, _repeated_ur_codec);
    if (IsGameover != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(IsGameover);
    }
    sur_.WriteTo(output, _repeated_sur_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SeatWin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatWin);
    }
    if (MultipleBase != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MultipleBase);
    }
    if (CurRound != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurRound);
    }
    if (TotalRound != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRound);
    }
    if (UseTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseTime);
    }
    size += ur_.CalculateSize(_repeated_ur_codec);
    if (IsGameover != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsGameover);
    }
    size += sur_.CalculateSize(_repeated_sur_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSGameResultNtf other) {
    if (other == null) {
      return;
    }
    if (other.SeatWin != 0) {
      SeatWin = other.SeatWin;
    }
    if (other.MultipleBase != 0) {
      MultipleBase = other.MultipleBase;
    }
    if (other.CurRound != 0) {
      CurRound = other.CurRound;
    }
    if (other.TotalRound != 0) {
      TotalRound = other.TotalRound;
    }
    if (other.UseTime != 0) {
      UseTime = other.UseTime;
    }
    ur_.Add(other.ur_);
    if (other.IsGameover != 0) {
      IsGameover = other.IsGameover;
    }
    sur_.Add(other.sur_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          SeatWin = input.ReadInt32();
          break;
        }
        case 16: {
          MultipleBase = input.ReadInt32();
          break;
        }
        case 24: {
          CurRound = input.ReadInt32();
          break;
        }
        case 32: {
          TotalRound = input.ReadInt32();
          break;
        }
        case 40: {
          UseTime = input.ReadInt32();
          break;
        }
        case 50: {
          ur_.AddEntriesFrom(input, _repeated_ur_codec);
          break;
        }
        case 56: {
          IsGameover = input.ReadInt32();
          break;
        }
        case 66: {
          sur_.AddEntriesFrom(input, _repeated_sur_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_GAMEOVER          
/// 结束游戏
/// </summary>
public sealed partial class GD_CGSGameOverNtf : pb::IMessage<GD_CGSGameOverNtf> {
  private static readonly pb::MessageParser<GD_CGSGameOverNtf> _parser = new pb::MessageParser<GD_CGSGameOverNtf>(() => new GD_CGSGameOverNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSGameOverNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[105]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameOverNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameOverNtf(GD_CGSGameOverNtf other) : this() {
    reason_ = other.reason_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSGameOverNtf Clone() {
    return new GD_CGSGameOverNtf(this);
  }

  /// <summary>Field number for the "reason" field.</summary>
  public const int ReasonFieldNumber = 1;
  private int reason_;
  /// <summary>
  /// 结束原因
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Reason {
    get { return reason_; }
    set {
      reason_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSGameOverNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSGameOverNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Reason != other.Reason) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Reason != 0) hash ^= Reason.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Reason != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Reason);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Reason != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reason);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSGameOverNtf other) {
    if (other == null) {
      return;
    }
    if (other.Reason != 0) {
      Reason = other.Reason;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Reason = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_SYNCDATA          
/// 数据同步
/// </summary>
public sealed partial class GD_CGSSyncDataNtf : pb::IMessage<GD_CGSSyncDataNtf> {
  private static readonly pb::MessageParser<GD_CGSSyncDataNtf> _parser = new pb::MessageParser<GD_CGSSyncDataNtf>(() => new GD_CGSSyncDataNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSSyncDataNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[106]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSSyncDataNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSSyncDataNtf(GD_CGSSyncDataNtf other) : this() {
    GameInfo = other.gameInfo_ != null ? other.GameInfo.Clone() : null;
    playerInfo_ = other.playerInfo_.Clone();
    operateType_ = other.operateType_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSSyncDataNtf Clone() {
    return new GD_CGSSyncDataNtf(this);
  }

  /// <summary>Field number for the "game_info" field.</summary>
  public const int GameInfoFieldNumber = 1;
  private global::GD_CGSGameInfoReal gameInfo_;
  /// <summary>
  ///  游戏信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GD_CGSGameInfoReal GameInfo {
    get { return gameInfo_; }
    set {
      gameInfo_ = value;
    }
  }

  /// <summary>Field number for the "player_info" field.</summary>
  public const int PlayerInfoFieldNumber = 2;
  private static readonly pb::FieldCodec<global::GD_CGSPlayerInfoReal> _repeated_playerInfo_codec
      = pb::FieldCodec.ForMessage(18, global::GD_CGSPlayerInfoReal.Parser);
  private readonly pbc::RepeatedField<global::GD_CGSPlayerInfoReal> playerInfo_ = new pbc::RepeatedField<global::GD_CGSPlayerInfoReal>();
  /// <summary>
  ///  玩家信息[数组下标代表座位号]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GD_CGSPlayerInfoReal> PlayerInfo {
    get { return playerInfo_; }
  }

  /// <summary>Field number for the "operate_type" field.</summary>
  public const int OperateTypeFieldNumber = 3;
  private int operateType_;
  /// <summary>
  ///  操作类型 1 &lt;&lt; 0:出牌,1 &lt;&lt; 1:过牌 两值合并, 1 + 1 &lt;&lt; 1 = 3 既能出牌又能过牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OperateType {
    get { return operateType_; }
    set {
      operateType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSSyncDataNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSSyncDataNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(GameInfo, other.GameInfo)) return false;
    if(!playerInfo_.Equals(other.playerInfo_)) return false;
    if (OperateType != other.OperateType) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (gameInfo_ != null) hash ^= GameInfo.GetHashCode();
    hash ^= playerInfo_.GetHashCode();
    if (OperateType != 0) hash ^= OperateType.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (gameInfo_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(GameInfo);
    }
    playerInfo_.WriteTo(output, _repeated_playerInfo_codec);
    if (OperateType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(OperateType);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (gameInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameInfo);
    }
    size += playerInfo_.CalculateSize(_repeated_playerInfo_codec);
    if (OperateType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperateType);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSSyncDataNtf other) {
    if (other == null) {
      return;
    }
    if (other.gameInfo_ != null) {
      if (gameInfo_ == null) {
        gameInfo_ = new global::GD_CGSGameInfoReal();
      }
      GameInfo.MergeFrom(other.GameInfo);
    }
    playerInfo_.Add(other.playerInfo_);
    if (other.OperateType != 0) {
      OperateType = other.OperateType;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (gameInfo_ == null) {
            gameInfo_ = new global::GD_CGSGameInfoReal();
          }
          input.ReadMessage(gameInfo_);
          break;
        }
        case 18: {
          playerInfo_.AddEntriesFrom(input, _repeated_playerInfo_codec);
          break;
        }
        case 24: {
          OperateType = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_CLI_GS_REQ_BREAK				
/// 切入切出请求
/// </summary>
public sealed partial class GD_CGSBreakReq : pb::IMessage<GD_CGSBreakReq> {
  private static readonly pb::MessageParser<GD_CGSBreakReq> _parser = new pb::MessageParser<GD_CGSBreakReq>(() => new GD_CGSBreakReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSBreakReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[107]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSBreakReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSBreakReq(GD_CGSBreakReq other) : this() {
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSBreakReq Clone() {
    return new GD_CGSBreakReq(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///  0:切回  1:切走
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSBreakReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSBreakReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSBreakReq other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GD_CGSBreakAck : pb::IMessage<GD_CGSBreakAck> {
  private static readonly pb::MessageParser<GD_CGSBreakAck> _parser = new pb::MessageParser<GD_CGSBreakAck>(() => new GD_CGSBreakAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSBreakAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[108]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSBreakAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSBreakAck(GD_CGSBreakAck other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSBreakAck Clone() {
    return new GD_CGSBreakAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSBreakAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSBreakAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSBreakAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
///  CGS_MSG_CLI_GS_REQ_DIMISSGAME				
/// 解散桌子
/// </summary>
public sealed partial class GD_CGSDismissTableReq : pb::IMessage<GD_CGSDismissTableReq> {
  private static readonly pb::MessageParser<GD_CGSDismissTableReq> _parser = new pb::MessageParser<GD_CGSDismissTableReq>(() => new GD_CGSDismissTableReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSDismissTableReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[109]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSDismissTableReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSDismissTableReq(GD_CGSDismissTableReq other) : this() {
    dismiss_ = other.dismiss_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSDismissTableReq Clone() {
    return new GD_CGSDismissTableReq(this);
  }

  /// <summary>Field number for the "dismiss" field.</summary>
  public const int DismissFieldNumber = 1;
  private int dismiss_;
  /// <summary>
  /// 是否同意解散 1 同意，2 不同意 0 未选
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Dismiss {
    get { return dismiss_; }
    set {
      dismiss_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSDismissTableReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSDismissTableReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Dismiss != other.Dismiss) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Dismiss != 0) hash ^= Dismiss.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Dismiss != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Dismiss);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Dismiss != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dismiss);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSDismissTableReq other) {
    if (other == null) {
      return;
    }
    if (other.Dismiss != 0) {
      Dismiss = other.Dismiss;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Dismiss = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 返回结果
/// </summary>
public sealed partial class GD_CGSDismissTableAck : pb::IMessage<GD_CGSDismissTableAck> {
  private static readonly pb::MessageParser<GD_CGSDismissTableAck> _parser = new pb::MessageParser<GD_CGSDismissTableAck>(() => new GD_CGSDismissTableAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GD_CGSDismissTableAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[110]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSDismissTableAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSDismissTableAck(GD_CGSDismissTableAck other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GD_CGSDismissTableAck Clone() {
    return new GD_CGSDismissTableAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GD_CGSDismissTableAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GD_CGSDismissTableAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GD_CGSDismissTableAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣//
/// -----------------------------------ddz game---------------------------------------//
/// __________________________________________________________________________________//
/// 手牌容器
/// </summary>
public sealed partial class DDZ_CGSHandCardItem : pb::IMessage<DDZ_CGSHandCardItem> {
  private static readonly pb::MessageParser<DDZ_CGSHandCardItem> _parser = new pb::MessageParser<DDZ_CGSHandCardItem>(() => new DDZ_CGSHandCardItem());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSHandCardItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[111]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSHandCardItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSHandCardItem(DDZ_CGSHandCardItem other) : this() {
    cards_ = other.cards_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSHandCardItem Clone() {
    return new DDZ_CGSHandCardItem(this);
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_cards_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 牌数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Cards {
    get { return cards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSHandCardItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSHandCardItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cards_.Equals(other.cards_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cards_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cards_.WriteTo(output, _repeated_cards_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cards_.CalculateSize(_repeated_cards_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSHandCardItem other) {
    if (other == null) {
      return;
    }
    cards_.Add(other.cards_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 桌牌容器
/// </summary>
public sealed partial class DDZ_CGSTableCardItem : pb::IMessage<DDZ_CGSTableCardItem> {
  private static readonly pb::MessageParser<DDZ_CGSTableCardItem> _parser = new pb::MessageParser<DDZ_CGSTableCardItem>(() => new DDZ_CGSTableCardItem());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSTableCardItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[112]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTableCardItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTableCardItem(DDZ_CGSTableCardItem other) : this() {
    cards_ = other.cards_.Clone();
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTableCardItem Clone() {
    return new DDZ_CGSTableCardItem(this);
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_cards_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 牌数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Cards {
    get { return cards_; }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  /// <summary>
  /// 动作类型: 0-不出 1-没出过
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSTableCardItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSTableCardItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cards_.Equals(other.cards_)) return false;
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cards_.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cards_.WriteTo(output, _repeated_cards_codec);
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSTableCardItem other) {
    if (other == null) {
      return;
    }
    cards_.Add(other.cards_);
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 玩家动态信息
/// </summary>
public sealed partial class DDZ_CGSPlayerInfoReal : pb::IMessage<DDZ_CGSPlayerInfoReal> {
  private static readonly pb::MessageParser<DDZ_CGSPlayerInfoReal> _parser = new pb::MessageParser<DDZ_CGSPlayerInfoReal>(() => new DDZ_CGSPlayerInfoReal());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSPlayerInfoReal> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[113]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerInfoReal() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerInfoReal(DDZ_CGSPlayerInfoReal other) : this() {
    CardTable = other.cardTable_ != null ? other.CardTable.Clone() : null;
    timeThink_ = other.timeThink_;
    cardHand_ = other.cardHand_.Clone();
    leftCardCount_ = other.leftCardCount_;
    callScore_ = other.callScore_;
    callLord_ = other.callLord_;
    grabLord_ = other.grabLord_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerInfoReal Clone() {
    return new DDZ_CGSPlayerInfoReal(this);
  }

  /// <summary>Field number for the "card_table" field.</summary>
  public const int CardTableFieldNumber = 1;
  private global::DDZ_CGSTableCardItem cardTable_;
  /// <summary>
  /// 桌牌内容
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DDZ_CGSTableCardItem CardTable {
    get { return cardTable_; }
    set {
      cardTable_ = value;
    }
  }

  /// <summary>Field number for the "time_think" field.</summary>
  public const int TimeThinkFieldNumber = 2;
  private int timeThink_;
  /// <summary>
  /// 出牌思考时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeThink {
    get { return timeThink_; }
    set {
      timeThink_ = value;
    }
  }

  /// <summary>Field number for the "card_hand" field.</summary>
  public const int CardHandFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_cardHand_codec
      = pb::FieldCodec.ForInt32(26);
  private readonly pbc::RepeatedField<int> cardHand_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 手牌内容
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> CardHand {
    get { return cardHand_; }
  }

  /// <summary>Field number for the "left_card_count" field.</summary>
  public const int LeftCardCountFieldNumber = 4;
  private int leftCardCount_;
  /// <summary>
  /// 当前剩余张数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeftCardCount {
    get { return leftCardCount_; }
    set {
      leftCardCount_ = value;
    }
  }

  /// <summary>Field number for the "call_score" field.</summary>
  public const int CallScoreFieldNumber = 5;
  private int callScore_;
  /// <summary>
  /// 叫分[default = 0]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CallScore {
    get { return callScore_; }
    set {
      callScore_ = value;
    }
  }

  /// <summary>Field number for the "call_lord" field.</summary>
  public const int CallLordFieldNumber = 6;
  private int callLord_;
  /// <summary>
  /// 叫地主 0：不叫 3：叫地主 0xFF：没有叫地主[default = 0]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CallLord {
    get { return callLord_; }
    set {
      callLord_ = value;
    }
  }

  /// <summary>Field number for the "grab_lord" field.</summary>
  public const int GrabLordFieldNumber = 7;
  private int grabLord_;
  /// <summary>
  /// 抢地主 0x00：没资格抢地主 1：不抢 2：抢地主 0xFF：还没有抢地主[default = 1]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GrabLord {
    get { return grabLord_; }
    set {
      grabLord_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSPlayerInfoReal);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSPlayerInfoReal other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(CardTable, other.CardTable)) return false;
    if (TimeThink != other.TimeThink) return false;
    if(!cardHand_.Equals(other.cardHand_)) return false;
    if (LeftCardCount != other.LeftCardCount) return false;
    if (CallScore != other.CallScore) return false;
    if (CallLord != other.CallLord) return false;
    if (GrabLord != other.GrabLord) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (cardTable_ != null) hash ^= CardTable.GetHashCode();
    if (TimeThink != 0) hash ^= TimeThink.GetHashCode();
    hash ^= cardHand_.GetHashCode();
    if (LeftCardCount != 0) hash ^= LeftCardCount.GetHashCode();
    if (CallScore != 0) hash ^= CallScore.GetHashCode();
    if (CallLord != 0) hash ^= CallLord.GetHashCode();
    if (GrabLord != 0) hash ^= GrabLord.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (cardTable_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(CardTable);
    }
    if (TimeThink != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TimeThink);
    }
    cardHand_.WriteTo(output, _repeated_cardHand_codec);
    if (LeftCardCount != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(LeftCardCount);
    }
    if (CallScore != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(CallScore);
    }
    if (CallLord != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(CallLord);
    }
    if (GrabLord != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(GrabLord);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (cardTable_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardTable);
    }
    if (TimeThink != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeThink);
    }
    size += cardHand_.CalculateSize(_repeated_cardHand_codec);
    if (LeftCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCardCount);
    }
    if (CallScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallScore);
    }
    if (CallLord != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallLord);
    }
    if (GrabLord != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GrabLord);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSPlayerInfoReal other) {
    if (other == null) {
      return;
    }
    if (other.cardTable_ != null) {
      if (cardTable_ == null) {
        cardTable_ = new global::DDZ_CGSTableCardItem();
      }
      CardTable.MergeFrom(other.CardTable);
    }
    if (other.TimeThink != 0) {
      TimeThink = other.TimeThink;
    }
    cardHand_.Add(other.cardHand_);
    if (other.LeftCardCount != 0) {
      LeftCardCount = other.LeftCardCount;
    }
    if (other.CallScore != 0) {
      CallScore = other.CallScore;
    }
    if (other.CallLord != 0) {
      CallLord = other.CallLord;
    }
    if (other.GrabLord != 0) {
      GrabLord = other.GrabLord;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (cardTable_ == null) {
            cardTable_ = new global::DDZ_CGSTableCardItem();
          }
          input.ReadMessage(cardTable_);
          break;
        }
        case 16: {
          TimeThink = input.ReadInt32();
          break;
        }
        case 26:
        case 24: {
          cardHand_.AddEntriesFrom(input, _repeated_cardHand_codec);
          break;
        }
        case 32: {
          LeftCardCount = input.ReadInt32();
          break;
        }
        case 40: {
          CallScore = input.ReadInt32();
          break;
        }
        case 48: {
          CallLord = input.ReadInt32();
          break;
        }
        case 56: {
          GrabLord = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 游戏实时信息
/// </summary>
public sealed partial class DDZ_CGSGameInfoReal : pb::IMessage<DDZ_CGSGameInfoReal> {
  private static readonly pb::MessageParser<DDZ_CGSGameInfoReal> _parser = new pb::MessageParser<DDZ_CGSGameInfoReal>(() => new DDZ_CGSGameInfoReal());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSGameInfoReal> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[114]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameInfoReal() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameInfoReal(DDZ_CGSGameInfoReal other) : this() {
    statusGame_ = other.statusGame_;
    seatLord_ = other.seatLord_;
    seatActive_ = other.seatActive_;
    callType_ = other.callType_;
    callScore_ = other.callScore_;
    grabMultipe_ = other.grabMultipe_;
    bombCount_ = other.bombCount_;
    gameType_ = other.gameType_;
    laiziCard_ = other.laiziCard_;
    bombMultiple_ = other.bombMultiple_;
    tweMuch_ = other.tweMuch_;
    totalMultiple_ = other.totalMultiple_;
    mingSeat_ = other.mingSeat_;
    mingCard_ = other.mingCard_;
    letCardCount_ = other.letCardCount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameInfoReal Clone() {
    return new DDZ_CGSGameInfoReal(this);
  }

  /// <summary>Field number for the "status_game" field.</summary>
  public const int StatusGameFieldNumber = 1;
  private int statusGame_;
  /// <summary>
  /// 游戏当前状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StatusGame {
    get { return statusGame_; }
    set {
      statusGame_ = value;
    }
  }

  /// <summary>Field number for the "seat_lord" field.</summary>
  public const int SeatLordFieldNumber = 2;
  private int seatLord_;
  /// <summary>
  /// 地主的座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatLord {
    get { return seatLord_; }
    set {
      seatLord_ = value;
    }
  }

  /// <summary>Field number for the "seat_active" field.</summary>
  public const int SeatActiveFieldNumber = 3;
  private int seatActive_;
  /// <summary>
  /// 当前活动玩家座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatActive {
    get { return seatActive_; }
    set {
      seatActive_ = value;
    }
  }

  /// <summary>Field number for the "call_type" field.</summary>
  public const int CallTypeFieldNumber = 4;
  private int callType_;
  /// <summary>
  /// 叫分类型 0:叫分 1：叫地主 2:叫抢踢 3:仅叫
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CallType {
    get { return callType_; }
    set {
      callType_ = value;
    }
  }

  /// <summary>Field number for the "call_score" field.</summary>
  public const int CallScoreFieldNumber = 5;
  private int callScore_;
  /// <summary>
  /// 当前最大叫分（表示 叫分[0-3] 或 叫地主[0、3] 的分值）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CallScore {
    get { return callScore_; }
    set {
      callScore_ = value;
    }
  }

  /// <summary>Field number for the "grab_multipe" field.</summary>
  public const int GrabMultipeFieldNumber = 6;
  private int grabMultipe_;
  /// <summary>
  /// 当前抢地主倍数（1、2、4、8）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GrabMultipe {
    get { return grabMultipe_; }
    set {
      grabMultipe_ = value;
    }
  }

  /// <summary>Field number for the "bomb_count" field.</summary>
  public const int BombCountFieldNumber = 7;
  private int bombCount_;
  /// <summary>
  /// 当前已经打出的炸弹数量（包括火箭）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BombCount {
    get { return bombCount_; }
    set {
      bombCount_ = value;
    }
  }

  /// <summary>Field number for the "game_type" field.</summary>
  public const int GameTypeFieldNumber = 8;
  private int gameType_;
  /// <summary>
  /// 玩法模式 0:普通玩法 1:癞子玩法
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameType {
    get { return gameType_; }
    set {
      gameType_ = value;
    }
  }

  /// <summary>Field number for the "laizi_card" field.</summary>
  public const int LaiziCardFieldNumber = 9;
  private int laiziCard_;
  /// <summary>
  /// 癞子牌信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LaiziCard {
    get { return laiziCard_; }
    set {
      laiziCard_ = value;
    }
  }

  /// <summary>Field number for the "bomb_multiple" field.</summary>
  public const int BombMultipleFieldNumber = 10;
  private int bombMultiple_;
  /// <summary>
  /// 当前炸弹倍数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BombMultiple {
    get { return bombMultiple_; }
    set {
      bombMultiple_ = value;
    }
  }

  /// <summary>Field number for the "twe_much" field.</summary>
  public const int TweMuchFieldNumber = 11;
  private int tweMuch_;
  /// <summary>
  /// 当前加倍倍数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TweMuch {
    get { return tweMuch_; }
    set {
      tweMuch_ = value;
    }
  }

  /// <summary>Field number for the "total_multiple" field.</summary>
  public const int TotalMultipleFieldNumber = 12;
  private int totalMultiple_;
  /// <summary>
  /// 当前总倍数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalMultiple {
    get { return totalMultiple_; }
    set {
      totalMultiple_ = value;
    }
  }

  /// <summary>Field number for the "ming_seat" field.</summary>
  public const int MingSeatFieldNumber = 13;
  private int mingSeat_;
  /// <summary>
  ///  发到明牌的玩家
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MingSeat {
    get { return mingSeat_; }
    set {
      mingSeat_ = value;
    }
  }

  /// <summary>Field number for the "ming_card" field.</summary>
  public const int MingCardFieldNumber = 14;
  private int mingCard_;
  /// <summary>
  ///  明牌数值 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MingCard {
    get { return mingCard_; }
    set {
      mingCard_ = value;
    }
  }

  /// <summary>Field number for the "let_card_count" field.</summary>
  public const int LetCardCountFieldNumber = 15;
  private int letCardCount_;
  /// <summary>
  /// 需让牌几张[2人场]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LetCardCount {
    get { return letCardCount_; }
    set {
      letCardCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSGameInfoReal);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSGameInfoReal other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StatusGame != other.StatusGame) return false;
    if (SeatLord != other.SeatLord) return false;
    if (SeatActive != other.SeatActive) return false;
    if (CallType != other.CallType) return false;
    if (CallScore != other.CallScore) return false;
    if (GrabMultipe != other.GrabMultipe) return false;
    if (BombCount != other.BombCount) return false;
    if (GameType != other.GameType) return false;
    if (LaiziCard != other.LaiziCard) return false;
    if (BombMultiple != other.BombMultiple) return false;
    if (TweMuch != other.TweMuch) return false;
    if (TotalMultiple != other.TotalMultiple) return false;
    if (MingSeat != other.MingSeat) return false;
    if (MingCard != other.MingCard) return false;
    if (LetCardCount != other.LetCardCount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StatusGame != 0) hash ^= StatusGame.GetHashCode();
    if (SeatLord != 0) hash ^= SeatLord.GetHashCode();
    if (SeatActive != 0) hash ^= SeatActive.GetHashCode();
    if (CallType != 0) hash ^= CallType.GetHashCode();
    if (CallScore != 0) hash ^= CallScore.GetHashCode();
    if (GrabMultipe != 0) hash ^= GrabMultipe.GetHashCode();
    if (BombCount != 0) hash ^= BombCount.GetHashCode();
    if (GameType != 0) hash ^= GameType.GetHashCode();
    if (LaiziCard != 0) hash ^= LaiziCard.GetHashCode();
    if (BombMultiple != 0) hash ^= BombMultiple.GetHashCode();
    if (TweMuch != 0) hash ^= TweMuch.GetHashCode();
    if (TotalMultiple != 0) hash ^= TotalMultiple.GetHashCode();
    if (MingSeat != 0) hash ^= MingSeat.GetHashCode();
    if (MingCard != 0) hash ^= MingCard.GetHashCode();
    if (LetCardCount != 0) hash ^= LetCardCount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StatusGame != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(StatusGame);
    }
    if (SeatLord != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SeatLord);
    }
    if (SeatActive != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SeatActive);
    }
    if (CallType != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(CallType);
    }
    if (CallScore != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(CallScore);
    }
    if (GrabMultipe != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(GrabMultipe);
    }
    if (BombCount != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(BombCount);
    }
    if (GameType != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(GameType);
    }
    if (LaiziCard != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(LaiziCard);
    }
    if (BombMultiple != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(BombMultiple);
    }
    if (TweMuch != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(TweMuch);
    }
    if (TotalMultiple != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(TotalMultiple);
    }
    if (MingSeat != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(MingSeat);
    }
    if (MingCard != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(MingCard);
    }
    if (LetCardCount != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(LetCardCount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StatusGame != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusGame);
    }
    if (SeatLord != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatLord);
    }
    if (SeatActive != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatActive);
    }
    if (CallType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallType);
    }
    if (CallScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallScore);
    }
    if (GrabMultipe != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GrabMultipe);
    }
    if (BombCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombCount);
    }
    if (GameType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameType);
    }
    if (LaiziCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaiziCard);
    }
    if (BombMultiple != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombMultiple);
    }
    if (TweMuch != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TweMuch);
    }
    if (TotalMultiple != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalMultiple);
    }
    if (MingSeat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MingSeat);
    }
    if (MingCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MingCard);
    }
    if (LetCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LetCardCount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSGameInfoReal other) {
    if (other == null) {
      return;
    }
    if (other.StatusGame != 0) {
      StatusGame = other.StatusGame;
    }
    if (other.SeatLord != 0) {
      SeatLord = other.SeatLord;
    }
    if (other.SeatActive != 0) {
      SeatActive = other.SeatActive;
    }
    if (other.CallType != 0) {
      CallType = other.CallType;
    }
    if (other.CallScore != 0) {
      CallScore = other.CallScore;
    }
    if (other.GrabMultipe != 0) {
      GrabMultipe = other.GrabMultipe;
    }
    if (other.BombCount != 0) {
      BombCount = other.BombCount;
    }
    if (other.GameType != 0) {
      GameType = other.GameType;
    }
    if (other.LaiziCard != 0) {
      LaiziCard = other.LaiziCard;
    }
    if (other.BombMultiple != 0) {
      BombMultiple = other.BombMultiple;
    }
    if (other.TweMuch != 0) {
      TweMuch = other.TweMuch;
    }
    if (other.TotalMultiple != 0) {
      TotalMultiple = other.TotalMultiple;
    }
    if (other.MingSeat != 0) {
      MingSeat = other.MingSeat;
    }
    if (other.MingCard != 0) {
      MingCard = other.MingCard;
    }
    if (other.LetCardCount != 0) {
      LetCardCount = other.LetCardCount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          StatusGame = input.ReadInt32();
          break;
        }
        case 16: {
          SeatLord = input.ReadInt32();
          break;
        }
        case 24: {
          SeatActive = input.ReadInt32();
          break;
        }
        case 32: {
          CallType = input.ReadInt32();
          break;
        }
        case 40: {
          CallScore = input.ReadInt32();
          break;
        }
        case 48: {
          GrabMultipe = input.ReadInt32();
          break;
        }
        case 56: {
          BombCount = input.ReadInt32();
          break;
        }
        case 64: {
          GameType = input.ReadInt32();
          break;
        }
        case 72: {
          LaiziCard = input.ReadInt32();
          break;
        }
        case 80: {
          BombMultiple = input.ReadInt32();
          break;
        }
        case 88: {
          TweMuch = input.ReadInt32();
          break;
        }
        case 96: {
          TotalMultiple = input.ReadInt32();
          break;
        }
        case 104: {
          MingSeat = input.ReadInt32();
          break;
        }
        case 112: {
          MingCard = input.ReadInt32();
          break;
        }
        case 120: {
          LetCardCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// define CGS_MSG_CLI_GS_REQ_HEARTBEAT         //心跳消息
/// </summary>
public sealed partial class DDZ_CGSHeartBeatReq : pb::IMessage<DDZ_CGSHeartBeatReq> {
  private static readonly pb::MessageParser<DDZ_CGSHeartBeatReq> _parser = new pb::MessageParser<DDZ_CGSHeartBeatReq>(() => new DDZ_CGSHeartBeatReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSHeartBeatReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[115]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSHeartBeatReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSHeartBeatReq(DDZ_CGSHeartBeatReq other) : this() {
    time_ = other.time_;
    delay_ = other.delay_;
    heartCount_ = other.heartCount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSHeartBeatReq Clone() {
    return new DDZ_CGSHeartBeatReq(this);
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 1;
  private long time_;
  /// <summary>
  ///  客户端发出的时间，服务器原封不动的返回，用来计算网络延迟
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  /// <summary>Field number for the "delay" field.</summary>
  public const int DelayFieldNumber = 2;
  private int delay_;
  /// <summary>
  /// 延时毫秒数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Delay {
    get { return delay_; }
    set {
      delay_ = value;
    }
  }

  /// <summary>Field number for the "heartCount" field.</summary>
  public const int HeartCountFieldNumber = 3;
  private int heartCount_;
  /// <summary>
  /// 客户端超时计数器
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HeartCount {
    get { return heartCount_; }
    set {
      heartCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSHeartBeatReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSHeartBeatReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Time != other.Time) return false;
    if (Delay != other.Delay) return false;
    if (HeartCount != other.HeartCount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Time != 0L) hash ^= Time.GetHashCode();
    if (Delay != 0) hash ^= Delay.GetHashCode();
    if (HeartCount != 0) hash ^= HeartCount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Time != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Time);
    }
    if (Delay != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Delay);
    }
    if (HeartCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(HeartCount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Time != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
    }
    if (Delay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Delay);
    }
    if (HeartCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeartCount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSHeartBeatReq other) {
    if (other == null) {
      return;
    }
    if (other.Time != 0L) {
      Time = other.Time;
    }
    if (other.Delay != 0) {
      Delay = other.Delay;
    }
    if (other.HeartCount != 0) {
      HeartCount = other.HeartCount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Time = input.ReadInt64();
          break;
        }
        case 16: {
          Delay = input.ReadInt32();
          break;
        }
        case 24: {
          HeartCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DDZ_CGSHeartBeatAck : pb::IMessage<DDZ_CGSHeartBeatAck> {
  private static readonly pb::MessageParser<DDZ_CGSHeartBeatAck> _parser = new pb::MessageParser<DDZ_CGSHeartBeatAck>(() => new DDZ_CGSHeartBeatAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSHeartBeatAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[116]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSHeartBeatAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSHeartBeatAck(DDZ_CGSHeartBeatAck other) : this() {
    time_ = other.time_;
    delay_ = other.delay_;
    heartCount_ = other.heartCount_;
    timeExpend_ = other.timeExpend_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSHeartBeatAck Clone() {
    return new DDZ_CGSHeartBeatAck(this);
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 1;
  private long time_;
  /// <summary>
  ///  客户端发出的时间，服务器原封不动的返回，用来计算网络延迟
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  /// <summary>Field number for the "delay" field.</summary>
  public const int DelayFieldNumber = 2;
  private int delay_;
  /// <summary>
  /// 延时毫秒数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Delay {
    get { return delay_; }
    set {
      delay_ = value;
    }
  }

  /// <summary>Field number for the "heartCount" field.</summary>
  public const int HeartCountFieldNumber = 3;
  private int heartCount_;
  /// <summary>
  /// 客户端超时计数器
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HeartCount {
    get { return heartCount_; }
    set {
      heartCount_ = value;
    }
  }

  /// <summary>Field number for the "time_expend" field.</summary>
  public const int TimeExpendFieldNumber = 4;
  private int timeExpend_;
  /// <summary>
  /// 游戏时长
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeExpend {
    get { return timeExpend_; }
    set {
      timeExpend_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSHeartBeatAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSHeartBeatAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Time != other.Time) return false;
    if (Delay != other.Delay) return false;
    if (HeartCount != other.HeartCount) return false;
    if (TimeExpend != other.TimeExpend) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Time != 0L) hash ^= Time.GetHashCode();
    if (Delay != 0) hash ^= Delay.GetHashCode();
    if (HeartCount != 0) hash ^= HeartCount.GetHashCode();
    if (TimeExpend != 0) hash ^= TimeExpend.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Time != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Time);
    }
    if (Delay != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Delay);
    }
    if (HeartCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(HeartCount);
    }
    if (TimeExpend != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TimeExpend);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Time != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
    }
    if (Delay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Delay);
    }
    if (HeartCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeartCount);
    }
    if (TimeExpend != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeExpend);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSHeartBeatAck other) {
    if (other == null) {
      return;
    }
    if (other.Time != 0L) {
      Time = other.Time;
    }
    if (other.Delay != 0) {
      Delay = other.Delay;
    }
    if (other.HeartCount != 0) {
      HeartCount = other.HeartCount;
    }
    if (other.TimeExpend != 0) {
      TimeExpend = other.TimeExpend;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Time = input.ReadInt64();
          break;
        }
        case 16: {
          Delay = input.ReadInt32();
          break;
        }
        case 24: {
          HeartCount = input.ReadInt32();
          break;
        }
        case 32: {
          TimeExpend = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// define CGS_MSG_CLI_GS_REQ_GAMEENTER         //进入游戏
/// </summary>
public sealed partial class DDZ_CGSGameEnterReq : pb::IMessage<DDZ_CGSGameEnterReq> {
  private static readonly pb::MessageParser<DDZ_CGSGameEnterReq> _parser = new pb::MessageParser<DDZ_CGSGameEnterReq>(() => new DDZ_CGSGameEnterReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSGameEnterReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[117]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameEnterReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameEnterReq(DDZ_CGSGameEnterReq other) : this() {
    tableid_ = other.tableid_;
    username_ = other.username_;
    ticket_ = other.ticket_;
    userid_ = other.userid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameEnterReq Clone() {
    return new DDZ_CGSGameEnterReq(this);
  }

  /// <summary>Field number for the "tableid" field.</summary>
  public const int TableidFieldNumber = 1;
  private int tableid_;
  /// <summary>
  ///  桌号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Tableid {
    get { return tableid_; }
    set {
      tableid_ = value;
    }
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 2;
  private string username_ = "";
  /// <summary>
  ///  用户名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ticket" field.</summary>
  public const int TicketFieldNumber = 3;
  private string ticket_ = "";
  /// <summary>
  ///  加密验证（证书之类的）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ticket {
    get { return ticket_; }
    set {
      ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 4;
  private int userid_;
  /// <summary>
  ///  用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSGameEnterReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSGameEnterReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Tableid != other.Tableid) return false;
    if (Username != other.Username) return false;
    if (Ticket != other.Ticket) return false;
    if (Userid != other.Userid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Tableid != 0) hash ^= Tableid.GetHashCode();
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (Ticket.Length != 0) hash ^= Ticket.GetHashCode();
    if (Userid != 0) hash ^= Userid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Tableid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Tableid);
    }
    if (Username.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Username);
    }
    if (Ticket.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Ticket);
    }
    if (Userid != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Userid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Tableid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tableid);
    }
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (Ticket.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticket);
    }
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSGameEnterReq other) {
    if (other == null) {
      return;
    }
    if (other.Tableid != 0) {
      Tableid = other.Tableid;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.Ticket.Length != 0) {
      Ticket = other.Ticket;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Tableid = input.ReadInt32();
          break;
        }
        case 18: {
          Username = input.ReadString();
          break;
        }
        case 26: {
          Ticket = input.ReadString();
          break;
        }
        case 32: {
          Userid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DDZ_CGSPlayerInfo : pb::IMessage<DDZ_CGSPlayerInfo> {
  private static readonly pb::MessageParser<DDZ_CGSPlayerInfo> _parser = new pb::MessageParser<DDZ_CGSPlayerInfo>(() => new DDZ_CGSPlayerInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSPlayerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[118]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerInfo(DDZ_CGSPlayerInfo other) : this() {
    userid_ = other.userid_;
    seat_ = other.seat_;
    nickname_ = other.nickname_;
    sex_ = other.sex_;
    headimg_ = other.headimg_;
    ip_ = other.ip_;
    statusOnline_ = other.statusOnline_;
    breakType_ = other.breakType_;
    score_ = other.score_;
    statusReady_ = other.statusReady_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerInfo Clone() {
    return new DDZ_CGSPlayerInfo(this);
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 1;
  private int userid_;
  /// <summary>
  ///  用户id	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 2;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 3;
  private string nickname_ = "";
  /// <summary>
  /// 昵称
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sex" field.</summary>
  public const int SexFieldNumber = 4;
  private int sex_;
  /// <summary>
  /// 用户性别
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Sex {
    get { return sex_; }
    set {
      sex_ = value;
    }
  }

  /// <summary>Field number for the "headimg" field.</summary>
  public const int HeadimgFieldNumber = 5;
  private string headimg_ = "";
  /// <summary>
  /// 头像地址
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Headimg {
    get { return headimg_; }
    set {
      headimg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ip" field.</summary>
  public const int IpFieldNumber = 6;
  private uint ip_;
  /// <summary>
  /// ip地址
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Ip {
    get { return ip_; }
    set {
      ip_ = value;
    }
  }

  /// <summary>Field number for the "status_online" field.</summary>
  public const int StatusOnlineFieldNumber = 7;
  private int statusOnline_;
  /// <summary>
  /// 在线状态 0:在线 1:离线
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StatusOnline {
    get { return statusOnline_; }
    set {
      statusOnline_ = value;
    }
  }

  /// <summary>Field number for the "break_type" field.</summary>
  public const int BreakTypeFieldNumber = 8;
  private int breakType_;
  /// <summary>
  /// 切入切出状态 0：切入 1：切出
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BreakType {
    get { return breakType_; }
    set {
      breakType_ = value;
    }
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 9;
  private int score_;
  /// <summary>
  /// 当前总分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Score {
    get { return score_; }
    set {
      score_ = value;
    }
  }

  /// <summary>Field number for the "status_ready" field.</summary>
  public const int StatusReadyFieldNumber = 10;
  private int statusReady_;
  /// <summary>
  /// 准备状态 0:准备好 1:没准备
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StatusReady {
    get { return statusReady_; }
    set {
      statusReady_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSPlayerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSPlayerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Userid != other.Userid) return false;
    if (Seat != other.Seat) return false;
    if (Nickname != other.Nickname) return false;
    if (Sex != other.Sex) return false;
    if (Headimg != other.Headimg) return false;
    if (Ip != other.Ip) return false;
    if (StatusOnline != other.StatusOnline) return false;
    if (BreakType != other.BreakType) return false;
    if (Score != other.Score) return false;
    if (StatusReady != other.StatusReady) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (Sex != 0) hash ^= Sex.GetHashCode();
    if (Headimg.Length != 0) hash ^= Headimg.GetHashCode();
    if (Ip != 0) hash ^= Ip.GetHashCode();
    if (StatusOnline != 0) hash ^= StatusOnline.GetHashCode();
    if (BreakType != 0) hash ^= BreakType.GetHashCode();
    if (Score != 0) hash ^= Score.GetHashCode();
    if (StatusReady != 0) hash ^= StatusReady.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Userid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Userid);
    }
    if (Seat != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Seat);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Nickname);
    }
    if (Sex != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Sex);
    }
    if (Headimg.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Headimg);
    }
    if (Ip != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Ip);
    }
    if (StatusOnline != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(StatusOnline);
    }
    if (BreakType != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(BreakType);
    }
    if (Score != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(Score);
    }
    if (StatusReady != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(StatusReady);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (Sex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
    }
    if (Headimg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Headimg);
    }
    if (Ip != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ip);
    }
    if (StatusOnline != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusOnline);
    }
    if (BreakType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakType);
    }
    if (Score != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
    }
    if (StatusReady != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusReady);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSPlayerInfo other) {
    if (other == null) {
      return;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    if (other.Sex != 0) {
      Sex = other.Sex;
    }
    if (other.Headimg.Length != 0) {
      Headimg = other.Headimg;
    }
    if (other.Ip != 0) {
      Ip = other.Ip;
    }
    if (other.StatusOnline != 0) {
      StatusOnline = other.StatusOnline;
    }
    if (other.BreakType != 0) {
      BreakType = other.BreakType;
    }
    if (other.Score != 0) {
      Score = other.Score;
    }
    if (other.StatusReady != 0) {
      StatusReady = other.StatusReady;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Userid = input.ReadInt32();
          break;
        }
        case 16: {
          Seat = input.ReadInt32();
          break;
        }
        case 26: {
          Nickname = input.ReadString();
          break;
        }
        case 32: {
          Sex = input.ReadInt32();
          break;
        }
        case 42: {
          Headimg = input.ReadString();
          break;
        }
        case 48: {
          Ip = input.ReadUInt32();
          break;
        }
        case 56: {
          StatusOnline = input.ReadInt32();
          break;
        }
        case 64: {
          BreakType = input.ReadInt32();
          break;
        }
        case 72: {
          Score = input.ReadInt32();
          break;
        }
        case 80: {
          StatusReady = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 桌子规则定义扩展
/// </summary>
public sealed partial class DDZ_CGSTableRule : pb::IMessage<DDZ_CGSTableRule> {
  private static readonly pb::MessageParser<DDZ_CGSTableRule> _parser = new pb::MessageParser<DDZ_CGSTableRule>(() => new DDZ_CGSTableRule());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSTableRule> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[119]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTableRule() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTableRule(DDZ_CGSTableRule other) : this() {
    playerCount_ = other.playerCount_;
    round_ = other.round_;
    timeThink_ = other.timeThink_;
    suitCard_ = other.suitCard_;
    biGen_ = other.biGen_;
    curRound_ = other.curRound_;
    straightCard_ = other.straightCard_;
    mixCard_ = other.mixCard_;
    gameMode_ = other.gameMode_;
    bombCapped_ = other.bombCapped_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTableRule Clone() {
    return new DDZ_CGSTableRule(this);
  }

  /// <summary>Field number for the "player_count" field.</summary>
  public const int PlayerCountFieldNumber = 1;
  private int playerCount_;
  /// <summary>
  /// 玩家数 2, 3，4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerCount {
    get { return playerCount_; }
    set {
      playerCount_ = value;
    }
  }

  /// <summary>Field number for the "round" field.</summary>
  public const int RoundFieldNumber = 2;
  private int round_;
  /// <summary>
  /// 总盘数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Round {
    get { return round_; }
    set {
      round_ = value;
    }
  }

  /// <summary>Field number for the "time_think" field.</summary>
  public const int TimeThinkFieldNumber = 3;
  private int timeThink_;
  /// <summary>
  /// 出牌思考时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeThink {
    get { return timeThink_; }
    set {
      timeThink_ = value;
    }
  }

  /// <summary>Field number for the "suit_card" field.</summary>
  public const int SuitCardFieldNumber = 4;
  private int suitCard_;
  /// <summary>
  /// 多少副牌 1 - 2，3人1副，4人 1-2副
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SuitCard {
    get { return suitCard_; }
    set {
      suitCard_ = value;
    }
  }

  /// <summary>Field number for the "BiGen" field.</summary>
  public const int BiGenFieldNumber = 5;
  private int biGen_;
  /// <summary>
  /// 有牌必跟
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BiGen {
    get { return biGen_; }
    set {
      biGen_ = value;
    }
  }

  /// <summary>Field number for the "cur_round" field.</summary>
  public const int CurRoundFieldNumber = 6;
  private int curRound_;
  /// <summary>
  /// 本桌的连续游戏盘数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurRound {
    get { return curRound_; }
    set {
      curRound_ = value;
    }
  }

  /// <summary>Field number for the "StraightCard" field.</summary>
  public const int StraightCardFieldNumber = 7;
  private int straightCard_;
  /// <summary>
  /// 是否带顺子
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StraightCard {
    get { return straightCard_; }
    set {
      straightCard_ = value;
    }
  }

  /// <summary>Field number for the "MixCard" field.</summary>
  public const int MixCardFieldNumber = 8;
  private int mixCard_;
  /// <summary>
  /// 是否带混牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MixCard {
    get { return mixCard_; }
    set {
      mixCard_ = value;
    }
  }

  /// <summary>Field number for the "GameMode" field.</summary>
  public const int GameModeFieldNumber = 9;
  private int gameMode_;
  /// <summary>
  /// 游戏模式(叫分、叫分抢地主)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameMode {
    get { return gameMode_; }
    set {
      gameMode_ = value;
    }
  }

  /// <summary>Field number for the "BombCapped" field.</summary>
  public const int BombCappedFieldNumber = 10;
  private int bombCapped_;
  /// <summary>
  /// 封顶
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BombCapped {
    get { return bombCapped_; }
    set {
      bombCapped_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSTableRule);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSTableRule other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerCount != other.PlayerCount) return false;
    if (Round != other.Round) return false;
    if (TimeThink != other.TimeThink) return false;
    if (SuitCard != other.SuitCard) return false;
    if (BiGen != other.BiGen) return false;
    if (CurRound != other.CurRound) return false;
    if (StraightCard != other.StraightCard) return false;
    if (MixCard != other.MixCard) return false;
    if (GameMode != other.GameMode) return false;
    if (BombCapped != other.BombCapped) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerCount != 0) hash ^= PlayerCount.GetHashCode();
    if (Round != 0) hash ^= Round.GetHashCode();
    if (TimeThink != 0) hash ^= TimeThink.GetHashCode();
    if (SuitCard != 0) hash ^= SuitCard.GetHashCode();
    if (BiGen != 0) hash ^= BiGen.GetHashCode();
    if (CurRound != 0) hash ^= CurRound.GetHashCode();
    if (StraightCard != 0) hash ^= StraightCard.GetHashCode();
    if (MixCard != 0) hash ^= MixCard.GetHashCode();
    if (GameMode != 0) hash ^= GameMode.GetHashCode();
    if (BombCapped != 0) hash ^= BombCapped.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerCount != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerCount);
    }
    if (Round != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Round);
    }
    if (TimeThink != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TimeThink);
    }
    if (SuitCard != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(SuitCard);
    }
    if (BiGen != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(BiGen);
    }
    if (CurRound != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(CurRound);
    }
    if (StraightCard != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(StraightCard);
    }
    if (MixCard != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(MixCard);
    }
    if (GameMode != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(GameMode);
    }
    if (BombCapped != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(BombCapped);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerCount);
    }
    if (Round != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
    }
    if (TimeThink != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeThink);
    }
    if (SuitCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuitCard);
    }
    if (BiGen != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BiGen);
    }
    if (CurRound != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurRound);
    }
    if (StraightCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StraightCard);
    }
    if (MixCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MixCard);
    }
    if (GameMode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameMode);
    }
    if (BombCapped != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombCapped);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSTableRule other) {
    if (other == null) {
      return;
    }
    if (other.PlayerCount != 0) {
      PlayerCount = other.PlayerCount;
    }
    if (other.Round != 0) {
      Round = other.Round;
    }
    if (other.TimeThink != 0) {
      TimeThink = other.TimeThink;
    }
    if (other.SuitCard != 0) {
      SuitCard = other.SuitCard;
    }
    if (other.BiGen != 0) {
      BiGen = other.BiGen;
    }
    if (other.CurRound != 0) {
      CurRound = other.CurRound;
    }
    if (other.StraightCard != 0) {
      StraightCard = other.StraightCard;
    }
    if (other.MixCard != 0) {
      MixCard = other.MixCard;
    }
    if (other.GameMode != 0) {
      GameMode = other.GameMode;
    }
    if (other.BombCapped != 0) {
      BombCapped = other.BombCapped;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PlayerCount = input.ReadInt32();
          break;
        }
        case 16: {
          Round = input.ReadInt32();
          break;
        }
        case 24: {
          TimeThink = input.ReadInt32();
          break;
        }
        case 32: {
          SuitCard = input.ReadInt32();
          break;
        }
        case 40: {
          BiGen = input.ReadInt32();
          break;
        }
        case 48: {
          CurRound = input.ReadInt32();
          break;
        }
        case 56: {
          StraightCard = input.ReadInt32();
          break;
        }
        case 64: {
          MixCard = input.ReadInt32();
          break;
        }
        case 72: {
          GameMode = input.ReadInt32();
          break;
        }
        case 80: {
          BombCapped = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DDZ_CGSGameEnterAck : pb::IMessage<DDZ_CGSGameEnterAck> {
  private static readonly pb::MessageParser<DDZ_CGSGameEnterAck> _parser = new pb::MessageParser<DDZ_CGSGameEnterAck>(() => new DDZ_CGSGameEnterAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSGameEnterAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[120]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameEnterAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameEnterAck(DDZ_CGSGameEnterAck other) : this() {
    result_ = other.result_;
    statusGame_ = other.statusGame_;
    seat_ = other.seat_;
    pis_ = other.pis_.Clone();
    Ptr = other.ptr_ != null ? other.Ptr.Clone() : null;
    ruleStr_ = other.ruleStr_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameEnterAck Clone() {
    return new DDZ_CGSGameEnterAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "status_game" field.</summary>
  public const int StatusGameFieldNumber = 2;
  private int statusGame_;
  /// <summary>
  /// 游戏状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StatusGame {
    get { return statusGame_; }
    set {
      statusGame_ = value;
    }
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 3;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "pis" field.</summary>
  public const int PisFieldNumber = 4;
  private static readonly pb::FieldCodec<global::DDZ_CGSPlayerInfo> _repeated_pis_codec
      = pb::FieldCodec.ForMessage(34, global::DDZ_CGSPlayerInfo.Parser);
  private readonly pbc::RepeatedField<global::DDZ_CGSPlayerInfo> pis_ = new pbc::RepeatedField<global::DDZ_CGSPlayerInfo>();
  /// <summary>
  /// 用户信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DDZ_CGSPlayerInfo> Pis {
    get { return pis_; }
  }

  /// <summary>Field number for the "ptr" field.</summary>
  public const int PtrFieldNumber = 5;
  private global::DDZ_CGSTableRule ptr_;
  /// <summary>
  /// 桌子规则
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DDZ_CGSTableRule Ptr {
    get { return ptr_; }
    set {
      ptr_ = value;
    }
  }

  /// <summary>Field number for the "rule_str" field.</summary>
  public const int RuleStrFieldNumber = 6;
  private string ruleStr_ = "";
  /// <summary>
  /// 桌子属性字符串 空格隔开
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RuleStr {
    get { return ruleStr_; }
    set {
      ruleStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSGameEnterAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSGameEnterAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (StatusGame != other.StatusGame) return false;
    if (Seat != other.Seat) return false;
    if(!pis_.Equals(other.pis_)) return false;
    if (!object.Equals(Ptr, other.Ptr)) return false;
    if (RuleStr != other.RuleStr) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (StatusGame != 0) hash ^= StatusGame.GetHashCode();
    if (Seat != 0) hash ^= Seat.GetHashCode();
    hash ^= pis_.GetHashCode();
    if (ptr_ != null) hash ^= Ptr.GetHashCode();
    if (RuleStr.Length != 0) hash ^= RuleStr.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (StatusGame != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(StatusGame);
    }
    if (Seat != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Seat);
    }
    pis_.WriteTo(output, _repeated_pis_codec);
    if (ptr_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Ptr);
    }
    if (RuleStr.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(RuleStr);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (StatusGame != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusGame);
    }
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    size += pis_.CalculateSize(_repeated_pis_codec);
    if (ptr_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ptr);
    }
    if (RuleStr.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RuleStr);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSGameEnterAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.StatusGame != 0) {
      StatusGame = other.StatusGame;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    pis_.Add(other.pis_);
    if (other.ptr_ != null) {
      if (ptr_ == null) {
        ptr_ = new global::DDZ_CGSTableRule();
      }
      Ptr.MergeFrom(other.Ptr);
    }
    if (other.RuleStr.Length != 0) {
      RuleStr = other.RuleStr;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          StatusGame = input.ReadInt32();
          break;
        }
        case 24: {
          Seat = input.ReadInt32();
          break;
        }
        case 34: {
          pis_.AddEntriesFrom(input, _repeated_pis_codec);
          break;
        }
        case 42: {
          if (ptr_ == null) {
            ptr_ = new global::DDZ_CGSTableRule();
          }
          input.ReadMessage(ptr_);
          break;
        }
        case 50: {
          RuleStr = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_CLI_GS_REQ_PLAYERREADY       //准备就绪
/// </summary>
public sealed partial class DDZ_CGSPlayerReadyReq : pb::IMessage<DDZ_CGSPlayerReadyReq> {
  private static readonly pb::MessageParser<DDZ_CGSPlayerReadyReq> _parser = new pb::MessageParser<DDZ_CGSPlayerReadyReq>(() => new DDZ_CGSPlayerReadyReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSPlayerReadyReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[121]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerReadyReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerReadyReq(DDZ_CGSPlayerReadyReq other) : this() {
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerReadyReq Clone() {
    return new DDZ_CGSPlayerReadyReq(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///  0:准备  2:取消准备
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSPlayerReadyReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSPlayerReadyReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSPlayerReadyReq other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DDZ_CGSPlayerReadyAck : pb::IMessage<DDZ_CGSPlayerReadyAck> {
  private static readonly pb::MessageParser<DDZ_CGSPlayerReadyAck> _parser = new pb::MessageParser<DDZ_CGSPlayerReadyAck>(() => new DDZ_CGSPlayerReadyAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSPlayerReadyAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[122]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerReadyAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerReadyAck(DDZ_CGSPlayerReadyAck other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerReadyAck Clone() {
    return new DDZ_CGSPlayerReadyAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSPlayerReadyAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSPlayerReadyAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSPlayerReadyAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_CLI_GS_REQ_CALLSCORE         //叫分
/// </summary>
public sealed partial class DDZ_CGSCallScoreReq : pb::IMessage<DDZ_CGSCallScoreReq> {
  private static readonly pb::MessageParser<DDZ_CGSCallScoreReq> _parser = new pb::MessageParser<DDZ_CGSCallScoreReq>(() => new DDZ_CGSCallScoreReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSCallScoreReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[123]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSCallScoreReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSCallScoreReq(DDZ_CGSCallScoreReq other) : this() {
    score_ = other.score_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSCallScoreReq Clone() {
    return new DDZ_CGSCallScoreReq(this);
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 1;
  private int score_;
  /// <summary>
  /// 叫多少分: 0-不叫 1,2,3=分数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Score {
    get { return score_; }
    set {
      score_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSCallScoreReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSCallScoreReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Score != other.Score) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Score != 0) hash ^= Score.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Score != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Score);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Score != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSCallScoreReq other) {
    if (other == null) {
      return;
    }
    if (other.Score != 0) {
      Score = other.Score;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Score = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DDZ_CGSCallScoreAck : pb::IMessage<DDZ_CGSCallScoreAck> {
  private static readonly pb::MessageParser<DDZ_CGSCallScoreAck> _parser = new pb::MessageParser<DDZ_CGSCallScoreAck>(() => new DDZ_CGSCallScoreAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSCallScoreAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[124]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSCallScoreAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSCallScoreAck(DDZ_CGSCallScoreAck other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSCallScoreAck Clone() {
    return new DDZ_CGSCallScoreAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSCallScoreAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSCallScoreAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSCallScoreAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_CLI_GS_REQ_CALLLORD          //抢地主规则：叫地主
/// </summary>
public sealed partial class DDZ_CGSCallLordReq : pb::IMessage<DDZ_CGSCallLordReq> {
  private static readonly pb::MessageParser<DDZ_CGSCallLordReq> _parser = new pb::MessageParser<DDZ_CGSCallLordReq>(() => new DDZ_CGSCallLordReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSCallLordReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[125]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSCallLordReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSCallLordReq(DDZ_CGSCallLordReq other) : this() {
    callLord_ = other.callLord_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSCallLordReq Clone() {
    return new DDZ_CGSCallLordReq(this);
  }

  /// <summary>Field number for the "call_lord" field.</summary>
  public const int CallLordFieldNumber = 1;
  private int callLord_;
  /// <summary>
  /// 0：不叫地主 1：叫地主
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CallLord {
    get { return callLord_; }
    set {
      callLord_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSCallLordReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSCallLordReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CallLord != other.CallLord) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CallLord != 0) hash ^= CallLord.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CallLord != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(CallLord);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CallLord != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallLord);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSCallLordReq other) {
    if (other == null) {
      return;
    }
    if (other.CallLord != 0) {
      CallLord = other.CallLord;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          CallLord = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DDZ_CGSCallLordAck : pb::IMessage<DDZ_CGSCallLordAck> {
  private static readonly pb::MessageParser<DDZ_CGSCallLordAck> _parser = new pb::MessageParser<DDZ_CGSCallLordAck>(() => new DDZ_CGSCallLordAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSCallLordAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[126]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSCallLordAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSCallLordAck(DDZ_CGSCallLordAck other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSCallLordAck Clone() {
    return new DDZ_CGSCallLordAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSCallLordAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSCallLordAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSCallLordAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_CLI_GS_REQ_GRABLORD          //抢地主规则：抢地主
/// </summary>
public sealed partial class DDZ_CGSGrabLordReq : pb::IMessage<DDZ_CGSGrabLordReq> {
  private static readonly pb::MessageParser<DDZ_CGSGrabLordReq> _parser = new pb::MessageParser<DDZ_CGSGrabLordReq>(() => new DDZ_CGSGrabLordReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSGrabLordReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[127]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGrabLordReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGrabLordReq(DDZ_CGSGrabLordReq other) : this() {
    grabLord_ = other.grabLord_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGrabLordReq Clone() {
    return new DDZ_CGSGrabLordReq(this);
  }

  /// <summary>Field number for the "grab_lord" field.</summary>
  public const int GrabLordFieldNumber = 1;
  private int grabLord_;
  /// <summary>
  /// 0：不抢地主 1：抢地主
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GrabLord {
    get { return grabLord_; }
    set {
      grabLord_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSGrabLordReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSGrabLordReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GrabLord != other.GrabLord) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GrabLord != 0) hash ^= GrabLord.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GrabLord != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(GrabLord);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GrabLord != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GrabLord);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSGrabLordReq other) {
    if (other == null) {
      return;
    }
    if (other.GrabLord != 0) {
      GrabLord = other.GrabLord;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GrabLord = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DDZ_CGSGrabLordAck : pb::IMessage<DDZ_CGSGrabLordAck> {
  private static readonly pb::MessageParser<DDZ_CGSGrabLordAck> _parser = new pb::MessageParser<DDZ_CGSGrabLordAck>(() => new DDZ_CGSGrabLordAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSGrabLordAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[128]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGrabLordAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGrabLordAck(DDZ_CGSGrabLordAck other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGrabLordAck Clone() {
    return new DDZ_CGSGrabLordAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSGrabLordAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSGrabLordAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSGrabLordAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_CLI_GS_REQ_TAKEOUT           //出牌
/// </summary>
public sealed partial class DDZ_CGSTakeoutCardReq : pb::IMessage<DDZ_CGSTakeoutCardReq> {
  private static readonly pb::MessageParser<DDZ_CGSTakeoutCardReq> _parser = new pb::MessageParser<DDZ_CGSTakeoutCardReq>(() => new DDZ_CGSTakeoutCardReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSTakeoutCardReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[129]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTakeoutCardReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTakeoutCardReq(DDZ_CGSTakeoutCardReq other) : this() {
    cards_ = other.cards_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTakeoutCardReq Clone() {
    return new DDZ_CGSTakeoutCardReq(this);
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_cards_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 出牌数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Cards {
    get { return cards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSTakeoutCardReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSTakeoutCardReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cards_.Equals(other.cards_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cards_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cards_.WriteTo(output, _repeated_cards_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cards_.CalculateSize(_repeated_cards_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSTakeoutCardReq other) {
    if (other == null) {
      return;
    }
    cards_.Add(other.cards_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DDZ_CGSTakeoutCardAck : pb::IMessage<DDZ_CGSTakeoutCardAck> {
  private static readonly pb::MessageParser<DDZ_CGSTakeoutCardAck> _parser = new pb::MessageParser<DDZ_CGSTakeoutCardAck>(() => new DDZ_CGSTakeoutCardAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSTakeoutCardAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[130]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTakeoutCardAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTakeoutCardAck(DDZ_CGSTakeoutCardAck other) : this() {
    result_ = other.result_;
    selfCardInfo_ = other.selfCardInfo_.Clone();
    allCardNum_ = other.allCardNum_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTakeoutCardAck Clone() {
    return new DDZ_CGSTakeoutCardAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "self_card_info" field.</summary>
  public const int SelfCardInfoFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_selfCardInfo_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> selfCardInfo_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 玩家自己手牌信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> SelfCardInfo {
    get { return selfCardInfo_; }
  }

  /// <summary>Field number for the "all_card_num" field.</summary>
  public const int AllCardNumFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_allCardNum_codec
      = pb::FieldCodec.ForInt32(26);
  private readonly pbc::RepeatedField<int> allCardNum_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 三个玩家手牌张数[座位号排列]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> AllCardNum {
    get { return allCardNum_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSTakeoutCardAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSTakeoutCardAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!selfCardInfo_.Equals(other.selfCardInfo_)) return false;
    if(!allCardNum_.Equals(other.allCardNum_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= selfCardInfo_.GetHashCode();
    hash ^= allCardNum_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    selfCardInfo_.WriteTo(output, _repeated_selfCardInfo_codec);
    allCardNum_.WriteTo(output, _repeated_allCardNum_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += selfCardInfo_.CalculateSize(_repeated_selfCardInfo_codec);
    size += allCardNum_.CalculateSize(_repeated_allCardNum_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSTakeoutCardAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    selfCardInfo_.Add(other.selfCardInfo_);
    allCardNum_.Add(other.allCardNum_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          selfCardInfo_.AddEntriesFrom(input, _repeated_selfCardInfo_codec);
          break;
        }
        case 26:
        case 24: {
          allCardNum_.AddEntriesFrom(input, _repeated_allCardNum_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_CLI_GS_REQ_TAKEOUT_LAIZI     //癞子出牌
/// </summary>
public sealed partial class DDZ_CGSTakeoutLaiziCardReq : pb::IMessage<DDZ_CGSTakeoutLaiziCardReq> {
  private static readonly pb::MessageParser<DDZ_CGSTakeoutLaiziCardReq> _parser = new pb::MessageParser<DDZ_CGSTakeoutLaiziCardReq>(() => new DDZ_CGSTakeoutLaiziCardReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSTakeoutLaiziCardReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[131]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTakeoutLaiziCardReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTakeoutLaiziCardReq(DDZ_CGSTakeoutLaiziCardReq other) : this() {
    cards_ = other.cards_.Clone();
    replaceInfo_ = other.replaceInfo_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTakeoutLaiziCardReq Clone() {
    return new DDZ_CGSTakeoutLaiziCardReq(this);
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_cards_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 出牌数据 牌的实际编号(0-53)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Cards {
    get { return cards_; }
  }

  /// <summary>Field number for the "replace_info" field.</summary>
  public const int ReplaceInfoFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_replaceInfo_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> replaceInfo_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 替换规则 如果有癞子替换 则成对填充此字段
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> ReplaceInfo {
    get { return replaceInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSTakeoutLaiziCardReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSTakeoutLaiziCardReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cards_.Equals(other.cards_)) return false;
    if(!replaceInfo_.Equals(other.replaceInfo_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cards_.GetHashCode();
    hash ^= replaceInfo_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cards_.WriteTo(output, _repeated_cards_codec);
    replaceInfo_.WriteTo(output, _repeated_replaceInfo_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cards_.CalculateSize(_repeated_cards_codec);
    size += replaceInfo_.CalculateSize(_repeated_replaceInfo_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSTakeoutLaiziCardReq other) {
    if (other == null) {
      return;
    }
    cards_.Add(other.cards_);
    replaceInfo_.Add(other.replaceInfo_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
        case 18:
        case 16: {
          replaceInfo_.AddEntriesFrom(input, _repeated_replaceInfo_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DDZ_CGSTakeoutLaiziCardAck : pb::IMessage<DDZ_CGSTakeoutLaiziCardAck> {
  private static readonly pb::MessageParser<DDZ_CGSTakeoutLaiziCardAck> _parser = new pb::MessageParser<DDZ_CGSTakeoutLaiziCardAck>(() => new DDZ_CGSTakeoutLaiziCardAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSTakeoutLaiziCardAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[132]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTakeoutLaiziCardAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTakeoutLaiziCardAck(DDZ_CGSTakeoutLaiziCardAck other) : this() {
    result_ = other.result_;
    selfCardInfo_ = other.selfCardInfo_.Clone();
    allCardNum_ = other.allCardNum_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTakeoutLaiziCardAck Clone() {
    return new DDZ_CGSTakeoutLaiziCardAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "self_card_info" field.</summary>
  public const int SelfCardInfoFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_selfCardInfo_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> selfCardInfo_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 玩家自己手牌信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> SelfCardInfo {
    get { return selfCardInfo_; }
  }

  /// <summary>Field number for the "all_card_num" field.</summary>
  public const int AllCardNumFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_allCardNum_codec
      = pb::FieldCodec.ForInt32(26);
  private readonly pbc::RepeatedField<int> allCardNum_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 三个玩家手牌张数[座位号排列]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> AllCardNum {
    get { return allCardNum_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSTakeoutLaiziCardAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSTakeoutLaiziCardAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!selfCardInfo_.Equals(other.selfCardInfo_)) return false;
    if(!allCardNum_.Equals(other.allCardNum_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= selfCardInfo_.GetHashCode();
    hash ^= allCardNum_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    selfCardInfo_.WriteTo(output, _repeated_selfCardInfo_codec);
    allCardNum_.WriteTo(output, _repeated_allCardNum_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += selfCardInfo_.CalculateSize(_repeated_selfCardInfo_codec);
    size += allCardNum_.CalculateSize(_repeated_allCardNum_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSTakeoutLaiziCardAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    selfCardInfo_.Add(other.selfCardInfo_);
    allCardNum_.Add(other.allCardNum_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          selfCardInfo_.AddEntriesFrom(input, _repeated_selfCardInfo_codec);
          break;
        }
        case 26:
        case 24: {
          allCardNum_.AddEntriesFrom(input, _repeated_allCardNum_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_STATUSUPDATE      //游戏状态
/// </summary>
public sealed partial class DDZ_CGSStatusUpdateNtf : pb::IMessage<DDZ_CGSStatusUpdateNtf> {
  private static readonly pb::MessageParser<DDZ_CGSStatusUpdateNtf> _parser = new pb::MessageParser<DDZ_CGSStatusUpdateNtf>(() => new DDZ_CGSStatusUpdateNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSStatusUpdateNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[133]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSStatusUpdateNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSStatusUpdateNtf(DDZ_CGSStatusUpdateNtf other) : this() {
    statusGame_ = other.statusGame_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSStatusUpdateNtf Clone() {
    return new DDZ_CGSStatusUpdateNtf(this);
  }

  /// <summary>Field number for the "status_game" field.</summary>
  public const int StatusGameFieldNumber = 1;
  private int statusGame_;
  /// <summary>
  /// 游戏当前状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StatusGame {
    get { return statusGame_; }
    set {
      statusGame_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSStatusUpdateNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSStatusUpdateNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StatusGame != other.StatusGame) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StatusGame != 0) hash ^= StatusGame.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StatusGame != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(StatusGame);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StatusGame != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusGame);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSStatusUpdateNtf other) {
    if (other == null) {
      return;
    }
    if (other.StatusGame != 0) {
      StatusGame = other.StatusGame;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          StatusGame = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_PLYONLINE         //上线
/// </summary>
public sealed partial class DDZ_CGSPlayerOnLineNtf : pb::IMessage<DDZ_CGSPlayerOnLineNtf> {
  private static readonly pb::MessageParser<DDZ_CGSPlayerOnLineNtf> _parser = new pb::MessageParser<DDZ_CGSPlayerOnLineNtf>(() => new DDZ_CGSPlayerOnLineNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSPlayerOnLineNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[134]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerOnLineNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerOnLineNtf(DDZ_CGSPlayerOnLineNtf other) : this() {
    seat_ = other.seat_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerOnLineNtf Clone() {
    return new DDZ_CGSPlayerOnLineNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 用户座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSPlayerOnLineNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSPlayerOnLineNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSPlayerOnLineNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_PLYOFFLINE        //离线
/// </summary>
public sealed partial class DDZ_CGSPlayerOffLineNtf : pb::IMessage<DDZ_CGSPlayerOffLineNtf> {
  private static readonly pb::MessageParser<DDZ_CGSPlayerOffLineNtf> _parser = new pb::MessageParser<DDZ_CGSPlayerOffLineNtf>(() => new DDZ_CGSPlayerOffLineNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSPlayerOffLineNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[135]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerOffLineNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerOffLineNtf(DDZ_CGSPlayerOffLineNtf other) : this() {
    seat_ = other.seat_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerOffLineNtf Clone() {
    return new DDZ_CGSPlayerOffLineNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSPlayerOffLineNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSPlayerOffLineNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSPlayerOffLineNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_PLYREADY          //准备
/// </summary>
public sealed partial class DDZ_CGSPlayerReadyNtf : pb::IMessage<DDZ_CGSPlayerReadyNtf> {
  private static readonly pb::MessageParser<DDZ_CGSPlayerReadyNtf> _parser = new pb::MessageParser<DDZ_CGSPlayerReadyNtf>(() => new DDZ_CGSPlayerReadyNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSPlayerReadyNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[136]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerReadyNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerReadyNtf(DDZ_CGSPlayerReadyNtf other) : this() {
    seat_ = other.seat_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPlayerReadyNtf Clone() {
    return new DDZ_CGSPlayerReadyNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSPlayerReadyNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSPlayerReadyNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSPlayerReadyNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_DEALCARD          //发牌
/// </summary>
public sealed partial class DDZ_CGSDealCardNtf : pb::IMessage<DDZ_CGSDealCardNtf> {
  private static readonly pb::MessageParser<DDZ_CGSDealCardNtf> _parser = new pb::MessageParser<DDZ_CGSDealCardNtf>(() => new DDZ_CGSDealCardNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSDealCardNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[137]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDealCardNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDealCardNtf(DDZ_CGSDealCardNtf other) : this() {
    seat_ = other.seat_;
    callType_ = other.callType_;
    CardHand = other.cardHand_ != null ? other.CardHand.Clone() : null;
    cardRule_ = other.cardRule_;
    laiziCard_ = other.laiziCard_;
    mingSeat_ = other.mingSeat_;
    mingCard_ = other.mingCard_;
    remainderCard_ = other.remainderCard_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDealCardNtf Clone() {
    return new DDZ_CGSDealCardNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 第一个出牌座位
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "call_type" field.</summary>
  public const int CallTypeFieldNumber = 2;
  private int callType_;
  /// <summary>
  ///  叫分模式 0:普通版 1:抢地主版[default = 0]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CallType {
    get { return callType_; }
    set {
      callType_ = value;
    }
  }

  /// <summary>Field number for the "card_hand" field.</summary>
  public const int CardHandFieldNumber = 3;
  private global::DDZ_CGSHandCardItem cardHand_;
  /// <summary>
  ///  所有用户的手牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DDZ_CGSHandCardItem CardHand {
    get { return cardHand_; }
    set {
      cardHand_ = value;
    }
  }

  /// <summary>Field number for the "card_rule" field.</summary>
  public const int CardRuleFieldNumber = 4;
  private int cardRule_;
  /// <summary>
  ///  玩法规则 0:普通模式 1:癞子模式
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CardRule {
    get { return cardRule_; }
    set {
      cardRule_ = value;
    }
  }

  /// <summary>Field number for the "laizi_card" field.</summary>
  public const int LaiziCardFieldNumber = 5;
  private int laiziCard_;
  /// <summary>
  ///  癞子牌型 0-12 分别表示3,4,...A,2
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LaiziCard {
    get { return laiziCard_; }
    set {
      laiziCard_ = value;
    }
  }

  /// <summary>Field number for the "ming_seat" field.</summary>
  public const int MingSeatFieldNumber = 6;
  private int mingSeat_;
  /// <summary>
  ///  发到明牌的玩家
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MingSeat {
    get { return mingSeat_; }
    set {
      mingSeat_ = value;
    }
  }

  /// <summary>Field number for the "ming_card" field.</summary>
  public const int MingCardFieldNumber = 7;
  private int mingCard_;
  /// <summary>
  ///  明牌数值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MingCard {
    get { return mingCard_; }
    set {
      mingCard_ = value;
    }
  }

  /// <summary>Field number for the "remainder_card" field.</summary>
  public const int RemainderCardFieldNumber = 8;
  private static readonly pb::FieldCodec<int> _repeated_remainderCard_codec
      = pb::FieldCodec.ForInt32(66);
  private readonly pbc::RepeatedField<int> remainderCard_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 玩家剩余手牌 序号0,1,2,3
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> RemainderCard {
    get { return remainderCard_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSDealCardNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSDealCardNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (CallType != other.CallType) return false;
    if (!object.Equals(CardHand, other.CardHand)) return false;
    if (CardRule != other.CardRule) return false;
    if (LaiziCard != other.LaiziCard) return false;
    if (MingSeat != other.MingSeat) return false;
    if (MingCard != other.MingCard) return false;
    if(!remainderCard_.Equals(other.remainderCard_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (CallType != 0) hash ^= CallType.GetHashCode();
    if (cardHand_ != null) hash ^= CardHand.GetHashCode();
    if (CardRule != 0) hash ^= CardRule.GetHashCode();
    if (LaiziCard != 0) hash ^= LaiziCard.GetHashCode();
    if (MingSeat != 0) hash ^= MingSeat.GetHashCode();
    if (MingCard != 0) hash ^= MingCard.GetHashCode();
    hash ^= remainderCard_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (CallType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CallType);
    }
    if (cardHand_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(CardHand);
    }
    if (CardRule != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(CardRule);
    }
    if (LaiziCard != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(LaiziCard);
    }
    if (MingSeat != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(MingSeat);
    }
    if (MingCard != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(MingCard);
    }
    remainderCard_.WriteTo(output, _repeated_remainderCard_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (CallType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallType);
    }
    if (cardHand_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardHand);
    }
    if (CardRule != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardRule);
    }
    if (LaiziCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaiziCard);
    }
    if (MingSeat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MingSeat);
    }
    if (MingCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MingCard);
    }
    size += remainderCard_.CalculateSize(_repeated_remainderCard_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSDealCardNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.CallType != 0) {
      CallType = other.CallType;
    }
    if (other.cardHand_ != null) {
      if (cardHand_ == null) {
        cardHand_ = new global::DDZ_CGSHandCardItem();
      }
      CardHand.MergeFrom(other.CardHand);
    }
    if (other.CardRule != 0) {
      CardRule = other.CardRule;
    }
    if (other.LaiziCard != 0) {
      LaiziCard = other.LaiziCard;
    }
    if (other.MingSeat != 0) {
      MingSeat = other.MingSeat;
    }
    if (other.MingCard != 0) {
      MingCard = other.MingCard;
    }
    remainderCard_.Add(other.remainderCard_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 16: {
          CallType = input.ReadInt32();
          break;
        }
        case 26: {
          if (cardHand_ == null) {
            cardHand_ = new global::DDZ_CGSHandCardItem();
          }
          input.ReadMessage(cardHand_);
          break;
        }
        case 32: {
          CardRule = input.ReadInt32();
          break;
        }
        case 40: {
          LaiziCard = input.ReadInt32();
          break;
        }
        case 48: {
          MingSeat = input.ReadInt32();
          break;
        }
        case 56: {
          MingCard = input.ReadInt32();
          break;
        }
        case 66:
        case 64: {
          remainderCard_.AddEntriesFrom(input, _repeated_remainderCard_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// #define CGS_MSG_CLI_GS_REQ_SETBASECARD		//扣底
/// </summary>
public sealed partial class DDZ_CGSSetBaseCardReq : pb::IMessage<DDZ_CGSSetBaseCardReq> {
  private static readonly pb::MessageParser<DDZ_CGSSetBaseCardReq> _parser = new pb::MessageParser<DDZ_CGSSetBaseCardReq>(() => new DDZ_CGSSetBaseCardReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSSetBaseCardReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[138]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSetBaseCardReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSetBaseCardReq(DDZ_CGSSetBaseCardReq other) : this() {
    cardsRes_ = other.cardsRes_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSetBaseCardReq Clone() {
    return new DDZ_CGSSetBaseCardReq(this);
  }

  /// <summary>Field number for the "cards_res" field.</summary>
  public const int CardsResFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_cardsRes_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> cardsRes_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 底牌内容
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> CardsRes {
    get { return cardsRes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSSetBaseCardReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSSetBaseCardReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cardsRes_.Equals(other.cardsRes_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cardsRes_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cardsRes_.WriteTo(output, _repeated_cardsRes_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cardsRes_.CalculateSize(_repeated_cardsRes_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSSetBaseCardReq other) {
    if (other == null) {
      return;
    }
    cardsRes_.Add(other.cardsRes_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          cardsRes_.AddEntriesFrom(input, _repeated_cardsRes_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DDZ_CGSSetBaseCardAck : pb::IMessage<DDZ_CGSSetBaseCardAck> {
  private static readonly pb::MessageParser<DDZ_CGSSetBaseCardAck> _parser = new pb::MessageParser<DDZ_CGSSetBaseCardAck>(() => new DDZ_CGSSetBaseCardAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSSetBaseCardAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[139]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSetBaseCardAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSetBaseCardAck(DDZ_CGSSetBaseCardAck other) : this() {
    result_ = other.result_;
    cardsRes_ = other.cardsRes_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSetBaseCardAck Clone() {
    return new DDZ_CGSSetBaseCardAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "cards_res" field.</summary>
  public const int CardsResFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_cardsRes_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> cardsRes_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 底牌内容
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> CardsRes {
    get { return cardsRes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSSetBaseCardAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSSetBaseCardAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!cardsRes_.Equals(other.cardsRes_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= cardsRes_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    cardsRes_.WriteTo(output, _repeated_cardsRes_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += cardsRes_.CalculateSize(_repeated_cardsRes_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSSetBaseCardAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    cardsRes_.Add(other.cardsRes_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          cardsRes_.AddEntriesFrom(input, _repeated_cardsRes_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_SETBASECARD		//扣底广播
/// </summary>
public sealed partial class DDZ_CGSSetBaseCardNtf : pb::IMessage<DDZ_CGSSetBaseCardNtf> {
  private static readonly pb::MessageParser<DDZ_CGSSetBaseCardNtf> _parser = new pb::MessageParser<DDZ_CGSSetBaseCardNtf>(() => new DDZ_CGSSetBaseCardNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSSetBaseCardNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[140]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSetBaseCardNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSetBaseCardNtf(DDZ_CGSSetBaseCardNtf other) : this() {
    seat_ = other.seat_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSetBaseCardNtf Clone() {
    return new DDZ_CGSSetBaseCardNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 第一个出牌座位
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSSetBaseCardNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSSetBaseCardNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSSetBaseCardNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_CALLSCORE         //普通叫分模式：叫分
/// </summary>
public sealed partial class DDZ_CGSCallScoreNtf : pb::IMessage<DDZ_CGSCallScoreNtf> {
  private static readonly pb::MessageParser<DDZ_CGSCallScoreNtf> _parser = new pb::MessageParser<DDZ_CGSCallScoreNtf>(() => new DDZ_CGSCallScoreNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSCallScoreNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[141]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSCallScoreNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSCallScoreNtf(DDZ_CGSCallScoreNtf other) : this() {
    seat_ = other.seat_;
    seatNext_ = other.seatNext_;
    score_ = other.score_;
    timeThink_ = other.timeThink_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSCallScoreNtf Clone() {
    return new DDZ_CGSCallScoreNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "seat_next" field.</summary>
  public const int SeatNextFieldNumber = 2;
  private int seatNext_;
  /// <summary>
  /// 下一个叫分座位
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatNext {
    get { return seatNext_; }
    set {
      seatNext_ = value;
    }
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 3;
  private int score_;
  /// <summary>
  /// 叫多少分: 0-不叫 1,2,3=分数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Score {
    get { return score_; }
    set {
      score_ = value;
    }
  }

  /// <summary>Field number for the "time_think" field.</summary>
  public const int TimeThinkFieldNumber = 4;
  private int timeThink_;
  /// <summary>
  /// 下一个叫分座位思考时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeThink {
    get { return timeThink_; }
    set {
      timeThink_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSCallScoreNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSCallScoreNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (SeatNext != other.SeatNext) return false;
    if (Score != other.Score) return false;
    if (TimeThink != other.TimeThink) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (SeatNext != 0) hash ^= SeatNext.GetHashCode();
    if (Score != 0) hash ^= Score.GetHashCode();
    if (TimeThink != 0) hash ^= TimeThink.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (SeatNext != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SeatNext);
    }
    if (Score != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Score);
    }
    if (TimeThink != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TimeThink);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (SeatNext != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNext);
    }
    if (Score != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
    }
    if (TimeThink != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeThink);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSCallScoreNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.SeatNext != 0) {
      SeatNext = other.SeatNext;
    }
    if (other.Score != 0) {
      Score = other.Score;
    }
    if (other.TimeThink != 0) {
      TimeThink = other.TimeThink;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 16: {
          SeatNext = input.ReadInt32();
          break;
        }
        case 24: {
          Score = input.ReadInt32();
          break;
        }
        case 32: {
          TimeThink = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_CALLLORD          //抢地主叫分模式：叫地主
/// </summary>
public sealed partial class DDZ_CGSCallLordNtf : pb::IMessage<DDZ_CGSCallLordNtf> {
  private static readonly pb::MessageParser<DDZ_CGSCallLordNtf> _parser = new pb::MessageParser<DDZ_CGSCallLordNtf>(() => new DDZ_CGSCallLordNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSCallLordNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[142]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSCallLordNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSCallLordNtf(DDZ_CGSCallLordNtf other) : this() {
    seat_ = other.seat_;
    callLord_ = other.callLord_;
    seatNext_ = other.seatNext_;
    timeThink_ = other.timeThink_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSCallLordNtf Clone() {
    return new DDZ_CGSCallLordNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "call_lord" field.</summary>
  public const int CallLordFieldNumber = 2;
  private int callLord_;
  /// <summary>
  /// 0：不叫地主 3：叫地主
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CallLord {
    get { return callLord_; }
    set {
      callLord_ = value;
    }
  }

  /// <summary>Field number for the "seat_next" field.</summary>
  public const int SeatNextFieldNumber = 3;
  private int seatNext_;
  /// <summary>
  /// 下一个叫分座位
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatNext {
    get { return seatNext_; }
    set {
      seatNext_ = value;
    }
  }

  /// <summary>Field number for the "time_think" field.</summary>
  public const int TimeThinkFieldNumber = 4;
  private int timeThink_;
  /// <summary>
  /// 下一个叫分座位思考时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeThink {
    get { return timeThink_; }
    set {
      timeThink_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSCallLordNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSCallLordNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (CallLord != other.CallLord) return false;
    if (SeatNext != other.SeatNext) return false;
    if (TimeThink != other.TimeThink) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (CallLord != 0) hash ^= CallLord.GetHashCode();
    if (SeatNext != 0) hash ^= SeatNext.GetHashCode();
    if (TimeThink != 0) hash ^= TimeThink.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (CallLord != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CallLord);
    }
    if (SeatNext != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SeatNext);
    }
    if (TimeThink != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TimeThink);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (CallLord != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallLord);
    }
    if (SeatNext != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNext);
    }
    if (TimeThink != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeThink);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSCallLordNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.CallLord != 0) {
      CallLord = other.CallLord;
    }
    if (other.SeatNext != 0) {
      SeatNext = other.SeatNext;
    }
    if (other.TimeThink != 0) {
      TimeThink = other.TimeThink;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 16: {
          CallLord = input.ReadInt32();
          break;
        }
        case 24: {
          SeatNext = input.ReadInt32();
          break;
        }
        case 32: {
          TimeThink = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_GRABLORD         //抢地主叫分模式：抢地主
/// </summary>
public sealed partial class DDZ_CGSGrabLordNtf : pb::IMessage<DDZ_CGSGrabLordNtf> {
  private static readonly pb::MessageParser<DDZ_CGSGrabLordNtf> _parser = new pb::MessageParser<DDZ_CGSGrabLordNtf>(() => new DDZ_CGSGrabLordNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSGrabLordNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[143]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGrabLordNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGrabLordNtf(DDZ_CGSGrabLordNtf other) : this() {
    seat_ = other.seat_;
    grabLord_ = other.grabLord_;
    seatNext_ = other.seatNext_;
    timeThink_ = other.timeThink_;
    multiple_ = other.multiple_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGrabLordNtf Clone() {
    return new DDZ_CGSGrabLordNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "grab_lord" field.</summary>
  public const int GrabLordFieldNumber = 2;
  private int grabLord_;
  /// <summary>
  /// 1：不抢地主 2：抢地主
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GrabLord {
    get { return grabLord_; }
    set {
      grabLord_ = value;
    }
  }

  /// <summary>Field number for the "seat_next" field.</summary>
  public const int SeatNextFieldNumber = 3;
  private int seatNext_;
  /// <summary>
  /// 下一个叫分座位
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatNext {
    get { return seatNext_; }
    set {
      seatNext_ = value;
    }
  }

  /// <summary>Field number for the "time_think" field.</summary>
  public const int TimeThinkFieldNumber = 4;
  private int timeThink_;
  /// <summary>
  /// 下一个叫分座位思考时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeThink {
    get { return timeThink_; }
    set {
      timeThink_ = value;
    }
  }

  /// <summary>Field number for the "multiple" field.</summary>
  public const int MultipleFieldNumber = 5;
  private int multiple_;
  /// <summary>
  /// 当前倍数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Multiple {
    get { return multiple_; }
    set {
      multiple_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSGrabLordNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSGrabLordNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (GrabLord != other.GrabLord) return false;
    if (SeatNext != other.SeatNext) return false;
    if (TimeThink != other.TimeThink) return false;
    if (Multiple != other.Multiple) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (GrabLord != 0) hash ^= GrabLord.GetHashCode();
    if (SeatNext != 0) hash ^= SeatNext.GetHashCode();
    if (TimeThink != 0) hash ^= TimeThink.GetHashCode();
    if (Multiple != 0) hash ^= Multiple.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (GrabLord != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GrabLord);
    }
    if (SeatNext != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SeatNext);
    }
    if (TimeThink != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TimeThink);
    }
    if (Multiple != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Multiple);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (GrabLord != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GrabLord);
    }
    if (SeatNext != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNext);
    }
    if (TimeThink != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeThink);
    }
    if (Multiple != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSGrabLordNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.GrabLord != 0) {
      GrabLord = other.GrabLord;
    }
    if (other.SeatNext != 0) {
      SeatNext = other.SeatNext;
    }
    if (other.TimeThink != 0) {
      TimeThink = other.TimeThink;
    }
    if (other.Multiple != 0) {
      Multiple = other.Multiple;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 16: {
          GrabLord = input.ReadInt32();
          break;
        }
        case 24: {
          SeatNext = input.ReadInt32();
          break;
        }
        case 32: {
          TimeThink = input.ReadInt32();
          break;
        }
        case 40: {
          Multiple = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_POKERFLOW         //流局
/// </summary>
public sealed partial class DDZ_CGSPokerFlowNtf : pb::IMessage<DDZ_CGSPokerFlowNtf> {
  private static readonly pb::MessageParser<DDZ_CGSPokerFlowNtf> _parser = new pb::MessageParser<DDZ_CGSPokerFlowNtf>(() => new DDZ_CGSPokerFlowNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSPokerFlowNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[144]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPokerFlowNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPokerFlowNtf(DDZ_CGSPokerFlowNtf other) : this() {
    cardHand_ = other.cardHand_.Clone();
    cardsRes_ = other.cardsRes_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSPokerFlowNtf Clone() {
    return new DDZ_CGSPokerFlowNtf(this);
  }

  /// <summary>Field number for the "card_hand" field.</summary>
  public const int CardHandFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DDZ_CGSHandCardItem> _repeated_cardHand_codec
      = pb::FieldCodec.ForMessage(10, global::DDZ_CGSHandCardItem.Parser);
  private readonly pbc::RepeatedField<global::DDZ_CGSHandCardItem> cardHand_ = new pbc::RepeatedField<global::DDZ_CGSHandCardItem>();
  /// <summary>
  /// 玩家手牌[数组下表代表座位号]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DDZ_CGSHandCardItem> CardHand {
    get { return cardHand_; }
  }

  /// <summary>Field number for the "cards_res" field.</summary>
  public const int CardsResFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_cardsRes_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> cardsRes_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 底牌内容
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> CardsRes {
    get { return cardsRes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSPokerFlowNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSPokerFlowNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cardHand_.Equals(other.cardHand_)) return false;
    if(!cardsRes_.Equals(other.cardsRes_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cardHand_.GetHashCode();
    hash ^= cardsRes_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cardHand_.WriteTo(output, _repeated_cardHand_codec);
    cardsRes_.WriteTo(output, _repeated_cardsRes_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cardHand_.CalculateSize(_repeated_cardHand_codec);
    size += cardsRes_.CalculateSize(_repeated_cardsRes_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSPokerFlowNtf other) {
    if (other == null) {
      return;
    }
    cardHand_.Add(other.cardHand_);
    cardsRes_.Add(other.cardsRes_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          cardHand_.AddEntriesFrom(input, _repeated_cardHand_codec);
          break;
        }
        case 18:
        case 16: {
          cardsRes_.AddEntriesFrom(input, _repeated_cardsRes_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_SETLORD           //地主确定
/// </summary>
public sealed partial class DDZ_CGSSetLordNtf : pb::IMessage<DDZ_CGSSetLordNtf> {
  private static readonly pb::MessageParser<DDZ_CGSSetLordNtf> _parser = new pb::MessageParser<DDZ_CGSSetLordNtf>(() => new DDZ_CGSSetLordNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSSetLordNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[145]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSetLordNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSetLordNtf(DDZ_CGSSetLordNtf other) : this() {
    seatLord_ = other.seatLord_;
    timeThink_ = other.timeThink_;
    multiple_ = other.multiple_;
    laiziCard_ = other.laiziCard_;
    cardsRes_ = other.cardsRes_.Clone();
    letCardCount_ = other.letCardCount_;
    grabLordCount_ = other.grabLordCount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSetLordNtf Clone() {
    return new DDZ_CGSSetLordNtf(this);
  }

  /// <summary>Field number for the "seat_lord" field.</summary>
  public const int SeatLordFieldNumber = 1;
  private int seatLord_;
  /// <summary>
  /// 地主座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatLord {
    get { return seatLord_; }
    set {
      seatLord_ = value;
    }
  }

  /// <summary>Field number for the "time_think" field.</summary>
  public const int TimeThinkFieldNumber = 2;
  private int timeThink_;
  /// <summary>
  /// 地主第一次出牌思考时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeThink {
    get { return timeThink_; }
    set {
      timeThink_ = value;
    }
  }

  /// <summary>Field number for the "multiple" field.</summary>
  public const int MultipleFieldNumber = 3;
  private int multiple_;
  /// <summary>
  /// 当前倍数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Multiple {
    get { return multiple_; }
    set {
      multiple_ = value;
    }
  }

  /// <summary>Field number for the "laizi_card" field.</summary>
  public const int LaiziCardFieldNumber = 4;
  private int laiziCard_;
  /// <summary>
  /// 癞子牌(0-12)分别表示3,4,...A,2为癞子牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LaiziCard {
    get { return laiziCard_; }
    set {
      laiziCard_ = value;
    }
  }

  /// <summary>Field number for the "cards_res" field.</summary>
  public const int CardsResFieldNumber = 5;
  private static readonly pb::FieldCodec<int> _repeated_cardsRes_codec
      = pb::FieldCodec.ForInt32(42);
  private readonly pbc::RepeatedField<int> cardsRes_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 底牌内容
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> CardsRes {
    get { return cardsRes_; }
  }

  /// <summary>Field number for the "let_card_count" field.</summary>
  public const int LetCardCountFieldNumber = 6;
  private int letCardCount_;
  /// <summary>
  /// 需让牌几张[2人场]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LetCardCount {
    get { return letCardCount_; }
    set {
      letCardCount_ = value;
    }
  }

  /// <summary>Field number for the "grab_lord_count" field.</summary>
  public const int GrabLordCountFieldNumber = 7;
  private int grabLordCount_;
  /// <summary>
  /// 抢了几次地主[2人场]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GrabLordCount {
    get { return grabLordCount_; }
    set {
      grabLordCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSSetLordNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSSetLordNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SeatLord != other.SeatLord) return false;
    if (TimeThink != other.TimeThink) return false;
    if (Multiple != other.Multiple) return false;
    if (LaiziCard != other.LaiziCard) return false;
    if(!cardsRes_.Equals(other.cardsRes_)) return false;
    if (LetCardCount != other.LetCardCount) return false;
    if (GrabLordCount != other.GrabLordCount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SeatLord != 0) hash ^= SeatLord.GetHashCode();
    if (TimeThink != 0) hash ^= TimeThink.GetHashCode();
    if (Multiple != 0) hash ^= Multiple.GetHashCode();
    if (LaiziCard != 0) hash ^= LaiziCard.GetHashCode();
    hash ^= cardsRes_.GetHashCode();
    if (LetCardCount != 0) hash ^= LetCardCount.GetHashCode();
    if (GrabLordCount != 0) hash ^= GrabLordCount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SeatLord != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SeatLord);
    }
    if (TimeThink != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TimeThink);
    }
    if (Multiple != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Multiple);
    }
    if (LaiziCard != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(LaiziCard);
    }
    cardsRes_.WriteTo(output, _repeated_cardsRes_codec);
    if (LetCardCount != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(LetCardCount);
    }
    if (GrabLordCount != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(GrabLordCount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SeatLord != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatLord);
    }
    if (TimeThink != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeThink);
    }
    if (Multiple != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
    }
    if (LaiziCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaiziCard);
    }
    size += cardsRes_.CalculateSize(_repeated_cardsRes_codec);
    if (LetCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LetCardCount);
    }
    if (GrabLordCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GrabLordCount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSSetLordNtf other) {
    if (other == null) {
      return;
    }
    if (other.SeatLord != 0) {
      SeatLord = other.SeatLord;
    }
    if (other.TimeThink != 0) {
      TimeThink = other.TimeThink;
    }
    if (other.Multiple != 0) {
      Multiple = other.Multiple;
    }
    if (other.LaiziCard != 0) {
      LaiziCard = other.LaiziCard;
    }
    cardsRes_.Add(other.cardsRes_);
    if (other.LetCardCount != 0) {
      LetCardCount = other.LetCardCount;
    }
    if (other.GrabLordCount != 0) {
      GrabLordCount = other.GrabLordCount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          SeatLord = input.ReadInt32();
          break;
        }
        case 16: {
          TimeThink = input.ReadInt32();
          break;
        }
        case 24: {
          Multiple = input.ReadInt32();
          break;
        }
        case 32: {
          LaiziCard = input.ReadInt32();
          break;
        }
        case 42:
        case 40: {
          cardsRes_.AddEntriesFrom(input, _repeated_cardsRes_codec);
          break;
        }
        case 48: {
          LetCardCount = input.ReadInt32();
          break;
        }
        case 56: {
          GrabLordCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_SET_CALLLORD      // 确认叫地主
/// </summary>
public sealed partial class DDZ_CGSSetCallLordNtf : pb::IMessage<DDZ_CGSSetCallLordNtf> {
  private static readonly pb::MessageParser<DDZ_CGSSetCallLordNtf> _parser = new pb::MessageParser<DDZ_CGSSetCallLordNtf>(() => new DDZ_CGSSetCallLordNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSSetCallLordNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[146]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSetCallLordNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSetCallLordNtf(DDZ_CGSSetCallLordNtf other) : this() {
    seatCalllord_ = other.seatCalllord_;
    firstGrab_ = other.firstGrab_;
    timeThink_ = other.timeThink_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSetCallLordNtf Clone() {
    return new DDZ_CGSSetCallLordNtf(this);
  }

  /// <summary>Field number for the "seat_calllord" field.</summary>
  public const int SeatCalllordFieldNumber = 1;
  private int seatCalllord_;
  /// <summary>
  /// 叫地主的座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatCalllord {
    get { return seatCalllord_; }
    set {
      seatCalllord_ = value;
    }
  }

  /// <summary>Field number for the "first_grab" field.</summary>
  public const int FirstGrabFieldNumber = 2;
  private int firstGrab_;
  /// <summary>
  /// 首先抢地主的座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FirstGrab {
    get { return firstGrab_; }
    set {
      firstGrab_ = value;
    }
  }

  /// <summary>Field number for the "time_think" field.</summary>
  public const int TimeThinkFieldNumber = 3;
  private int timeThink_;
  /// <summary>
  /// 抢地主思考时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeThink {
    get { return timeThink_; }
    set {
      timeThink_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSSetCallLordNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSSetCallLordNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SeatCalllord != other.SeatCalllord) return false;
    if (FirstGrab != other.FirstGrab) return false;
    if (TimeThink != other.TimeThink) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SeatCalllord != 0) hash ^= SeatCalllord.GetHashCode();
    if (FirstGrab != 0) hash ^= FirstGrab.GetHashCode();
    if (TimeThink != 0) hash ^= TimeThink.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SeatCalllord != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SeatCalllord);
    }
    if (FirstGrab != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(FirstGrab);
    }
    if (TimeThink != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TimeThink);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SeatCalllord != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatCalllord);
    }
    if (FirstGrab != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstGrab);
    }
    if (TimeThink != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeThink);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSSetCallLordNtf other) {
    if (other == null) {
      return;
    }
    if (other.SeatCalllord != 0) {
      SeatCalllord = other.SeatCalllord;
    }
    if (other.FirstGrab != 0) {
      FirstGrab = other.FirstGrab;
    }
    if (other.TimeThink != 0) {
      TimeThink = other.TimeThink;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          SeatCalllord = input.ReadInt32();
          break;
        }
        case 16: {
          FirstGrab = input.ReadInt32();
          break;
        }
        case 24: {
          TimeThink = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_TAKEOUT     //出牌
/// </summary>
public sealed partial class DDZ_CGSTakeoutCardNtf : pb::IMessage<DDZ_CGSTakeoutCardNtf> {
  private static readonly pb::MessageParser<DDZ_CGSTakeoutCardNtf> _parser = new pb::MessageParser<DDZ_CGSTakeoutCardNtf>(() => new DDZ_CGSTakeoutCardNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSTakeoutCardNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[147]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTakeoutCardNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTakeoutCardNtf(DDZ_CGSTakeoutCardNtf other) : this() {
    seat_ = other.seat_;
    seatNext_ = other.seatNext_;
    timeThink_ = other.timeThink_;
    cardsTakeout_ = other.cardsTakeout_.Clone();
    multiple_ = other.multiple_;
    bombCount_ = other.bombCount_;
    remainderCard_ = other.remainderCard_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTakeoutCardNtf Clone() {
    return new DDZ_CGSTakeoutCardNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 出牌座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "seat_next" field.</summary>
  public const int SeatNextFieldNumber = 2;
  private int seatNext_;
  /// <summary>
  /// 下一个出牌座位
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatNext {
    get { return seatNext_; }
    set {
      seatNext_ = value;
    }
  }

  /// <summary>Field number for the "time_think" field.</summary>
  public const int TimeThinkFieldNumber = 3;
  private int timeThink_;
  /// <summary>
  /// 下一个出牌座位思考时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeThink {
    get { return timeThink_; }
    set {
      timeThink_ = value;
    }
  }

  /// <summary>Field number for the "cards_takeout" field.</summary>
  public const int CardsTakeoutFieldNumber = 4;
  private static readonly pb::FieldCodec<int> _repeated_cardsTakeout_codec
      = pb::FieldCodec.ForInt32(34);
  private readonly pbc::RepeatedField<int> cardsTakeout_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 出牌数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> CardsTakeout {
    get { return cardsTakeout_; }
  }

  /// <summary>Field number for the "multiple" field.</summary>
  public const int MultipleFieldNumber = 5;
  private int multiple_;
  /// <summary>
  /// 当前倍数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Multiple {
    get { return multiple_; }
    set {
      multiple_ = value;
    }
  }

  /// <summary>Field number for the "bomb_count" field.</summary>
  public const int BombCountFieldNumber = 6;
  private int bombCount_;
  /// <summary>
  /// 当前炸弹个数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BombCount {
    get { return bombCount_; }
    set {
      bombCount_ = value;
    }
  }

  /// <summary>Field number for the "remainder_card" field.</summary>
  public const int RemainderCardFieldNumber = 7;
  private static readonly pb::FieldCodec<int> _repeated_remainderCard_codec
      = pb::FieldCodec.ForInt32(58);
  private readonly pbc::RepeatedField<int> remainderCard_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 玩家剩余手牌 序号0,1,2,3
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> RemainderCard {
    get { return remainderCard_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSTakeoutCardNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSTakeoutCardNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (SeatNext != other.SeatNext) return false;
    if (TimeThink != other.TimeThink) return false;
    if(!cardsTakeout_.Equals(other.cardsTakeout_)) return false;
    if (Multiple != other.Multiple) return false;
    if (BombCount != other.BombCount) return false;
    if(!remainderCard_.Equals(other.remainderCard_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (SeatNext != 0) hash ^= SeatNext.GetHashCode();
    if (TimeThink != 0) hash ^= TimeThink.GetHashCode();
    hash ^= cardsTakeout_.GetHashCode();
    if (Multiple != 0) hash ^= Multiple.GetHashCode();
    if (BombCount != 0) hash ^= BombCount.GetHashCode();
    hash ^= remainderCard_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (SeatNext != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SeatNext);
    }
    if (TimeThink != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TimeThink);
    }
    cardsTakeout_.WriteTo(output, _repeated_cardsTakeout_codec);
    if (Multiple != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Multiple);
    }
    if (BombCount != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(BombCount);
    }
    remainderCard_.WriteTo(output, _repeated_remainderCard_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (SeatNext != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNext);
    }
    if (TimeThink != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeThink);
    }
    size += cardsTakeout_.CalculateSize(_repeated_cardsTakeout_codec);
    if (Multiple != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
    }
    if (BombCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombCount);
    }
    size += remainderCard_.CalculateSize(_repeated_remainderCard_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSTakeoutCardNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.SeatNext != 0) {
      SeatNext = other.SeatNext;
    }
    if (other.TimeThink != 0) {
      TimeThink = other.TimeThink;
    }
    cardsTakeout_.Add(other.cardsTakeout_);
    if (other.Multiple != 0) {
      Multiple = other.Multiple;
    }
    if (other.BombCount != 0) {
      BombCount = other.BombCount;
    }
    remainderCard_.Add(other.remainderCard_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 16: {
          SeatNext = input.ReadInt32();
          break;
        }
        case 24: {
          TimeThink = input.ReadInt32();
          break;
        }
        case 34:
        case 32: {
          cardsTakeout_.AddEntriesFrom(input, _repeated_cardsTakeout_codec);
          break;
        }
        case 40: {
          Multiple = input.ReadInt32();
          break;
        }
        case 48: {
          BombCount = input.ReadInt32();
          break;
        }
        case 58:
        case 56: {
          remainderCard_.AddEntriesFrom(input, _repeated_remainderCard_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_TAKEOUT_LAIZI            //癞子出牌
/// </summary>
public sealed partial class DDZ_CGSTakeoutLaiziCardNtf : pb::IMessage<DDZ_CGSTakeoutLaiziCardNtf> {
  private static readonly pb::MessageParser<DDZ_CGSTakeoutLaiziCardNtf> _parser = new pb::MessageParser<DDZ_CGSTakeoutLaiziCardNtf>(() => new DDZ_CGSTakeoutLaiziCardNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSTakeoutLaiziCardNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[148]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTakeoutLaiziCardNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTakeoutLaiziCardNtf(DDZ_CGSTakeoutLaiziCardNtf other) : this() {
    seat_ = other.seat_;
    seatNext_ = other.seatNext_;
    timeThink_ = other.timeThink_;
    cardsTakeout_ = other.cardsTakeout_.Clone();
    cardsReplace_ = other.cardsReplace_.Clone();
    multiple_ = other.multiple_;
    bombCount_ = other.bombCount_;
    cardsnum_ = other.cardsnum_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSTakeoutLaiziCardNtf Clone() {
    return new DDZ_CGSTakeoutLaiziCardNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 出牌座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "seat_next" field.</summary>
  public const int SeatNextFieldNumber = 2;
  private int seatNext_;
  /// <summary>
  /// 下一个出牌座位
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatNext {
    get { return seatNext_; }
    set {
      seatNext_ = value;
    }
  }

  /// <summary>Field number for the "time_think" field.</summary>
  public const int TimeThinkFieldNumber = 3;
  private int timeThink_;
  /// <summary>
  /// 下一个出牌座位思考时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeThink {
    get { return timeThink_; }
    set {
      timeThink_ = value;
    }
  }

  /// <summary>Field number for the "cards_takeout" field.</summary>
  public const int CardsTakeoutFieldNumber = 4;
  private static readonly pb::FieldCodec<int> _repeated_cardsTakeout_codec
      = pb::FieldCodec.ForInt32(34);
  private readonly pbc::RepeatedField<int> cardsTakeout_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 出牌数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> CardsTakeout {
    get { return cardsTakeout_; }
  }

  /// <summary>Field number for the "cards_replace" field.</summary>
  public const int CardsReplaceFieldNumber = 5;
  private static readonly pb::FieldCodec<int> _repeated_cardsReplace_codec
      = pb::FieldCodec.ForInt32(42);
  private readonly pbc::RepeatedField<int> cardsReplace_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 癞子替换规则
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> CardsReplace {
    get { return cardsReplace_; }
  }

  /// <summary>Field number for the "multiple" field.</summary>
  public const int MultipleFieldNumber = 6;
  private int multiple_;
  /// <summary>
  /// 当前倍数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Multiple {
    get { return multiple_; }
    set {
      multiple_ = value;
    }
  }

  /// <summary>Field number for the "bomb_count" field.</summary>
  public const int BombCountFieldNumber = 7;
  private int bombCount_;
  /// <summary>
  /// 当前炸弹个数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BombCount {
    get { return bombCount_; }
    set {
      bombCount_ = value;
    }
  }

  /// <summary>Field number for the "cardsnum" field.</summary>
  public const int CardsnumFieldNumber = 8;
  private static readonly pb::FieldCodec<int> _repeated_cardsnum_codec
      = pb::FieldCodec.ForInt32(66);
  private readonly pbc::RepeatedField<int> cardsnum_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 记牌器数据[数组下标分别代表3、4、5、6、7、8、9、10、J、Q、K、A、2、X、D] size为0则代表无记牌器
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Cardsnum {
    get { return cardsnum_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSTakeoutLaiziCardNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSTakeoutLaiziCardNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (SeatNext != other.SeatNext) return false;
    if (TimeThink != other.TimeThink) return false;
    if(!cardsTakeout_.Equals(other.cardsTakeout_)) return false;
    if(!cardsReplace_.Equals(other.cardsReplace_)) return false;
    if (Multiple != other.Multiple) return false;
    if (BombCount != other.BombCount) return false;
    if(!cardsnum_.Equals(other.cardsnum_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (SeatNext != 0) hash ^= SeatNext.GetHashCode();
    if (TimeThink != 0) hash ^= TimeThink.GetHashCode();
    hash ^= cardsTakeout_.GetHashCode();
    hash ^= cardsReplace_.GetHashCode();
    if (Multiple != 0) hash ^= Multiple.GetHashCode();
    if (BombCount != 0) hash ^= BombCount.GetHashCode();
    hash ^= cardsnum_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (SeatNext != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SeatNext);
    }
    if (TimeThink != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TimeThink);
    }
    cardsTakeout_.WriteTo(output, _repeated_cardsTakeout_codec);
    cardsReplace_.WriteTo(output, _repeated_cardsReplace_codec);
    if (Multiple != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Multiple);
    }
    if (BombCount != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(BombCount);
    }
    cardsnum_.WriteTo(output, _repeated_cardsnum_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (SeatNext != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNext);
    }
    if (TimeThink != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeThink);
    }
    size += cardsTakeout_.CalculateSize(_repeated_cardsTakeout_codec);
    size += cardsReplace_.CalculateSize(_repeated_cardsReplace_codec);
    if (Multiple != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
    }
    if (BombCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombCount);
    }
    size += cardsnum_.CalculateSize(_repeated_cardsnum_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSTakeoutLaiziCardNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.SeatNext != 0) {
      SeatNext = other.SeatNext;
    }
    if (other.TimeThink != 0) {
      TimeThink = other.TimeThink;
    }
    cardsTakeout_.Add(other.cardsTakeout_);
    cardsReplace_.Add(other.cardsReplace_);
    if (other.Multiple != 0) {
      Multiple = other.Multiple;
    }
    if (other.BombCount != 0) {
      BombCount = other.BombCount;
    }
    cardsnum_.Add(other.cardsnum_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 16: {
          SeatNext = input.ReadInt32();
          break;
        }
        case 24: {
          TimeThink = input.ReadInt32();
          break;
        }
        case 34:
        case 32: {
          cardsTakeout_.AddEntriesFrom(input, _repeated_cardsTakeout_codec);
          break;
        }
        case 42:
        case 40: {
          cardsReplace_.AddEntriesFrom(input, _repeated_cardsReplace_codec);
          break;
        }
        case 48: {
          Multiple = input.ReadInt32();
          break;
        }
        case 56: {
          BombCount = input.ReadInt32();
          break;
        }
        case 66:
        case 64: {
          cardsnum_.AddEntriesFrom(input, _repeated_cardsnum_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_GAMERESULT        //游戏结果
/// </summary>
public sealed partial class DDZ_CGSGameResultNtf : pb::IMessage<DDZ_CGSGameResultNtf> {
  private static readonly pb::MessageParser<DDZ_CGSGameResultNtf> _parser = new pb::MessageParser<DDZ_CGSGameResultNtf>(() => new DDZ_CGSGameResultNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSGameResultNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[149]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameResultNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameResultNtf(DDZ_CGSGameResultNtf other) : this() {
    seatLord_ = other.seatLord_;
    seatWin_ = other.seatWin_;
    multipleBase_ = other.multipleBase_;
    multipleBomb_ = other.multipleBomb_;
    multipleSpring_ = other.multipleSpring_;
    multipleTwemuch_ = other.multipleTwemuch_;
    curRound_ = other.curRound_;
    totalRound_ = other.totalRound_;
    useTime_ = other.useTime_;
    ur_ = other.ur_.Clone();
    isGameover_ = other.isGameover_;
    sur_ = other.sur_.Clone();
    cardsRes_ = other.cardsRes_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameResultNtf Clone() {
    return new DDZ_CGSGameResultNtf(this);
  }

  /// <summary>Field number for the "seat_lord" field.</summary>
  public const int SeatLordFieldNumber = 1;
  private int seatLord_;
  /// <summary>
  /// 地主的座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatLord {
    get { return seatLord_; }
    set {
      seatLord_ = value;
    }
  }

  /// <summary>Field number for the "seat_win" field.</summary>
  public const int SeatWinFieldNumber = 2;
  private int seatWin_;
  /// <summary>
  /// 座位
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatWin {
    get { return seatWin_; }
    set {
      seatWin_ = value;
    }
  }

  /// <summary>Field number for the "multiple_base" field.</summary>
  public const int MultipleBaseFieldNumber = 3;
  private int multipleBase_;
  /// <summary>
  /// 基础倍数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MultipleBase {
    get { return multipleBase_; }
    set {
      multipleBase_ = value;
    }
  }

  /// <summary>Field number for the "multiple_bomb" field.</summary>
  public const int MultipleBombFieldNumber = 4;
  private int multipleBomb_;
  /// <summary>
  /// 倍数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MultipleBomb {
    get { return multipleBomb_; }
    set {
      multipleBomb_ = value;
    }
  }

  /// <summary>Field number for the "multiple_spring" field.</summary>
  public const int MultipleSpringFieldNumber = 5;
  private int multipleSpring_;
  /// <summary>
  /// 春天倍数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MultipleSpring {
    get { return multipleSpring_; }
    set {
      multipleSpring_ = value;
    }
  }

  /// <summary>Field number for the "multiple_twemuch" field.</summary>
  public const int MultipleTwemuchFieldNumber = 6;
  private int multipleTwemuch_;
  /// <summary>
  /// 加倍倍数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MultipleTwemuch {
    get { return multipleTwemuch_; }
    set {
      multipleTwemuch_ = value;
    }
  }

  /// <summary>Field number for the "cur_round" field.</summary>
  public const int CurRoundFieldNumber = 7;
  private int curRound_;
  /// <summary>
  /// 当前盘
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurRound {
    get { return curRound_; }
    set {
      curRound_ = value;
    }
  }

  /// <summary>Field number for the "total_round" field.</summary>
  public const int TotalRoundFieldNumber = 8;
  private int totalRound_;
  /// <summary>
  /// 总盘数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalRound {
    get { return totalRound_; }
    set {
      totalRound_ = value;
    }
  }

  /// <summary>Field number for the "use_time" field.</summary>
  public const int UseTimeFieldNumber = 9;
  private int useTime_;
  /// <summary>
  /// 总用时秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UseTime {
    get { return useTime_; }
    set {
      useTime_ = value;
    }
  }

  /// <summary>Field number for the "ur" field.</summary>
  public const int UrFieldNumber = 10;
  private static readonly pb::FieldCodec<global::DDZ_CGSGameUserResult> _repeated_ur_codec
      = pb::FieldCodec.ForMessage(82, global::DDZ_CGSGameUserResult.Parser);
  private readonly pbc::RepeatedField<global::DDZ_CGSGameUserResult> ur_ = new pbc::RepeatedField<global::DDZ_CGSGameUserResult>();
  /// <summary>
  /// 玩家结算成绩结构 0,1,2,3 对应座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DDZ_CGSGameUserResult> Ur {
    get { return ur_; }
  }

  /// <summary>Field number for the "is_gameover" field.</summary>
  public const int IsGameoverFieldNumber = 11;
  private int isGameover_;
  /// <summary>
  /// 结算类型（0：小结算、1：大结算）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsGameover {
    get { return isGameover_; }
    set {
      isGameover_ = value;
    }
  }

  /// <summary>Field number for the "sur" field.</summary>
  public const int SurFieldNumber = 12;
  private static readonly pb::FieldCodec<global::DDZ_CGSGameSumResult> _repeated_sur_codec
      = pb::FieldCodec.ForMessage(98, global::DDZ_CGSGameSumResult.Parser);
  private readonly pbc::RepeatedField<global::DDZ_CGSGameSumResult> sur_ = new pbc::RepeatedField<global::DDZ_CGSGameSumResult>();
  /// <summary>
  /// 玩家结算总成绩结构 0,1,2,3 对应座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DDZ_CGSGameSumResult> Sur {
    get { return sur_; }
  }

  /// <summary>Field number for the "cards_res" field.</summary>
  public const int CardsResFieldNumber = 13;
  private static readonly pb::FieldCodec<int> _repeated_cardsRes_codec
      = pb::FieldCodec.ForInt32(106);
  private readonly pbc::RepeatedField<int> cardsRes_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 底牌内容 只庄家断线续玩发、
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> CardsRes {
    get { return cardsRes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSGameResultNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSGameResultNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SeatLord != other.SeatLord) return false;
    if (SeatWin != other.SeatWin) return false;
    if (MultipleBase != other.MultipleBase) return false;
    if (MultipleBomb != other.MultipleBomb) return false;
    if (MultipleSpring != other.MultipleSpring) return false;
    if (MultipleTwemuch != other.MultipleTwemuch) return false;
    if (CurRound != other.CurRound) return false;
    if (TotalRound != other.TotalRound) return false;
    if (UseTime != other.UseTime) return false;
    if(!ur_.Equals(other.ur_)) return false;
    if (IsGameover != other.IsGameover) return false;
    if(!sur_.Equals(other.sur_)) return false;
    if(!cardsRes_.Equals(other.cardsRes_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SeatLord != 0) hash ^= SeatLord.GetHashCode();
    if (SeatWin != 0) hash ^= SeatWin.GetHashCode();
    if (MultipleBase != 0) hash ^= MultipleBase.GetHashCode();
    if (MultipleBomb != 0) hash ^= MultipleBomb.GetHashCode();
    if (MultipleSpring != 0) hash ^= MultipleSpring.GetHashCode();
    if (MultipleTwemuch != 0) hash ^= MultipleTwemuch.GetHashCode();
    if (CurRound != 0) hash ^= CurRound.GetHashCode();
    if (TotalRound != 0) hash ^= TotalRound.GetHashCode();
    if (UseTime != 0) hash ^= UseTime.GetHashCode();
    hash ^= ur_.GetHashCode();
    if (IsGameover != 0) hash ^= IsGameover.GetHashCode();
    hash ^= sur_.GetHashCode();
    hash ^= cardsRes_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SeatLord != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SeatLord);
    }
    if (SeatWin != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SeatWin);
    }
    if (MultipleBase != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(MultipleBase);
    }
    if (MultipleBomb != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(MultipleBomb);
    }
    if (MultipleSpring != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(MultipleSpring);
    }
    if (MultipleTwemuch != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(MultipleTwemuch);
    }
    if (CurRound != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(CurRound);
    }
    if (TotalRound != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(TotalRound);
    }
    if (UseTime != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(UseTime);
    }
    ur_.WriteTo(output, _repeated_ur_codec);
    if (IsGameover != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(IsGameover);
    }
    sur_.WriteTo(output, _repeated_sur_codec);
    cardsRes_.WriteTo(output, _repeated_cardsRes_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SeatLord != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatLord);
    }
    if (SeatWin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatWin);
    }
    if (MultipleBase != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MultipleBase);
    }
    if (MultipleBomb != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MultipleBomb);
    }
    if (MultipleSpring != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MultipleSpring);
    }
    if (MultipleTwemuch != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MultipleTwemuch);
    }
    if (CurRound != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurRound);
    }
    if (TotalRound != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRound);
    }
    if (UseTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseTime);
    }
    size += ur_.CalculateSize(_repeated_ur_codec);
    if (IsGameover != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsGameover);
    }
    size += sur_.CalculateSize(_repeated_sur_codec);
    size += cardsRes_.CalculateSize(_repeated_cardsRes_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSGameResultNtf other) {
    if (other == null) {
      return;
    }
    if (other.SeatLord != 0) {
      SeatLord = other.SeatLord;
    }
    if (other.SeatWin != 0) {
      SeatWin = other.SeatWin;
    }
    if (other.MultipleBase != 0) {
      MultipleBase = other.MultipleBase;
    }
    if (other.MultipleBomb != 0) {
      MultipleBomb = other.MultipleBomb;
    }
    if (other.MultipleSpring != 0) {
      MultipleSpring = other.MultipleSpring;
    }
    if (other.MultipleTwemuch != 0) {
      MultipleTwemuch = other.MultipleTwemuch;
    }
    if (other.CurRound != 0) {
      CurRound = other.CurRound;
    }
    if (other.TotalRound != 0) {
      TotalRound = other.TotalRound;
    }
    if (other.UseTime != 0) {
      UseTime = other.UseTime;
    }
    ur_.Add(other.ur_);
    if (other.IsGameover != 0) {
      IsGameover = other.IsGameover;
    }
    sur_.Add(other.sur_);
    cardsRes_.Add(other.cardsRes_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          SeatLord = input.ReadInt32();
          break;
        }
        case 16: {
          SeatWin = input.ReadInt32();
          break;
        }
        case 24: {
          MultipleBase = input.ReadInt32();
          break;
        }
        case 32: {
          MultipleBomb = input.ReadInt32();
          break;
        }
        case 40: {
          MultipleSpring = input.ReadInt32();
          break;
        }
        case 48: {
          MultipleTwemuch = input.ReadInt32();
          break;
        }
        case 56: {
          CurRound = input.ReadInt32();
          break;
        }
        case 64: {
          TotalRound = input.ReadInt32();
          break;
        }
        case 72: {
          UseTime = input.ReadInt32();
          break;
        }
        case 82: {
          ur_.AddEntriesFrom(input, _repeated_ur_codec);
          break;
        }
        case 88: {
          IsGameover = input.ReadInt32();
          break;
        }
        case 98: {
          sur_.AddEntriesFrom(input, _repeated_sur_codec);
          break;
        }
        case 106:
        case 104: {
          cardsRes_.AddEntriesFrom(input, _repeated_cardsRes_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 游戏总结果
/// </summary>
public sealed partial class DDZ_CGSGameSumResult : pb::IMessage<DDZ_CGSGameSumResult> {
  private static readonly pb::MessageParser<DDZ_CGSGameSumResult> _parser = new pb::MessageParser<DDZ_CGSGameSumResult>(() => new DDZ_CGSGameSumResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSGameSumResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[150]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameSumResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameSumResult(DDZ_CGSGameSumResult other) : this() {
    highestScore_ = other.highestScore_;
    winCount_ = other.winCount_;
    failureCount_ = other.failureCount_;
    totalScore_ = other.totalScore_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameSumResult Clone() {
    return new DDZ_CGSGameSumResult(this);
  }

  /// <summary>Field number for the "highest_score" field.</summary>
  public const int HighestScoreFieldNumber = 1;
  private int highestScore_;
  /// <summary>
  /// 单局最高分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HighestScore {
    get { return highestScore_; }
    set {
      highestScore_ = value;
    }
  }

  /// <summary>Field number for the "win_count" field.</summary>
  public const int WinCountFieldNumber = 2;
  private int winCount_;
  /// <summary>
  /// 次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WinCount {
    get { return winCount_; }
    set {
      winCount_ = value;
    }
  }

  /// <summary>Field number for the "failure_count" field.</summary>
  public const int FailureCountFieldNumber = 3;
  private int failureCount_;
  /// <summary>
  /// 失败次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FailureCount {
    get { return failureCount_; }
    set {
      failureCount_ = value;
    }
  }

  /// <summary>Field number for the "total_score" field.</summary>
  public const int TotalScoreFieldNumber = 4;
  private int totalScore_;
  /// <summary>
  /// 当前总成绩
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalScore {
    get { return totalScore_; }
    set {
      totalScore_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSGameSumResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSGameSumResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HighestScore != other.HighestScore) return false;
    if (WinCount != other.WinCount) return false;
    if (FailureCount != other.FailureCount) return false;
    if (TotalScore != other.TotalScore) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HighestScore != 0) hash ^= HighestScore.GetHashCode();
    if (WinCount != 0) hash ^= WinCount.GetHashCode();
    if (FailureCount != 0) hash ^= FailureCount.GetHashCode();
    if (TotalScore != 0) hash ^= TotalScore.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HighestScore != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(HighestScore);
    }
    if (WinCount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(WinCount);
    }
    if (FailureCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(FailureCount);
    }
    if (TotalScore != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TotalScore);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HighestScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HighestScore);
    }
    if (WinCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinCount);
    }
    if (FailureCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FailureCount);
    }
    if (TotalScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalScore);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSGameSumResult other) {
    if (other == null) {
      return;
    }
    if (other.HighestScore != 0) {
      HighestScore = other.HighestScore;
    }
    if (other.WinCount != 0) {
      WinCount = other.WinCount;
    }
    if (other.FailureCount != 0) {
      FailureCount = other.FailureCount;
    }
    if (other.TotalScore != 0) {
      TotalScore = other.TotalScore;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          HighestScore = input.ReadInt32();
          break;
        }
        case 16: {
          WinCount = input.ReadInt32();
          break;
        }
        case 24: {
          FailureCount = input.ReadInt32();
          break;
        }
        case 32: {
          TotalScore = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DDZ_CGSGameUserResult : pb::IMessage<DDZ_CGSGameUserResult> {
  private static readonly pb::MessageParser<DDZ_CGSGameUserResult> _parser = new pb::MessageParser<DDZ_CGSGameUserResult>(() => new DDZ_CGSGameUserResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSGameUserResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[151]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameUserResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameUserResult(DDZ_CGSGameUserResult other) : this() {
    CardHand = other.cardHand_ != null ? other.CardHand.Clone() : null;
    curScore_ = other.curScore_;
    totalScore_ = other.totalScore_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameUserResult Clone() {
    return new DDZ_CGSGameUserResult(this);
  }

  /// <summary>Field number for the "card_hand" field.</summary>
  public const int CardHandFieldNumber = 1;
  private global::DDZ_CGSHandCardItem cardHand_;
  /// <summary>
  /// 玩家手牌[数组下表代表座位号]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DDZ_CGSHandCardItem CardHand {
    get { return cardHand_; }
    set {
      cardHand_ = value;
    }
  }

  /// <summary>Field number for the "cur_score" field.</summary>
  public const int CurScoreFieldNumber = 2;
  private int curScore_;
  /// <summary>
  /// 当前盘成绩
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurScore {
    get { return curScore_; }
    set {
      curScore_ = value;
    }
  }

  /// <summary>Field number for the "total_score" field.</summary>
  public const int TotalScoreFieldNumber = 3;
  private int totalScore_;
  /// <summary>
  /// 当前总成绩
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalScore {
    get { return totalScore_; }
    set {
      totalScore_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSGameUserResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSGameUserResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(CardHand, other.CardHand)) return false;
    if (CurScore != other.CurScore) return false;
    if (TotalScore != other.TotalScore) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (cardHand_ != null) hash ^= CardHand.GetHashCode();
    if (CurScore != 0) hash ^= CurScore.GetHashCode();
    if (TotalScore != 0) hash ^= TotalScore.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (cardHand_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(CardHand);
    }
    if (CurScore != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CurScore);
    }
    if (TotalScore != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TotalScore);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (cardHand_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardHand);
    }
    if (CurScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurScore);
    }
    if (TotalScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalScore);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSGameUserResult other) {
    if (other == null) {
      return;
    }
    if (other.cardHand_ != null) {
      if (cardHand_ == null) {
        cardHand_ = new global::DDZ_CGSHandCardItem();
      }
      CardHand.MergeFrom(other.CardHand);
    }
    if (other.CurScore != 0) {
      CurScore = other.CurScore;
    }
    if (other.TotalScore != 0) {
      TotalScore = other.TotalScore;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (cardHand_ == null) {
            cardHand_ = new global::DDZ_CGSHandCardItem();
          }
          input.ReadMessage(cardHand_);
          break;
        }
        case 16: {
          CurScore = input.ReadInt32();
          break;
        }
        case 24: {
          TotalScore = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_GAMEOVER          //结束游戏
/// </summary>
public sealed partial class DDZ_CGSGameOverNtf : pb::IMessage<DDZ_CGSGameOverNtf> {
  private static readonly pb::MessageParser<DDZ_CGSGameOverNtf> _parser = new pb::MessageParser<DDZ_CGSGameOverNtf>(() => new DDZ_CGSGameOverNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSGameOverNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[152]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameOverNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameOverNtf(DDZ_CGSGameOverNtf other) : this() {
    reason_ = other.reason_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSGameOverNtf Clone() {
    return new DDZ_CGSGameOverNtf(this);
  }

  /// <summary>Field number for the "reason" field.</summary>
  public const int ReasonFieldNumber = 1;
  private int reason_;
  /// <summary>
  /// 结束原因
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Reason {
    get { return reason_; }
    set {
      reason_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSGameOverNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSGameOverNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Reason != other.Reason) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Reason != 0) hash ^= Reason.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Reason != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Reason);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Reason != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reason);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSGameOverNtf other) {
    if (other == null) {
      return;
    }
    if (other.Reason != 0) {
      Reason = other.Reason;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Reason = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_SYNCDATA          //数据同步
/// </summary>
public sealed partial class DDZ_CGSSyncDataNtf : pb::IMessage<DDZ_CGSSyncDataNtf> {
  private static readonly pb::MessageParser<DDZ_CGSSyncDataNtf> _parser = new pb::MessageParser<DDZ_CGSSyncDataNtf>(() => new DDZ_CGSSyncDataNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSSyncDataNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[153]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSyncDataNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSyncDataNtf(DDZ_CGSSyncDataNtf other) : this() {
    GameInfo = other.gameInfo_ != null ? other.GameInfo.Clone() : null;
    playerInfo_ = other.playerInfo_.Clone();
    cardRes_ = other.cardRes_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSyncDataNtf Clone() {
    return new DDZ_CGSSyncDataNtf(this);
  }

  /// <summary>Field number for the "game_info" field.</summary>
  public const int GameInfoFieldNumber = 1;
  private global::DDZ_CGSGameInfoReal gameInfo_;
  /// <summary>
  /// 游戏信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DDZ_CGSGameInfoReal GameInfo {
    get { return gameInfo_; }
    set {
      gameInfo_ = value;
    }
  }

  /// <summary>Field number for the "player_info" field.</summary>
  public const int PlayerInfoFieldNumber = 2;
  private static readonly pb::FieldCodec<global::DDZ_CGSPlayerInfoReal> _repeated_playerInfo_codec
      = pb::FieldCodec.ForMessage(18, global::DDZ_CGSPlayerInfoReal.Parser);
  private readonly pbc::RepeatedField<global::DDZ_CGSPlayerInfoReal> playerInfo_ = new pbc::RepeatedField<global::DDZ_CGSPlayerInfoReal>();
  /// <summary>
  /// 玩家信息[数组下标代表座位号]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DDZ_CGSPlayerInfoReal> PlayerInfo {
    get { return playerInfo_; }
  }

  /// <summary>Field number for the "card_res" field.</summary>
  public const int CardResFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_cardRes_codec
      = pb::FieldCodec.ForInt32(26);
  private readonly pbc::RepeatedField<int> cardRes_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 底牌数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> CardRes {
    get { return cardRes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSSyncDataNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSSyncDataNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(GameInfo, other.GameInfo)) return false;
    if(!playerInfo_.Equals(other.playerInfo_)) return false;
    if(!cardRes_.Equals(other.cardRes_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (gameInfo_ != null) hash ^= GameInfo.GetHashCode();
    hash ^= playerInfo_.GetHashCode();
    hash ^= cardRes_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (gameInfo_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(GameInfo);
    }
    playerInfo_.WriteTo(output, _repeated_playerInfo_codec);
    cardRes_.WriteTo(output, _repeated_cardRes_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (gameInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameInfo);
    }
    size += playerInfo_.CalculateSize(_repeated_playerInfo_codec);
    size += cardRes_.CalculateSize(_repeated_cardRes_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSSyncDataNtf other) {
    if (other == null) {
      return;
    }
    if (other.gameInfo_ != null) {
      if (gameInfo_ == null) {
        gameInfo_ = new global::DDZ_CGSGameInfoReal();
      }
      GameInfo.MergeFrom(other.GameInfo);
    }
    playerInfo_.Add(other.playerInfo_);
    cardRes_.Add(other.cardRes_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (gameInfo_ == null) {
            gameInfo_ = new global::DDZ_CGSGameInfoReal();
          }
          input.ReadMessage(gameInfo_);
          break;
        }
        case 18: {
          playerInfo_.AddEntriesFrom(input, _repeated_playerInfo_codec);
          break;
        }
        case 26:
        case 24: {
          cardRes_.AddEntriesFrom(input, _repeated_cardRes_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_CLI_GS_REQ_TWEMUCH            //加倍请求
/// </summary>
public sealed partial class DDZ_CGSDoubleReq : pb::IMessage<DDZ_CGSDoubleReq> {
  private static readonly pb::MessageParser<DDZ_CGSDoubleReq> _parser = new pb::MessageParser<DDZ_CGSDoubleReq>(() => new DDZ_CGSDoubleReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSDoubleReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[154]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDoubleReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDoubleReq(DDZ_CGSDoubleReq other) : this() {
    isdouble_ = other.isdouble_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDoubleReq Clone() {
    return new DDZ_CGSDoubleReq(this);
  }

  /// <summary>Field number for the "isdouble" field.</summary>
  public const int IsdoubleFieldNumber = 1;
  private int isdouble_;
  /// <summary>
  /// 是否加倍: 0-不加倍 1-加倍
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Isdouble {
    get { return isdouble_; }
    set {
      isdouble_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSDoubleReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSDoubleReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Isdouble != other.Isdouble) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Isdouble != 0) hash ^= Isdouble.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Isdouble != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Isdouble);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Isdouble != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Isdouble);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSDoubleReq other) {
    if (other == null) {
      return;
    }
    if (other.Isdouble != 0) {
      Isdouble = other.Isdouble;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Isdouble = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DDZ_CGSDoubleAck : pb::IMessage<DDZ_CGSDoubleAck> {
  private static readonly pb::MessageParser<DDZ_CGSDoubleAck> _parser = new pb::MessageParser<DDZ_CGSDoubleAck>(() => new DDZ_CGSDoubleAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSDoubleAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[155]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDoubleAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDoubleAck(DDZ_CGSDoubleAck other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDoubleAck Clone() {
    return new DDZ_CGSDoubleAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSDoubleAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSDoubleAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSDoubleAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_TWEMUCH            //加倍通知
/// </summary>
public sealed partial class DDZ_CGSDoubleNtf : pb::IMessage<DDZ_CGSDoubleNtf> {
  private static readonly pb::MessageParser<DDZ_CGSDoubleNtf> _parser = new pb::MessageParser<DDZ_CGSDoubleNtf>(() => new DDZ_CGSDoubleNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSDoubleNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[156]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDoubleNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDoubleNtf(DDZ_CGSDoubleNtf other) : this() {
    seat_ = other.seat_;
    isdouble_ = other.isdouble_;
    itemUse_ = other.itemUse_;
    itemUseNext_ = other.itemUseNext_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDoubleNtf Clone() {
    return new DDZ_CGSDoubleNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "isdouble" field.</summary>
  public const int IsdoubleFieldNumber = 2;
  private int isdouble_;
  /// <summary>
  /// 是否加倍: 0-不加倍 1-加倍
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Isdouble {
    get { return isdouble_; }
    set {
      isdouble_ = value;
    }
  }

  /// <summary>Field number for the "item_use" field.</summary>
  public const int ItemUseFieldNumber = 3;
  private int itemUse_;
  /// <summary>
  /// 是否使用道具：0：不使用，1：使用
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ItemUse {
    get { return itemUse_; }
    set {
      itemUse_ = value;
    }
  }

  /// <summary>Field number for the "item_use_next" field.</summary>
  public const int ItemUseNextFieldNumber = 4;
  private int itemUseNext_;
  /// <summary>
  /// 下轮加倍状态：0：不可以，1：在免费轮加倍 2：在道具轮加倍
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ItemUseNext {
    get { return itemUseNext_; }
    set {
      itemUseNext_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSDoubleNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSDoubleNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (Isdouble != other.Isdouble) return false;
    if (ItemUse != other.ItemUse) return false;
    if (ItemUseNext != other.ItemUseNext) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (Isdouble != 0) hash ^= Isdouble.GetHashCode();
    if (ItemUse != 0) hash ^= ItemUse.GetHashCode();
    if (ItemUseNext != 0) hash ^= ItemUseNext.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (Isdouble != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Isdouble);
    }
    if (ItemUse != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ItemUse);
    }
    if (ItemUseNext != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(ItemUseNext);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (Isdouble != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Isdouble);
    }
    if (ItemUse != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemUse);
    }
    if (ItemUseNext != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemUseNext);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSDoubleNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.Isdouble != 0) {
      Isdouble = other.Isdouble;
    }
    if (other.ItemUse != 0) {
      ItemUse = other.ItemUse;
    }
    if (other.ItemUseNext != 0) {
      ItemUseNext = other.ItemUseNext;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 16: {
          Isdouble = input.ReadInt32();
          break;
        }
        case 24: {
          ItemUse = input.ReadInt32();
          break;
        }
        case 32: {
          ItemUseNext = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_STATUS_SPECIAL     //加倍和出牌状态通知(添加加倍流程后特殊通知)
/// </summary>
public sealed partial class DDZ_CGSSpecialStatusNtf : pb::IMessage<DDZ_CGSSpecialStatusNtf> {
  private static readonly pb::MessageParser<DDZ_CGSSpecialStatusNtf> _parser = new pb::MessageParser<DDZ_CGSSpecialStatusNtf>(() => new DDZ_CGSSpecialStatusNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSSpecialStatusNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[157]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSpecialStatusNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSpecialStatusNtf(DDZ_CGSSpecialStatusNtf other) : this() {
    status_ = other.status_;
    thinktime_ = other.thinktime_;
    seatActive_ = other.seatActive_;
    candouble_ = other.candouble_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSSpecialStatusNtf Clone() {
    return new DDZ_CGSSpecialStatusNtf(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private int status_;
  /// <summary>
  /// 状态值   0x09:加倍状态   0x05：出牌状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "thinktime" field.</summary>
  public const int ThinktimeFieldNumber = 2;
  private int thinktime_;
  /// <summary>
  /// 第一次出牌的思考时间  或 加倍思考时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Thinktime {
    get { return thinktime_; }
    set {
      thinktime_ = value;
    }
  }

  /// <summary>Field number for the "seat_active" field.</summary>
  public const int SeatActiveFieldNumber = 3;
  private int seatActive_;
  /// <summary>
  /// 更新为出牌状态时，第一次出牌的座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatActive {
    get { return seatActive_; }
    set {
      seatActive_ = value;
    }
  }

  /// <summary>Field number for the "candouble" field.</summary>
  public const int CandoubleFieldNumber = 4;
  private int candouble_;
  /// <summary>
  /// 更新为加倍状态时，玩家是否有加倍资格 0-不满足 1-满足
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Candouble {
    get { return candouble_; }
    set {
      candouble_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSSpecialStatusNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSSpecialStatusNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (Thinktime != other.Thinktime) return false;
    if (SeatActive != other.SeatActive) return false;
    if (Candouble != other.Candouble) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != 0) hash ^= Status.GetHashCode();
    if (Thinktime != 0) hash ^= Thinktime.GetHashCode();
    if (SeatActive != 0) hash ^= SeatActive.GetHashCode();
    if (Candouble != 0) hash ^= Candouble.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Status != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Status);
    }
    if (Thinktime != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Thinktime);
    }
    if (SeatActive != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SeatActive);
    }
    if (Candouble != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Candouble);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (Thinktime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Thinktime);
    }
    if (SeatActive != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatActive);
    }
    if (Candouble != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Candouble);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSSpecialStatusNtf other) {
    if (other == null) {
      return;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.Thinktime != 0) {
      Thinktime = other.Thinktime;
    }
    if (other.SeatActive != 0) {
      SeatActive = other.SeatActive;
    }
    if (other.Candouble != 0) {
      Candouble = other.Candouble;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Status = input.ReadInt32();
          break;
        }
        case 16: {
          Thinktime = input.ReadInt32();
          break;
        }
        case 24: {
          SeatActive = input.ReadInt32();
          break;
        }
        case 32: {
          Candouble = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_LOOKCARDS         //看底牌通知
/// </summary>
public sealed partial class DDZ_CGSLookCardsNtf : pb::IMessage<DDZ_CGSLookCardsNtf> {
  private static readonly pb::MessageParser<DDZ_CGSLookCardsNtf> _parser = new pb::MessageParser<DDZ_CGSLookCardsNtf>(() => new DDZ_CGSLookCardsNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSLookCardsNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[158]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSLookCardsNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSLookCardsNtf(DDZ_CGSLookCardsNtf other) : this() {
    seat_ = other.seat_;
    cardsRes_ = other.cardsRes_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSLookCardsNtf Clone() {
    return new DDZ_CGSLookCardsNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "cards_res" field.</summary>
  public const int CardsResFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_cardsRes_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> cardsRes_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 底牌内容
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> CardsRes {
    get { return cardsRes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSLookCardsNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSLookCardsNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if(!cardsRes_.Equals(other.cardsRes_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    hash ^= cardsRes_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    cardsRes_.WriteTo(output, _repeated_cardsRes_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    size += cardsRes_.CalculateSize(_repeated_cardsRes_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSLookCardsNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    cardsRes_.Add(other.cardsRes_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          cardsRes_.AddEntriesFrom(input, _repeated_cardsRes_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_CLI_GS_REQ_BREAK           //切入切出请求
/// </summary>
public sealed partial class DDZ_CGSBreakReq : pb::IMessage<DDZ_CGSBreakReq> {
  private static readonly pb::MessageParser<DDZ_CGSBreakReq> _parser = new pb::MessageParser<DDZ_CGSBreakReq>(() => new DDZ_CGSBreakReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSBreakReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[159]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSBreakReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSBreakReq(DDZ_CGSBreakReq other) : this() {
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSBreakReq Clone() {
    return new DDZ_CGSBreakReq(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///  0:切回  1:切走
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSBreakReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSBreakReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSBreakReq other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DDZ_CGSBreakAck : pb::IMessage<DDZ_CGSBreakAck> {
  private static readonly pb::MessageParser<DDZ_CGSBreakAck> _parser = new pb::MessageParser<DDZ_CGSBreakAck>(() => new DDZ_CGSBreakAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSBreakAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[160]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSBreakAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSBreakAck(DDZ_CGSBreakAck other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSBreakAck Clone() {
    return new DDZ_CGSBreakAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSBreakAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSBreakAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSBreakAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_BREAK				//用户切出切回
/// </summary>
public sealed partial class DDZ_CGSBreakReqNtf : pb::IMessage<DDZ_CGSBreakReqNtf> {
  private static readonly pb::MessageParser<DDZ_CGSBreakReqNtf> _parser = new pb::MessageParser<DDZ_CGSBreakReqNtf>(() => new DDZ_CGSBreakReqNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSBreakReqNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[161]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSBreakReqNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSBreakReqNtf(DDZ_CGSBreakReqNtf other) : this() {
    seat_ = other.seat_;
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSBreakReqNtf Clone() {
    return new DDZ_CGSBreakReqNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  /// <summary>
  ///  0:切回  2:切走
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSBreakReqNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSBreakReqNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSBreakReqNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
///  CGS_MSG_CLI_GS_REQ_DIMISSGAME				解散桌子
/// </summary>
public sealed partial class DDZ_CGSDismissTableReq : pb::IMessage<DDZ_CGSDismissTableReq> {
  private static readonly pb::MessageParser<DDZ_CGSDismissTableReq> _parser = new pb::MessageParser<DDZ_CGSDismissTableReq>(() => new DDZ_CGSDismissTableReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSDismissTableReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[162]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDismissTableReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDismissTableReq(DDZ_CGSDismissTableReq other) : this() {
    dismiss_ = other.dismiss_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDismissTableReq Clone() {
    return new DDZ_CGSDismissTableReq(this);
  }

  /// <summary>Field number for the "dismiss" field.</summary>
  public const int DismissFieldNumber = 1;
  private int dismiss_;
  /// <summary>
  /// 是否同意解散 1 同意，2 不同意 0 未选
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Dismiss {
    get { return dismiss_; }
    set {
      dismiss_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSDismissTableReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSDismissTableReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Dismiss != other.Dismiss) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Dismiss != 0) hash ^= Dismiss.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Dismiss != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Dismiss);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Dismiss != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dismiss);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSDismissTableReq other) {
    if (other == null) {
      return;
    }
    if (other.Dismiss != 0) {
      Dismiss = other.Dismiss;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Dismiss = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 返回结果
/// </summary>
public sealed partial class DDZ_CGSDismissTableAck : pb::IMessage<DDZ_CGSDismissTableAck> {
  private static readonly pb::MessageParser<DDZ_CGSDismissTableAck> _parser = new pb::MessageParser<DDZ_CGSDismissTableAck>(() => new DDZ_CGSDismissTableAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSDismissTableAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[163]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDismissTableAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDismissTableAck(DDZ_CGSDismissTableAck other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDismissTableAck Clone() {
    return new DDZ_CGSDismissTableAck(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSDismissTableAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSDismissTableAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSDismissTableAck other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define CGS_MSG_GS_CLI_NTF_DISMISS			//用户请求解散
/// </summary>
public sealed partial class DDZ_CGSDismissReqNtf : pb::IMessage<DDZ_CGSDismissReqNtf> {
  private static readonly pb::MessageParser<DDZ_CGSDismissReqNtf> _parser = new pb::MessageParser<DDZ_CGSDismissReqNtf>(() => new DDZ_CGSDismissReqNtf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DDZ_CGSDismissReqNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[164]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDismissReqNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDismissReqNtf(DDZ_CGSDismissReqNtf other) : this() {
    seat_ = other.seat_;
    leadSeat_ = other.leadSeat_;
    leftTime_ = other.leftTime_;
    playerDismiss_ = other.playerDismiss_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DDZ_CGSDismissReqNtf Clone() {
    return new DDZ_CGSDismissReqNtf(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  /// <summary>
  /// 当前回复座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "lead_seat" field.</summary>
  public const int LeadSeatFieldNumber = 2;
  private int leadSeat_;
  /// <summary>
  /// 发起者座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeadSeat {
    get { return leadSeat_; }
    set {
      leadSeat_ = value;
    }
  }

  /// <summary>Field number for the "left_time" field.</summary>
  public const int LeftTimeFieldNumber = 3;
  private int leftTime_;
  /// <summary>
  /// 剩余强制解散时间 秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeftTime {
    get { return leftTime_; }
    set {
      leftTime_ = value;
    }
  }

  /// <summary>Field number for the "player_dismiss" field.</summary>
  public const int PlayerDismissFieldNumber = 4;
  private static readonly pb::FieldCodec<int> _repeated_playerDismiss_codec
      = pb::FieldCodec.ForInt32(34);
  private readonly pbc::RepeatedField<int> playerDismiss_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 所有人断线状态  是否同意解散 1 同意，2 不同意 0 未选
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> PlayerDismiss {
    get { return playerDismiss_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DDZ_CGSDismissReqNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DDZ_CGSDismissReqNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (LeadSeat != other.LeadSeat) return false;
    if (LeftTime != other.LeftTime) return false;
    if(!playerDismiss_.Equals(other.playerDismiss_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (LeadSeat != 0) hash ^= LeadSeat.GetHashCode();
    if (LeftTime != 0) hash ^= LeftTime.GetHashCode();
    hash ^= playerDismiss_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (LeadSeat != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(LeadSeat);
    }
    if (LeftTime != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(LeftTime);
    }
    playerDismiss_.WriteTo(output, _repeated_playerDismiss_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (LeadSeat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeadSeat);
    }
    if (LeftTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftTime);
    }
    size += playerDismiss_.CalculateSize(_repeated_playerDismiss_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DDZ_CGSDismissReqNtf other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.LeadSeat != 0) {
      LeadSeat = other.LeadSeat;
    }
    if (other.LeftTime != 0) {
      LeftTime = other.LeftTime;
    }
    playerDismiss_.Add(other.playerDismiss_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 16: {
          LeadSeat = input.ReadInt32();
          break;
        }
        case 24: {
          LeftTime = input.ReadInt32();
          break;
        }
        case 34:
        case 32: {
          playerDismiss_.AddEntriesFrom(input, _repeated_playerDismiss_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// ******************************************** 亲友圈 *************************************************//
/// ------------------------------------------------------------------------------------------//
/// #define REQ_APPLY_CLUBROOM           //申请/取消申请亲友圈
/// </summary>
public sealed partial class ReqApplyClubRoom : pb::IMessage<ReqApplyClubRoom> {
  private static readonly pb::MessageParser<ReqApplyClubRoom> _parser = new pb::MessageParser<ReqApplyClubRoom>(() => new ReqApplyClubRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqApplyClubRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[165]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqApplyClubRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqApplyClubRoom(ReqApplyClubRoom other) : this() {
    userID_ = other.userID_;
    roomID_ = other.roomID_;
    type_ = other.type_;
    roomAdmin_ = other.roomAdmin_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqApplyClubRoom Clone() {
    return new ReqApplyClubRoom(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 2;
  private int roomID_;
  /// <summary>
  /// 申请加入/退出的房间id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private int type_;
  /// <summary>
  /// 类型 1-申请加入  0-申请退出
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "RoomAdmin" field.</summary>
  public const int RoomAdminFieldNumber = 4;
  private int roomAdmin_;
  /// <summary>
  /// 亲友圈管理员id（以管理员userid搜索）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomAdmin {
    get { return roomAdmin_; }
    set {
      roomAdmin_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqApplyClubRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqApplyClubRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (RoomID != other.RoomID) return false;
    if (Type != other.Type) return false;
    if (RoomAdmin != other.RoomAdmin) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (RoomAdmin != 0) hash ^= RoomAdmin.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (RoomID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomID);
    }
    if (Type != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Type);
    }
    if (RoomAdmin != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RoomAdmin);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (RoomAdmin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomAdmin);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqApplyClubRoom other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.RoomAdmin != 0) {
      RoomAdmin = other.RoomAdmin;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          RoomID = input.ReadInt32();
          break;
        }
        case 24: {
          Type = input.ReadInt32();
          break;
        }
        case 32: {
          RoomAdmin = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class AckApplyClubRoom : pb::IMessage<AckApplyClubRoom> {
  private static readonly pb::MessageParser<AckApplyClubRoom> _parser = new pb::MessageParser<AckApplyClubRoom>(() => new AckApplyClubRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckApplyClubRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[166]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckApplyClubRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckApplyClubRoom(AckApplyClubRoom other) : this() {
    result_ = other.result_;
    type_ = other.type_;
    errMsg_ = other.errMsg_;
    roomID_ = other.roomID_;
    isPass_ = other.isPass_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckApplyClubRoom Clone() {
    return new AckApplyClubRoom(this);
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 进入结果 0-成功 非1-失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  /// <summary>
  /// 类型 1-申请加入  0-申请退出
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "ErrMsg" field.</summary>
  public const int ErrMsgFieldNumber = 3;
  private string errMsg_ = "";
  /// <summary>
  /// 失败原因
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrMsg {
    get { return errMsg_; }
    set {
      errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 4;
  private int roomID_;
  /// <summary>
  /// 申请加入/退出的房间id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "IsPass" field.</summary>
  public const int IsPassFieldNumber = 5;
  private int isPass_;
  /// <summary>
  /// 是否通过 1：通过 0:提交申请
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsPass {
    get { return isPass_; }
    set {
      isPass_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckApplyClubRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckApplyClubRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Type != other.Type) return false;
    if (ErrMsg != other.ErrMsg) return false;
    if (RoomID != other.RoomID) return false;
    if (IsPass != other.IsPass) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    if (IsPass != 0) hash ^= IsPass.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (ErrMsg.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ErrMsg);
    }
    if (RoomID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RoomID);
    }
    if (IsPass != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(IsPass);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (ErrMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    if (IsPass != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsPass);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckApplyClubRoom other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.ErrMsg.Length != 0) {
      ErrMsg = other.ErrMsg;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
    if (other.IsPass != 0) {
      IsPass = other.IsPass;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 26: {
          ErrMsg = input.ReadString();
          break;
        }
        case 32: {
          RoomID = input.ReadInt32();
          break;
        }
        case 40: {
          IsPass = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define REQ_ENTER_CLUB           //进入亲友圈
/// </summary>
public sealed partial class ReqEnterClubRoom : pb::IMessage<ReqEnterClubRoom> {
  private static readonly pb::MessageParser<ReqEnterClubRoom> _parser = new pb::MessageParser<ReqEnterClubRoom>(() => new ReqEnterClubRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqEnterClubRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[167]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqEnterClubRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqEnterClubRoom(ReqEnterClubRoom other) : this() {
    userID_ = other.userID_;
    roomID_ = other.roomID_;
    Cui = other.cui_ != null ? other.Cui.Clone() : null;
    adminUserID_ = other.adminUserID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqEnterClubRoom Clone() {
    return new ReqEnterClubRoom(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 2;
  private int roomID_;
  /// <summary>
  /// 申请加入/退出的房间id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "cui" field.</summary>
  public const int CuiFieldNumber = 3;
  private global::ClubUserInfo cui_;
  /// <summary>
  /// Gate服务更新最新玩家昵称和头像
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ClubUserInfo Cui {
    get { return cui_; }
    set {
      cui_ = value;
    }
  }

  /// <summary>Field number for the "AdminUserID" field.</summary>
  public const int AdminUserIDFieldNumber = 4;
  private int adminUserID_;
  /// <summary>
  /// 亲友圈管理员id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AdminUserID {
    get { return adminUserID_; }
    set {
      adminUserID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqEnterClubRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqEnterClubRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (RoomID != other.RoomID) return false;
    if (!object.Equals(Cui, other.Cui)) return false;
    if (AdminUserID != other.AdminUserID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    if (cui_ != null) hash ^= Cui.GetHashCode();
    if (AdminUserID != 0) hash ^= AdminUserID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (RoomID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomID);
    }
    if (cui_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Cui);
    }
    if (AdminUserID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(AdminUserID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    if (cui_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cui);
    }
    if (AdminUserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdminUserID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqEnterClubRoom other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
    if (other.cui_ != null) {
      if (cui_ == null) {
        cui_ = new global::ClubUserInfo();
      }
      Cui.MergeFrom(other.Cui);
    }
    if (other.AdminUserID != 0) {
      AdminUserID = other.AdminUserID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          RoomID = input.ReadInt32();
          break;
        }
        case 26: {
          if (cui_ == null) {
            cui_ = new global::ClubUserInfo();
          }
          input.ReadMessage(cui_);
          break;
        }
        case 32: {
          AdminUserID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class AckEnterClubRoom : pb::IMessage<AckEnterClubRoom> {
  private static readonly pb::MessageParser<AckEnterClubRoom> _parser = new pb::MessageParser<AckEnterClubRoom>(() => new AckEnterClubRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckEnterClubRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[168]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckEnterClubRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckEnterClubRoom(AckEnterClubRoom other) : this() {
    result_ = other.result_;
    errMsg_ = other.errMsg_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckEnterClubRoom Clone() {
    return new AckEnterClubRoom(this);
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 进入结果 0-成功 非1-失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "ErrMsg" field.</summary>
  public const int ErrMsgFieldNumber = 2;
  private string errMsg_ = "";
  /// <summary>
  /// 失败原因
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrMsg {
    get { return errMsg_; }
    set {
      errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckEnterClubRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckEnterClubRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (ErrMsg != other.ErrMsg) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (ErrMsg.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrMsg);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (ErrMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckEnterClubRoom other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.ErrMsg.Length != 0) {
      ErrMsg = other.ErrMsg;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          ErrMsg = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define NTF_CLUB_SYNC_DATA		//亲友圈需要同步数据
/// </summary>
public sealed partial class NtfClubRoomSyncData : pb::IMessage<NtfClubRoomSyncData> {
  private static readonly pb::MessageParser<NtfClubRoomSyncData> _parser = new pb::MessageParser<NtfClubRoomSyncData>(() => new NtfClubRoomSyncData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NtfClubRoomSyncData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[169]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubRoomSyncData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubRoomSyncData(NtfClubRoomSyncData other) : this() {
    roomID_ = other.roomID_;
    leftCard_ = other.leftCard_;
    status_ = other.status_;
    applyCount_ = other.applyCount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubRoomSyncData Clone() {
    return new NtfClubRoomSyncData(this);
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 1;
  private int roomID_;
  /// <summary>
  /// 亲友圈id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "LeftCard" field.</summary>
  public const int LeftCardFieldNumber = 2;
  private int leftCard_;
  /// <summary>
  /// 剩余房卡
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeftCard {
    get { return leftCard_; }
    set {
      leftCard_ = value;
    }
  }

  /// <summary>Field number for the "Status" field.</summary>
  public const int StatusFieldNumber = 3;
  private int status_;
  /// <summary>
  /// 状态0：正常 1：暂停
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "ApplyCount" field.</summary>
  public const int ApplyCountFieldNumber = 4;
  private int applyCount_;
  /// <summary>
  /// 申请个数 > 0要亮小红点
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ApplyCount {
    get { return applyCount_; }
    set {
      applyCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NtfClubRoomSyncData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NtfClubRoomSyncData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomID != other.RoomID) return false;
    if (LeftCard != other.LeftCard) return false;
    if (Status != other.Status) return false;
    if (ApplyCount != other.ApplyCount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    if (LeftCard != 0) hash ^= LeftCard.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (ApplyCount != 0) hash ^= ApplyCount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomID);
    }
    if (LeftCard != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(LeftCard);
    }
    if (Status != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Status);
    }
    if (ApplyCount != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(ApplyCount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    if (LeftCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCard);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (ApplyCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplyCount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NtfClubRoomSyncData other) {
    if (other == null) {
      return;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
    if (other.LeftCard != 0) {
      LeftCard = other.LeftCard;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.ApplyCount != 0) {
      ApplyCount = other.ApplyCount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomID = input.ReadInt32();
          break;
        }
        case 16: {
          LeftCard = input.ReadInt32();
          break;
        }
        case 24: {
          Status = input.ReadInt32();
          break;
        }
        case 32: {
          ApplyCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define NTF_CLUB_BASE_DATA		//初始化数据
/// </summary>
public sealed partial class NtfClubRoomBaseData : pb::IMessage<NtfClubRoomBaseData> {
  private static readonly pb::MessageParser<NtfClubRoomBaseData> _parser = new pb::MessageParser<NtfClubRoomBaseData>(() => new NtfClubRoomBaseData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NtfClubRoomBaseData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[170]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubRoomBaseData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubRoomBaseData(NtfClubRoomBaseData other) : this() {
    roomID_ = other.roomID_;
    Cri = other.cri_ != null ? other.Cri.Clone() : null;
    tableList_ = other.tableList_.Clone();
    userList_ = other.userList_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubRoomBaseData Clone() {
    return new NtfClubRoomBaseData(this);
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 1;
  private int roomID_;
  /// <summary>
  /// 亲友圈包间id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "cri" field.</summary>
  public const int CriFieldNumber = 2;
  private global::ClubRoomInfo cri_;
  /// <summary>
  /// 规则（牌室）信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ClubRoomInfo Cri {
    get { return cri_; }
    set {
      cri_ = value;
    }
  }

  /// <summary>Field number for the "TableList" field.</summary>
  public const int TableListFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ClubTableInfo> _repeated_tableList_codec
      = pb::FieldCodec.ForMessage(26, global::ClubTableInfo.Parser);
  private readonly pbc::RepeatedField<global::ClubTableInfo> tableList_ = new pbc::RepeatedField<global::ClubTableInfo>();
  /// <summary>
  /// 桌子列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ClubTableInfo> TableList {
    get { return tableList_; }
  }

  /// <summary>Field number for the "UserList" field.</summary>
  public const int UserListFieldNumber = 4;
  private static readonly pb::FieldCodec<global::ClubUserInfo> _repeated_userList_codec
      = pb::FieldCodec.ForMessage(34, global::ClubUserInfo.Parser);
  private readonly pbc::RepeatedField<global::ClubUserInfo> userList_ = new pbc::RepeatedField<global::ClubUserInfo>();
  /// <summary>
  /// 玩家列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ClubUserInfo> UserList {
    get { return userList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NtfClubRoomBaseData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NtfClubRoomBaseData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomID != other.RoomID) return false;
    if (!object.Equals(Cri, other.Cri)) return false;
    if(!tableList_.Equals(other.tableList_)) return false;
    if(!userList_.Equals(other.userList_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    if (cri_ != null) hash ^= Cri.GetHashCode();
    hash ^= tableList_.GetHashCode();
    hash ^= userList_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomID);
    }
    if (cri_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Cri);
    }
    tableList_.WriteTo(output, _repeated_tableList_codec);
    userList_.WriteTo(output, _repeated_userList_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    if (cri_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cri);
    }
    size += tableList_.CalculateSize(_repeated_tableList_codec);
    size += userList_.CalculateSize(_repeated_userList_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NtfClubRoomBaseData other) {
    if (other == null) {
      return;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
    if (other.cri_ != null) {
      if (cri_ == null) {
        cri_ = new global::ClubRoomInfo();
      }
      Cri.MergeFrom(other.Cri);
    }
    tableList_.Add(other.tableList_);
    userList_.Add(other.userList_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomID = input.ReadInt32();
          break;
        }
        case 18: {
          if (cri_ == null) {
            cri_ = new global::ClubRoomInfo();
          }
          input.ReadMessage(cri_);
          break;
        }
        case 26: {
          tableList_.AddEntriesFrom(input, _repeated_tableList_codec);
          break;
        }
        case 34: {
          userList_.AddEntriesFrom(input, _repeated_userList_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 规则（牌室）
/// </summary>
public sealed partial class ClubRoomInfo : pb::IMessage<ClubRoomInfo> {
  private static readonly pb::MessageParser<ClubRoomInfo> _parser = new pb::MessageParser<ClubRoomInfo>(() => new ClubRoomInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClubRoomInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[171]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClubRoomInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClubRoomInfo(ClubRoomInfo other) : this() {
    roomID_ = other.roomID_;
    roomName_ = other.roomName_;
    ruleStr_ = other.ruleStr_;
    Tim = other.tim_ != null ? other.Tim.Clone() : null;
    authCard_ = other.authCard_;
    autoAuthCard_ = other.autoAuthCard_;
    leftCard_ = other.leftCard_;
    createUserID_ = other.createUserID_;
    adminUserID_ = other.adminUserID_;
    status_ = other.status_;
    gameID_ = other.gameID_;
    note_ = other.note_;
    bVipRoom_ = other.bVipRoom_;
    maxTables_ = other.maxTables_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClubRoomInfo Clone() {
    return new ClubRoomInfo(this);
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 1;
  private int roomID_;
  /// <summary>
  /// 规则（牌室）id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "RoomName" field.</summary>
  public const int RoomNameFieldNumber = 2;
  private string roomName_ = "";
  /// <summary>
  /// 规则（牌室）名称
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RoomName {
    get { return roomName_; }
    set {
      roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "RuleStr" field.</summary>
  public const int RuleStrFieldNumber = 3;
  private string ruleStr_ = "";
  /// <summary>
  /// 规则描述
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RuleStr {
    get { return ruleStr_; }
    set {
      ruleStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "tim" field.</summary>
  public const int TimFieldNumber = 4;
  private global::TableInfoMsg tim_;
  /// <summary>
  /// 规则详细配置 用于管理员修改配置使用
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TableInfoMsg Tim {
    get { return tim_; }
    set {
      tim_ = value;
    }
  }

  /// <summary>Field number for the "AuthCard" field.</summary>
  public const int AuthCardFieldNumber = 5;
  private int authCard_;
  /// <summary>
  /// 用户房卡数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AuthCard {
    get { return authCard_; }
    set {
      authCard_ = value;
    }
  }

  /// <summary>Field number for the "AutoAuthCard" field.</summary>
  public const int AutoAuthCardFieldNumber = 6;
  private int autoAuthCard_;
  /// <summary>
  /// 自动授卡数 >0代表无限，直到合伙人身上的房卡消耗光
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AutoAuthCard {
    get { return autoAuthCard_; }
    set {
      autoAuthCard_ = value;
    }
  }

  /// <summary>Field number for the "LeftCard" field.</summary>
  public const int LeftCardFieldNumber = 7;
  private int leftCard_;
  /// <summary>
  /// 用户房卡数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeftCard {
    get { return leftCard_; }
    set {
      leftCard_ = value;
    }
  }

  /// <summary>Field number for the "CreateUserID" field.</summary>
  public const int CreateUserIDFieldNumber = 8;
  private int createUserID_;
  /// <summary>
  /// 创建者id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CreateUserID {
    get { return createUserID_; }
    set {
      createUserID_ = value;
    }
  }

  /// <summary>Field number for the "AdminUserID" field.</summary>
  public const int AdminUserIDFieldNumber = 9;
  private int adminUserID_;
  /// <summary>
  /// 管理员用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AdminUserID {
    get { return adminUserID_; }
    set {
      adminUserID_ = value;
    }
  }

  /// <summary>Field number for the "Status" field.</summary>
  public const int StatusFieldNumber = 10;
  private int status_;
  /// <summary>
  /// 当前状态 0：正常 1：暂停
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 11;
  private int gameID_;
  /// <summary>
  /// 游戏ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "note" field.</summary>
  public const int NoteFieldNumber = 12;
  private string note_ = "";
  /// <summary>
  /// 备注
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Note {
    get { return note_; }
    set {
      note_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "bVipRoom" field.</summary>
  public const int BVipRoomFieldNumber = 13;
  private int bVipRoom_;
  /// <summary>
  /// 是否vip包房
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BVipRoom {
    get { return bVipRoom_; }
    set {
      bVipRoom_ = value;
    }
  }

  /// <summary>Field number for the "MaxTables" field.</summary>
  public const int MaxTablesFieldNumber = 14;
  private int maxTables_;
  /// <summary>
  /// 最大同时开桌数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxTables {
    get { return maxTables_; }
    set {
      maxTables_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClubRoomInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClubRoomInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomID != other.RoomID) return false;
    if (RoomName != other.RoomName) return false;
    if (RuleStr != other.RuleStr) return false;
    if (!object.Equals(Tim, other.Tim)) return false;
    if (AuthCard != other.AuthCard) return false;
    if (AutoAuthCard != other.AutoAuthCard) return false;
    if (LeftCard != other.LeftCard) return false;
    if (CreateUserID != other.CreateUserID) return false;
    if (AdminUserID != other.AdminUserID) return false;
    if (Status != other.Status) return false;
    if (GameID != other.GameID) return false;
    if (Note != other.Note) return false;
    if (BVipRoom != other.BVipRoom) return false;
    if (MaxTables != other.MaxTables) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
    if (RuleStr.Length != 0) hash ^= RuleStr.GetHashCode();
    if (tim_ != null) hash ^= Tim.GetHashCode();
    if (AuthCard != 0) hash ^= AuthCard.GetHashCode();
    if (AutoAuthCard != 0) hash ^= AutoAuthCard.GetHashCode();
    if (LeftCard != 0) hash ^= LeftCard.GetHashCode();
    if (CreateUserID != 0) hash ^= CreateUserID.GetHashCode();
    if (AdminUserID != 0) hash ^= AdminUserID.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (Note.Length != 0) hash ^= Note.GetHashCode();
    if (BVipRoom != 0) hash ^= BVipRoom.GetHashCode();
    if (MaxTables != 0) hash ^= MaxTables.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomID);
    }
    if (RoomName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(RoomName);
    }
    if (RuleStr.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(RuleStr);
    }
    if (tim_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Tim);
    }
    if (AuthCard != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(AuthCard);
    }
    if (AutoAuthCard != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(AutoAuthCard);
    }
    if (LeftCard != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(LeftCard);
    }
    if (CreateUserID != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(CreateUserID);
    }
    if (AdminUserID != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(AdminUserID);
    }
    if (Status != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Status);
    }
    if (GameID != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(GameID);
    }
    if (Note.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(Note);
    }
    if (BVipRoom != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(BVipRoom);
    }
    if (MaxTables != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(MaxTables);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    if (RoomName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
    }
    if (RuleStr.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RuleStr);
    }
    if (tim_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tim);
    }
    if (AuthCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AuthCard);
    }
    if (AutoAuthCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AutoAuthCard);
    }
    if (LeftCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCard);
    }
    if (CreateUserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreateUserID);
    }
    if (AdminUserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdminUserID);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (Note.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Note);
    }
    if (BVipRoom != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BVipRoom);
    }
    if (MaxTables != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxTables);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClubRoomInfo other) {
    if (other == null) {
      return;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
    if (other.RoomName.Length != 0) {
      RoomName = other.RoomName;
    }
    if (other.RuleStr.Length != 0) {
      RuleStr = other.RuleStr;
    }
    if (other.tim_ != null) {
      if (tim_ == null) {
        tim_ = new global::TableInfoMsg();
      }
      Tim.MergeFrom(other.Tim);
    }
    if (other.AuthCard != 0) {
      AuthCard = other.AuthCard;
    }
    if (other.AutoAuthCard != 0) {
      AutoAuthCard = other.AutoAuthCard;
    }
    if (other.LeftCard != 0) {
      LeftCard = other.LeftCard;
    }
    if (other.CreateUserID != 0) {
      CreateUserID = other.CreateUserID;
    }
    if (other.AdminUserID != 0) {
      AdminUserID = other.AdminUserID;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.Note.Length != 0) {
      Note = other.Note;
    }
    if (other.BVipRoom != 0) {
      BVipRoom = other.BVipRoom;
    }
    if (other.MaxTables != 0) {
      MaxTables = other.MaxTables;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomID = input.ReadInt32();
          break;
        }
        case 18: {
          RoomName = input.ReadString();
          break;
        }
        case 26: {
          RuleStr = input.ReadString();
          break;
        }
        case 34: {
          if (tim_ == null) {
            tim_ = new global::TableInfoMsg();
          }
          input.ReadMessage(tim_);
          break;
        }
        case 40: {
          AuthCard = input.ReadInt32();
          break;
        }
        case 48: {
          AutoAuthCard = input.ReadInt32();
          break;
        }
        case 56: {
          LeftCard = input.ReadInt32();
          break;
        }
        case 64: {
          CreateUserID = input.ReadInt32();
          break;
        }
        case 72: {
          AdminUserID = input.ReadInt32();
          break;
        }
        case 80: {
          Status = input.ReadInt32();
          break;
        }
        case 88: {
          GameID = input.ReadInt32();
          break;
        }
        case 98: {
          Note = input.ReadString();
          break;
        }
        case 104: {
          BVipRoom = input.ReadInt32();
          break;
        }
        case 112: {
          MaxTables = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 桌子信息
/// </summary>
public sealed partial class ClubTableInfo : pb::IMessage<ClubTableInfo> {
  private static readonly pb::MessageParser<ClubTableInfo> _parser = new pb::MessageParser<ClubTableInfo>(() => new ClubTableInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClubTableInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[172]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClubTableInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClubTableInfo(ClubTableInfo other) : this() {
    clubTableID_ = other.clubTableID_;
    tableID_ = other.tableID_;
    tableState_ = other.tableState_;
    totalRound_ = other.totalRound_;
    createTime_ = other.createTime_;
    currentRound_ = other.currentRound_;
    gameID_ = other.gameID_;
    roomID_ = other.roomID_;
    tableNO_ = other.tableNO_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClubTableInfo Clone() {
    return new ClubTableInfo(this);
  }

  /// <summary>Field number for the "ClubTableID" field.</summary>
  public const int ClubTableIDFieldNumber = 1;
  private int clubTableID_;
  /// <summary>
  /// 亲友圈桌子id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClubTableID {
    get { return clubTableID_; }
    set {
      clubTableID_ = value;
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 2;
  private int tableID_;
  /// <summary>
  /// 房间号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "TableState" field.</summary>
  public const int TableStateFieldNumber = 3;
  private int tableState_;
  /// <summary>
  /// 桌子状态 0-等待开桌 1-进行中 2-已结束
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableState {
    get { return tableState_; }
    set {
      tableState_ = value;
    }
  }

  /// <summary>Field number for the "TotalRound" field.</summary>
  public const int TotalRoundFieldNumber = 4;
  private int totalRound_;
  /// <summary>
  /// 总轮次
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalRound {
    get { return totalRound_; }
    set {
      totalRound_ = value;
    }
  }

  /// <summary>Field number for the "CreateTime" field.</summary>
  public const int CreateTimeFieldNumber = 5;
  private int createTime_;
  /// <summary>
  /// 桌子创建时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CreateTime {
    get { return createTime_; }
    set {
      createTime_ = value;
    }
  }

  /// <summary>Field number for the "CurrentRound" field.</summary>
  public const int CurrentRoundFieldNumber = 6;
  private int currentRound_;
  /// <summary>
  /// 当前轮次
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrentRound {
    get { return currentRound_; }
    set {
      currentRound_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 7;
  private int gameID_;
  /// <summary>
  /// 游戏ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 8;
  private int roomID_;
  /// <summary>
  /// 所在房间id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "TableNO" field.</summary>
  public const int TableNOFieldNumber = 9;
  private int tableNO_;
  /// <summary>
  /// 桌子序号	 1-n，对应大厅显示序号如 1,2,3,4,5,6
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableNO {
    get { return tableNO_; }
    set {
      tableNO_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClubTableInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClubTableInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClubTableID != other.ClubTableID) return false;
    if (TableID != other.TableID) return false;
    if (TableState != other.TableState) return false;
    if (TotalRound != other.TotalRound) return false;
    if (CreateTime != other.CreateTime) return false;
    if (CurrentRound != other.CurrentRound) return false;
    if (GameID != other.GameID) return false;
    if (RoomID != other.RoomID) return false;
    if (TableNO != other.TableNO) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClubTableID != 0) hash ^= ClubTableID.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (TableState != 0) hash ^= TableState.GetHashCode();
    if (TotalRound != 0) hash ^= TotalRound.GetHashCode();
    if (CreateTime != 0) hash ^= CreateTime.GetHashCode();
    if (CurrentRound != 0) hash ^= CurrentRound.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    if (TableNO != 0) hash ^= TableNO.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClubTableID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClubTableID);
    }
    if (TableID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableID);
    }
    if (TableState != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TableState);
    }
    if (TotalRound != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TotalRound);
    }
    if (CreateTime != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(CreateTime);
    }
    if (CurrentRound != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(CurrentRound);
    }
    if (GameID != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(GameID);
    }
    if (RoomID != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(RoomID);
    }
    if (TableNO != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(TableNO);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClubTableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClubTableID);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (TableState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableState);
    }
    if (TotalRound != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRound);
    }
    if (CreateTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreateTime);
    }
    if (CurrentRound != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentRound);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    if (TableNO != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableNO);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClubTableInfo other) {
    if (other == null) {
      return;
    }
    if (other.ClubTableID != 0) {
      ClubTableID = other.ClubTableID;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.TableState != 0) {
      TableState = other.TableState;
    }
    if (other.TotalRound != 0) {
      TotalRound = other.TotalRound;
    }
    if (other.CreateTime != 0) {
      CreateTime = other.CreateTime;
    }
    if (other.CurrentRound != 0) {
      CurrentRound = other.CurrentRound;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
    if (other.TableNO != 0) {
      TableNO = other.TableNO;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ClubTableID = input.ReadInt32();
          break;
        }
        case 16: {
          TableID = input.ReadInt32();
          break;
        }
        case 24: {
          TableState = input.ReadInt32();
          break;
        }
        case 32: {
          TotalRound = input.ReadInt32();
          break;
        }
        case 40: {
          CreateTime = input.ReadInt32();
          break;
        }
        case 48: {
          CurrentRound = input.ReadInt32();
          break;
        }
        case 56: {
          GameID = input.ReadInt32();
          break;
        }
        case 64: {
          RoomID = input.ReadInt32();
          break;
        }
        case 72: {
          TableNO = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 玩家信息
/// </summary>
public sealed partial class ClubUserInfo : pb::IMessage<ClubUserInfo> {
  private static readonly pb::MessageParser<ClubUserInfo> _parser = new pb::MessageParser<ClubUserInfo>(() => new ClubUserInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClubUserInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[173]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClubUserInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClubUserInfo(ClubUserInfo other) : this() {
    userID_ = other.userID_;
    nickName_ = other.nickName_;
    headImgUrl_ = other.headImgUrl_;
    userSit_ = other.userSit_;
    clubTableID_ = other.clubTableID_;
    statusOnline_ = other.statusOnline_;
    roomID_ = other.roomID_;
    tableNO_ = other.tableNO_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClubUserInfo Clone() {
    return new ClubUserInfo(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "NickName" field.</summary>
  public const int NickNameFieldNumber = 2;
  private string nickName_ = "";
  /// <summary>
  /// 昵称
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NickName {
    get { return nickName_; }
    set {
      nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "HeadImgUrl" field.</summary>
  public const int HeadImgUrlFieldNumber = 3;
  private string headImgUrl_ = "";
  /// <summary>
  /// 头像地址
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HeadImgUrl {
    get { return headImgUrl_; }
    set {
      headImgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "UserSit" field.</summary>
  public const int UserSitFieldNumber = 4;
  private int userSit_;
  /// <summary>
  /// 玩家座位    0东 1南 2西 3北 -1站起
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserSit {
    get { return userSit_; }
    set {
      userSit_ = value;
    }
  }

  /// <summary>Field number for the "ClubTableID" field.</summary>
  public const int ClubTableIDFieldNumber = 5;
  private int clubTableID_;
  /// <summary>
  /// 玩家所在tableid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClubTableID {
    get { return clubTableID_; }
    set {
      clubTableID_ = value;
    }
  }

  /// <summary>Field number for the "status_online" field.</summary>
  public const int StatusOnlineFieldNumber = 6;
  private int statusOnline_;
  /// <summary>
  /// 在线状态 0:在线 1:离线
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StatusOnline {
    get { return statusOnline_; }
    set {
      statusOnline_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 7;
  private int roomID_;
  /// <summary>
  /// 所在房间id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "TableNO" field.</summary>
  public const int TableNOFieldNumber = 8;
  private int tableNO_;
  /// <summary>
  /// 桌子序号	 1-n，对应大厅显示序号如 1,2,3,4,5,6
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableNO {
    get { return tableNO_; }
    set {
      tableNO_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClubUserInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClubUserInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (NickName != other.NickName) return false;
    if (HeadImgUrl != other.HeadImgUrl) return false;
    if (UserSit != other.UserSit) return false;
    if (ClubTableID != other.ClubTableID) return false;
    if (StatusOnline != other.StatusOnline) return false;
    if (RoomID != other.RoomID) return false;
    if (TableNO != other.TableNO) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (NickName.Length != 0) hash ^= NickName.GetHashCode();
    if (HeadImgUrl.Length != 0) hash ^= HeadImgUrl.GetHashCode();
    if (UserSit != 0) hash ^= UserSit.GetHashCode();
    if (ClubTableID != 0) hash ^= ClubTableID.GetHashCode();
    if (StatusOnline != 0) hash ^= StatusOnline.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    if (TableNO != 0) hash ^= TableNO.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (NickName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(NickName);
    }
    if (HeadImgUrl.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(HeadImgUrl);
    }
    if (UserSit != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(UserSit);
    }
    if (ClubTableID != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(ClubTableID);
    }
    if (StatusOnline != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(StatusOnline);
    }
    if (RoomID != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(RoomID);
    }
    if (TableNO != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(TableNO);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (NickName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
    }
    if (HeadImgUrl.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadImgUrl);
    }
    if (UserSit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserSit);
    }
    if (ClubTableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClubTableID);
    }
    if (StatusOnline != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusOnline);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    if (TableNO != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableNO);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClubUserInfo other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.NickName.Length != 0) {
      NickName = other.NickName;
    }
    if (other.HeadImgUrl.Length != 0) {
      HeadImgUrl = other.HeadImgUrl;
    }
    if (other.UserSit != 0) {
      UserSit = other.UserSit;
    }
    if (other.ClubTableID != 0) {
      ClubTableID = other.ClubTableID;
    }
    if (other.StatusOnline != 0) {
      StatusOnline = other.StatusOnline;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
    if (other.TableNO != 0) {
      TableNO = other.TableNO;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 18: {
          NickName = input.ReadString();
          break;
        }
        case 26: {
          HeadImgUrl = input.ReadString();
          break;
        }
        case 32: {
          UserSit = input.ReadInt32();
          break;
        }
        case 40: {
          ClubTableID = input.ReadInt32();
          break;
        }
        case 48: {
          StatusOnline = input.ReadInt32();
          break;
        }
        case 56: {
          RoomID = input.ReadInt32();
          break;
        }
        case 64: {
          TableNO = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define NTF_ENTER_CLUB					//通知进入退出亲友圈（用于更新在线人数）
/// </summary>
public sealed partial class NtfEnterClubRoom : pb::IMessage<NtfEnterClubRoom> {
  private static readonly pb::MessageParser<NtfEnterClubRoom> _parser = new pb::MessageParser<NtfEnterClubRoom>(() => new NtfEnterClubRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NtfEnterClubRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[174]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfEnterClubRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfEnterClubRoom(NtfEnterClubRoom other) : this() {
    userID_ = other.userID_;
    type_ = other.type_;
    Cui = other.cui_ != null ? other.Cui.Clone() : null;
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfEnterClubRoom Clone() {
    return new NtfEnterClubRoom(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  /// <summary>
  /// 1-新玩家进入亲友圈  0-亲友圈玩家退出亲友圈
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "cui" field.</summary>
  public const int CuiFieldNumber = 3;
  private global::ClubUserInfo cui_;
  /// <summary>
  /// 如果是新玩家进入，发送过来玩家个人信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ClubUserInfo Cui {
    get { return cui_; }
    set {
      cui_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 4;
  private int roomID_;
  /// <summary>
  /// 所在房间id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NtfEnterClubRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NtfEnterClubRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (Type != other.Type) return false;
    if (!object.Equals(Cui, other.Cui)) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (cui_ != null) hash ^= Cui.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (cui_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Cui);
    }
    if (RoomID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (cui_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cui);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NtfEnterClubRoom other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.cui_ != null) {
      if (cui_ == null) {
        cui_ = new global::ClubUserInfo();
      }
      Cui.MergeFrom(other.Cui);
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 26: {
          if (cui_ == null) {
            cui_ = new global::ClubUserInfo();
          }
          input.ReadMessage(cui_);
          break;
        }
        case 32: {
          RoomID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define NTF_SIT_CLUB_TABLE				//通知坐下站起
/// </summary>
public sealed partial class NtfSitClubTable : pb::IMessage<NtfSitClubTable> {
  private static readonly pb::MessageParser<NtfSitClubTable> _parser = new pb::MessageParser<NtfSitClubTable>(() => new NtfSitClubTable());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NtfSitClubTable> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[175]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfSitClubTable() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfSitClubTable(NtfSitClubTable other) : this() {
    userID_ = other.userID_;
    userSit_ = other.userSit_;
    clubTableID_ = other.clubTableID_;
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfSitClubTable Clone() {
    return new NtfSitClubTable(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "UserSit" field.</summary>
  public const int UserSitFieldNumber = 2;
  private int userSit_;
  /// <summary>
  /// 玩家座位    0东 1南 2西 3北 -1站起
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserSit {
    get { return userSit_; }
    set {
      userSit_ = value;
    }
  }

  /// <summary>Field number for the "ClubTableID" field.</summary>
  public const int ClubTableIDFieldNumber = 3;
  private int clubTableID_;
  /// <summary>
  /// 桌子唯一id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClubTableID {
    get { return clubTableID_; }
    set {
      clubTableID_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 4;
  private int roomID_;
  /// <summary>
  /// 所在房间id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NtfSitClubTable);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NtfSitClubTable other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (UserSit != other.UserSit) return false;
    if (ClubTableID != other.ClubTableID) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (UserSit != 0) hash ^= UserSit.GetHashCode();
    if (ClubTableID != 0) hash ^= ClubTableID.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (UserSit != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UserSit);
    }
    if (ClubTableID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ClubTableID);
    }
    if (RoomID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (UserSit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserSit);
    }
    if (ClubTableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClubTableID);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NtfSitClubTable other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.UserSit != 0) {
      UserSit = other.UserSit;
    }
    if (other.ClubTableID != 0) {
      ClubTableID = other.ClubTableID;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          UserSit = input.ReadInt32();
          break;
        }
        case 24: {
          ClubTableID = input.ReadInt32();
          break;
        }
        case 32: {
          RoomID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define NTF_CLUB_USER_BREAK				//通知用户断线离线
/// </summary>
public sealed partial class NtfClubUserBreak : pb::IMessage<NtfClubUserBreak> {
  private static readonly pb::MessageParser<NtfClubUserBreak> _parser = new pb::MessageParser<NtfClubUserBreak>(() => new NtfClubUserBreak());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NtfClubUserBreak> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[176]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubUserBreak() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubUserBreak(NtfClubUserBreak other) : this() {
    userID_ = other.userID_;
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubUserBreak Clone() {
    return new NtfClubUserBreak(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  /// <summary>
  ///  0:切回  2:切走
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NtfClubUserBreak);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NtfClubUserBreak other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NtfClubUserBreak other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define NTF_CLUB_RULE_CHANGE				//通知页签 创/删/改
/// </summary>
public sealed partial class NtfClubRoomChange : pb::IMessage<NtfClubRoomChange> {
  private static readonly pb::MessageParser<NtfClubRoomChange> _parser = new pb::MessageParser<NtfClubRoomChange>(() => new NtfClubRoomChange());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NtfClubRoomChange> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[177]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubRoomChange() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubRoomChange(NtfClubRoomChange other) : this() {
    type_ = other.type_;
    Cri = other.cri_ != null ? other.Cri.Clone() : null;
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubRoomChange Clone() {
    return new NtfClubRoomChange(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///  0-删除  1-创建  2-修改
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "cri" field.</summary>
  public const int CriFieldNumber = 2;
  private global::ClubRoomInfo cri_;
  /// <summary>
  /// 规则信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ClubRoomInfo Cri {
    get { return cri_; }
    set {
      cri_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private int roomID_;
  /// <summary>
  /// 如果删得只剩一个牌室，强制进入的牌室id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NtfClubRoomChange);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NtfClubRoomChange other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (!object.Equals(Cri, other.Cri)) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (cri_ != null) hash ^= Cri.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (cri_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Cri);
    }
    if (RoomID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (cri_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cri);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NtfClubRoomChange other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.cri_ != null) {
      if (cri_ == null) {
        cri_ = new global::ClubRoomInfo();
      }
      Cri.MergeFrom(other.Cri);
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 18: {
          if (cri_ == null) {
            cri_ = new global::ClubRoomInfo();
          }
          input.ReadMessage(cri_);
          break;
        }
        case 24: {
          RoomID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define NTF_CLUB_TABLE_STATUS					//通知桌子状态
/// </summary>
public sealed partial class NtfClubTableStatus : pb::IMessage<NtfClubTableStatus> {
  private static readonly pb::MessageParser<NtfClubTableStatus> _parser = new pb::MessageParser<NtfClubTableStatus>(() => new NtfClubTableStatus());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NtfClubTableStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[178]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubTableStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubTableStatus(NtfClubTableStatus other) : this() {
    clubTableID_ = other.clubTableID_;
    tableNO_ = other.tableNO_;
    tableID_ = other.tableID_;
    tableState_ = other.tableState_;
    totalRound_ = other.totalRound_;
    createTime_ = other.createTime_;
    currentRound_ = other.currentRound_;
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubTableStatus Clone() {
    return new NtfClubTableStatus(this);
  }

  /// <summary>Field number for the "ClubTableID" field.</summary>
  public const int ClubTableIDFieldNumber = 1;
  private int clubTableID_;
  /// <summary>
  /// 亲友圈桌子id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClubTableID {
    get { return clubTableID_; }
    set {
      clubTableID_ = value;
    }
  }

  /// <summary>Field number for the "TableNO" field.</summary>
  public const int TableNOFieldNumber = 2;
  private int tableNO_;
  /// <summary>
  /// 桌子序号id，1,2,3,4,5,6...
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableNO {
    get { return tableNO_; }
    set {
      tableNO_ = value;
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 3;
  private int tableID_;
  /// <summary>
  /// 房间号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "TableState" field.</summary>
  public const int TableStateFieldNumber = 4;
  private int tableState_;
  /// <summary>
  /// 桌子状态 0-等待开桌 1-进行中 2-已结束
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableState {
    get { return tableState_; }
    set {
      tableState_ = value;
    }
  }

  /// <summary>Field number for the "TotalRound" field.</summary>
  public const int TotalRoundFieldNumber = 5;
  private int totalRound_;
  /// <summary>
  /// 总轮次
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalRound {
    get { return totalRound_; }
    set {
      totalRound_ = value;
    }
  }

  /// <summary>Field number for the "CreateTime" field.</summary>
  public const int CreateTimeFieldNumber = 6;
  private int createTime_;
  /// <summary>
  /// 桌子创建时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CreateTime {
    get { return createTime_; }
    set {
      createTime_ = value;
    }
  }

  /// <summary>Field number for the "CurrentRound" field.</summary>
  public const int CurrentRoundFieldNumber = 7;
  private int currentRound_;
  /// <summary>
  /// 当前轮次
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrentRound {
    get { return currentRound_; }
    set {
      currentRound_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 8;
  private int roomID_;
  /// <summary>
  /// 所在房间id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NtfClubTableStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NtfClubTableStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClubTableID != other.ClubTableID) return false;
    if (TableNO != other.TableNO) return false;
    if (TableID != other.TableID) return false;
    if (TableState != other.TableState) return false;
    if (TotalRound != other.TotalRound) return false;
    if (CreateTime != other.CreateTime) return false;
    if (CurrentRound != other.CurrentRound) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClubTableID != 0) hash ^= ClubTableID.GetHashCode();
    if (TableNO != 0) hash ^= TableNO.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (TableState != 0) hash ^= TableState.GetHashCode();
    if (TotalRound != 0) hash ^= TotalRound.GetHashCode();
    if (CreateTime != 0) hash ^= CreateTime.GetHashCode();
    if (CurrentRound != 0) hash ^= CurrentRound.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClubTableID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClubTableID);
    }
    if (TableNO != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableNO);
    }
    if (TableID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TableID);
    }
    if (TableState != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TableState);
    }
    if (TotalRound != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(TotalRound);
    }
    if (CreateTime != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(CreateTime);
    }
    if (CurrentRound != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(CurrentRound);
    }
    if (RoomID != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClubTableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClubTableID);
    }
    if (TableNO != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableNO);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (TableState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableState);
    }
    if (TotalRound != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRound);
    }
    if (CreateTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreateTime);
    }
    if (CurrentRound != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentRound);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NtfClubTableStatus other) {
    if (other == null) {
      return;
    }
    if (other.ClubTableID != 0) {
      ClubTableID = other.ClubTableID;
    }
    if (other.TableNO != 0) {
      TableNO = other.TableNO;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.TableState != 0) {
      TableState = other.TableState;
    }
    if (other.TotalRound != 0) {
      TotalRound = other.TotalRound;
    }
    if (other.CreateTime != 0) {
      CreateTime = other.CreateTime;
    }
    if (other.CurrentRound != 0) {
      CurrentRound = other.CurrentRound;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ClubTableID = input.ReadInt32();
          break;
        }
        case 16: {
          TableNO = input.ReadInt32();
          break;
        }
        case 24: {
          TableID = input.ReadInt32();
          break;
        }
        case 32: {
          TableState = input.ReadInt32();
          break;
        }
        case 40: {
          TotalRound = input.ReadInt32();
          break;
        }
        case 48: {
          CreateTime = input.ReadInt32();
          break;
        }
        case 56: {
          CurrentRound = input.ReadInt32();
          break;
        }
        case 64: {
          RoomID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// 													//通知这个人退出亲友圈
/// </summary>
public sealed partial class NtfClubPlayerExit : pb::IMessage<NtfClubPlayerExit> {
  private static readonly pb::MessageParser<NtfClubPlayerExit> _parser = new pb::MessageParser<NtfClubPlayerExit>(() => new NtfClubPlayerExit());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NtfClubPlayerExit> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[179]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubPlayerExit() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubPlayerExit(NtfClubPlayerExit other) : this() {
    Msg = other.msg_ != null ? other.Msg.Clone() : null;
    roomID_ = other.roomID_;
    userID_ = other.userID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubPlayerExit Clone() {
    return new NtfClubPlayerExit(this);
  }

  /// <summary>Field number for the "msg" field.</summary>
  public const int MsgFieldNumber = 1;
  private global::AckApplyClubRoom msg_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AckApplyClubRoom Msg {
    get { return msg_; }
    set {
      msg_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 2;
  private int roomID_;
  /// <summary>
  /// 指定广播范围-牌室id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 3;
  private int userID_;
  /// <summary>
  /// 指定广播范围-用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NtfClubPlayerExit);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NtfClubPlayerExit other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Msg, other.Msg)) return false;
    if (RoomID != other.RoomID) return false;
    if (UserID != other.UserID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (msg_ != null) hash ^= Msg.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    if (UserID != 0) hash ^= UserID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (msg_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Msg);
    }
    if (RoomID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomID);
    }
    if (UserID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(UserID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (msg_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NtfClubPlayerExit other) {
    if (other == null) {
      return;
    }
    if (other.msg_ != null) {
      if (msg_ == null) {
        msg_ = new global::AckApplyClubRoom();
      }
      Msg.MergeFrom(other.Msg);
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (msg_ == null) {
            msg_ = new global::AckApplyClubRoom();
          }
          input.ReadMessage(msg_);
          break;
        }
        case 16: {
          RoomID = input.ReadInt32();
          break;
        }
        case 24: {
          UserID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define REQ_SIT_CLUB_TABLE		//坐下站起
/// </summary>
public sealed partial class ReqSitClubTable : pb::IMessage<ReqSitClubTable> {
  private static readonly pb::MessageParser<ReqSitClubTable> _parser = new pb::MessageParser<ReqSitClubTable>(() => new ReqSitClubTable());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqSitClubTable> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[180]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqSitClubTable() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqSitClubTable(ReqSitClubTable other) : this() {
    type_ = other.type_;
    userID_ = other.userID_;
    roomID_ = other.roomID_;
    gameID_ = other.gameID_;
    tableNO_ = other.tableNO_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqSitClubTable Clone() {
    return new ReqSitClubTable(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  /// type  1-坐下 0-站起
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 2;
  private int userID_;
  /// <summary>
  /// 用户id					//Gate添加参数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private int roomID_;
  /// <summary>
  /// 牌室id					//Gate添加参数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "GameID" field.</summary>
  public const int GameIDFieldNumber = 4;
  private int gameID_;
  /// <summary>
  /// 进入桌子的gameid			//Gate添加参数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "TableNO" field.</summary>
  public const int TableNOFieldNumber = 5;
  private int tableNO_;
  /// <summary>
  /// 桌子序号	 1-n，对应大厅显示序号如 1,2,3,4,5,6
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableNO {
    get { return tableNO_; }
    set {
      tableNO_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqSitClubTable);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqSitClubTable other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (UserID != other.UserID) return false;
    if (RoomID != other.RoomID) return false;
    if (GameID != other.GameID) return false;
    if (TableNO != other.TableNO) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (TableNO != 0) hash ^= TableNO.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (UserID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UserID);
    }
    if (RoomID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RoomID);
    }
    if (GameID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(GameID);
    }
    if (TableNO != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(TableNO);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (TableNO != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableNO);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqSitClubTable other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.TableNO != 0) {
      TableNO = other.TableNO;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 16: {
          UserID = input.ReadInt32();
          break;
        }
        case 24: {
          RoomID = input.ReadInt32();
          break;
        }
        case 32: {
          GameID = input.ReadInt32();
          break;
        }
        case 40: {
          TableNO = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class AckSitClubTable : pb::IMessage<AckSitClubTable> {
  private static readonly pb::MessageParser<AckSitClubTable> _parser = new pb::MessageParser<AckSitClubTable>(() => new AckSitClubTable());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckSitClubTable> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[181]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckSitClubTable() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckSitClubTable(AckSitClubTable other) : this() {
    type_ = other.type_;
    result_ = other.result_;
    errMsg_ = other.errMsg_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckSitClubTable Clone() {
    return new AckSitClubTable(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  /// type  1-坐下 0-站起
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 2;
  private int result_;
  /// <summary>
  /// 结果 1-成功 非1-失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "ErrMsg" field.</summary>
  public const int ErrMsgFieldNumber = 3;
  private string errMsg_ = "";
  /// <summary>
  /// 失败原因
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrMsg {
    get { return errMsg_; }
    set {
      errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckSitClubTable);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckSitClubTable other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Result != other.Result) return false;
    if (ErrMsg != other.ErrMsg) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (Result != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Result);
    }
    if (ErrMsg.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ErrMsg);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (ErrMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckSitClubTable other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.ErrMsg.Length != 0) {
      ErrMsg = other.ErrMsg;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 16: {
          Result = input.ReadInt32();
          break;
        }
        case 26: {
          ErrMsg = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define REQ_EXIT_CLUB				//离开亲友圈
/// </summary>
public sealed partial class ReqExitClubRoom : pb::IMessage<ReqExitClubRoom> {
  private static readonly pb::MessageParser<ReqExitClubRoom> _parser = new pb::MessageParser<ReqExitClubRoom>(() => new ReqExitClubRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqExitClubRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[182]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqExitClubRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqExitClubRoom(ReqExitClubRoom other) : this() {
    userID_ = other.userID_;
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqExitClubRoom Clone() {
    return new ReqExitClubRoom(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 2;
  private int roomID_;
  /// <summary>
  /// 亲友圈房间id					//Gate添加参数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqExitClubRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqExitClubRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (RoomID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqExitClubRoom other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          RoomID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 返回 退出亲友圈
/// </summary>
public sealed partial class AckExitClubRoom : pb::IMessage<AckExitClubRoom> {
  private static readonly pb::MessageParser<AckExitClubRoom> _parser = new pb::MessageParser<AckExitClubRoom>(() => new AckExitClubRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckExitClubRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[183]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckExitClubRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckExitClubRoom(AckExitClubRoom other) : this() {
    result_ = other.result_;
    errMsg_ = other.errMsg_;
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckExitClubRoom Clone() {
    return new AckExitClubRoom(this);
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 退出结果 0-成功 非1-失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "ErrMsg" field.</summary>
  public const int ErrMsgFieldNumber = 2;
  private string errMsg_ = "";
  /// <summary>
  /// 失败原因
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrMsg {
    get { return errMsg_; }
    set {
      errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private int roomID_;
  /// <summary>
  /// 亲友圈房间id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckExitClubRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckExitClubRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (ErrMsg != other.ErrMsg) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (ErrMsg.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrMsg);
    }
    if (RoomID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (ErrMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckExitClubRoom other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.ErrMsg.Length != 0) {
      ErrMsg = other.ErrMsg;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          ErrMsg = input.ReadString();
          break;
        }
        case 24: {
          RoomID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define REQ_CREATE_CLUB_RULE		//创建亲友圈包间
/// </summary>
public sealed partial class ReqCreateClubRoom : pb::IMessage<ReqCreateClubRoom> {
  private static readonly pb::MessageParser<ReqCreateClubRoom> _parser = new pb::MessageParser<ReqCreateClubRoom>(() => new ReqCreateClubRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqCreateClubRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[184]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqCreateClubRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqCreateClubRoom(ReqCreateClubRoom other) : this() {
    userID_ = other.userID_;
    Cri = other.cri_ != null ? other.Cri.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqCreateClubRoom Clone() {
    return new ReqCreateClubRoom(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "cri" field.</summary>
  public const int CriFieldNumber = 2;
  private global::ClubRoomInfo cri_;
  /// <summary>
  /// 创建的包房信息，部分字段可不填
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ClubRoomInfo Cri {
    get { return cri_; }
    set {
      cri_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqCreateClubRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqCreateClubRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (!object.Equals(Cri, other.Cri)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (cri_ != null) hash ^= Cri.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (cri_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Cri);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (cri_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cri);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqCreateClubRoom other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.cri_ != null) {
      if (cri_ == null) {
        cri_ = new global::ClubRoomInfo();
      }
      Cri.MergeFrom(other.Cri);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 18: {
          if (cri_ == null) {
            cri_ = new global::ClubRoomInfo();
          }
          input.ReadMessage(cri_);
          break;
        }
      }
    }
  }

}

public sealed partial class AckCreateClubRoom : pb::IMessage<AckCreateClubRoom> {
  private static readonly pb::MessageParser<AckCreateClubRoom> _parser = new pb::MessageParser<AckCreateClubRoom>(() => new AckCreateClubRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckCreateClubRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[185]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckCreateClubRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckCreateClubRoom(AckCreateClubRoom other) : this() {
    result_ = other.result_;
    errMsg_ = other.errMsg_;
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckCreateClubRoom Clone() {
    return new AckCreateClubRoom(this);
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 创建结果 0-成功 非1-失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "ErrMsg" field.</summary>
  public const int ErrMsgFieldNumber = 2;
  private string errMsg_ = "";
  /// <summary>
  /// 失败原因
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrMsg {
    get { return errMsg_; }
    set {
      errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private int roomID_;
  /// <summary>
  /// 规则（包房）id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckCreateClubRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckCreateClubRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (ErrMsg != other.ErrMsg) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (ErrMsg.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrMsg);
    }
    if (RoomID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (ErrMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckCreateClubRoom other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.ErrMsg.Length != 0) {
      ErrMsg = other.ErrMsg;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          ErrMsg = input.ReadString();
          break;
        }
        case 24: {
          RoomID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define REQ_MODIFY_CLUB_RULE		//修改亲友圈包间
/// </summary>
public sealed partial class ReqModifyClubRoom : pb::IMessage<ReqModifyClubRoom> {
  private static readonly pb::MessageParser<ReqModifyClubRoom> _parser = new pb::MessageParser<ReqModifyClubRoom>(() => new ReqModifyClubRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqModifyClubRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[186]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqModifyClubRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqModifyClubRoom(ReqModifyClubRoom other) : this() {
    userID_ = other.userID_;
    Cri = other.cri_ != null ? other.Cri.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqModifyClubRoom Clone() {
    return new ReqModifyClubRoom(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "cri" field.</summary>
  public const int CriFieldNumber = 2;
  private global::ClubRoomInfo cri_;
  /// <summary>
  /// 创建的包房信息，部分字段可不填
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ClubRoomInfo Cri {
    get { return cri_; }
    set {
      cri_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqModifyClubRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqModifyClubRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (!object.Equals(Cri, other.Cri)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (cri_ != null) hash ^= Cri.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (cri_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Cri);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (cri_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cri);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqModifyClubRoom other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.cri_ != null) {
      if (cri_ == null) {
        cri_ = new global::ClubRoomInfo();
      }
      Cri.MergeFrom(other.Cri);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 18: {
          if (cri_ == null) {
            cri_ = new global::ClubRoomInfo();
          }
          input.ReadMessage(cri_);
          break;
        }
      }
    }
  }

}

public sealed partial class AckModifyClubRoom : pb::IMessage<AckModifyClubRoom> {
  private static readonly pb::MessageParser<AckModifyClubRoom> _parser = new pb::MessageParser<AckModifyClubRoom>(() => new AckModifyClubRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckModifyClubRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[187]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckModifyClubRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckModifyClubRoom(AckModifyClubRoom other) : this() {
    result_ = other.result_;
    errMsg_ = other.errMsg_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckModifyClubRoom Clone() {
    return new AckModifyClubRoom(this);
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 修改结果 0-成功 非1-失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "ErrMsg" field.</summary>
  public const int ErrMsgFieldNumber = 2;
  private string errMsg_ = "";
  /// <summary>
  /// 失败原因
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrMsg {
    get { return errMsg_; }
    set {
      errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckModifyClubRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckModifyClubRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (ErrMsg != other.ErrMsg) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (ErrMsg.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrMsg);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (ErrMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckModifyClubRoom other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.ErrMsg.Length != 0) {
      ErrMsg = other.ErrMsg;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          ErrMsg = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define REQ_DEL_CLUB_RULE			//删除牌室
/// </summary>
public sealed partial class ReqDelClubRoom : pb::IMessage<ReqDelClubRoom> {
  private static readonly pb::MessageParser<ReqDelClubRoom> _parser = new pb::MessageParser<ReqDelClubRoom>(() => new ReqDelClubRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqDelClubRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[188]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqDelClubRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqDelClubRoom(ReqDelClubRoom other) : this() {
    userID_ = other.userID_;
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqDelClubRoom Clone() {
    return new ReqDelClubRoom(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 2;
  private int roomID_;
  /// <summary>
  /// （亲友圈包间）id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqDelClubRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqDelClubRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (RoomID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqDelClubRoom other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          RoomID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class AckDelClubRoom : pb::IMessage<AckDelClubRoom> {
  private static readonly pb::MessageParser<AckDelClubRoom> _parser = new pb::MessageParser<AckDelClubRoom>(() => new AckDelClubRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckDelClubRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[189]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckDelClubRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckDelClubRoom(AckDelClubRoom other) : this() {
    result_ = other.result_;
    errMsg_ = other.errMsg_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckDelClubRoom Clone() {
    return new AckDelClubRoom(this);
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 删除结果 0-成功 非1-失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "ErrMsg" field.</summary>
  public const int ErrMsgFieldNumber = 2;
  private string errMsg_ = "";
  /// <summary>
  /// 失败原因
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrMsg {
    get { return errMsg_; }
    set {
      errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckDelClubRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckDelClubRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (ErrMsg != other.ErrMsg) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (ErrMsg.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrMsg);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (ErrMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckDelClubRoom other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.ErrMsg.Length != 0) {
      ErrMsg = other.ErrMsg;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          ErrMsg = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define REQ_CLUB_ROOM_AUTHCARD		//牌室授卡
/// </summary>
public sealed partial class ReqClubRoomAuthCard : pb::IMessage<ReqClubRoomAuthCard> {
  private static readonly pb::MessageParser<ReqClubRoomAuthCard> _parser = new pb::MessageParser<ReqClubRoomAuthCard>(() => new ReqClubRoomAuthCard());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqClubRoomAuthCard> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[190]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqClubRoomAuthCard() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqClubRoomAuthCard(ReqClubRoomAuthCard other) : this() {
    userID_ = other.userID_;
    roomID_ = other.roomID_;
    authCard_ = other.authCard_;
    autoAuthCard_ = other.autoAuthCard_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqClubRoomAuthCard Clone() {
    return new ReqClubRoomAuthCard(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 2;
  private int roomID_;
  /// <summary>
  /// 亲友圈包间id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "AuthCard" field.</summary>
  public const int AuthCardFieldNumber = 3;
  private int authCard_;
  /// <summary>
  /// 用户房卡数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AuthCard {
    get { return authCard_; }
    set {
      authCard_ = value;
    }
  }

  /// <summary>Field number for the "AutoAuthCard" field.</summary>
  public const int AutoAuthCardFieldNumber = 4;
  private int autoAuthCard_;
  /// <summary>
  /// 自动授卡数 >0代表无限，直到合伙人身上的房卡消耗光
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AutoAuthCard {
    get { return autoAuthCard_; }
    set {
      autoAuthCard_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqClubRoomAuthCard);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqClubRoomAuthCard other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (RoomID != other.RoomID) return false;
    if (AuthCard != other.AuthCard) return false;
    if (AutoAuthCard != other.AutoAuthCard) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    if (AuthCard != 0) hash ^= AuthCard.GetHashCode();
    if (AutoAuthCard != 0) hash ^= AutoAuthCard.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (RoomID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomID);
    }
    if (AuthCard != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(AuthCard);
    }
    if (AutoAuthCard != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(AutoAuthCard);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    if (AuthCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AuthCard);
    }
    if (AutoAuthCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AutoAuthCard);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqClubRoomAuthCard other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
    if (other.AuthCard != 0) {
      AuthCard = other.AuthCard;
    }
    if (other.AutoAuthCard != 0) {
      AutoAuthCard = other.AutoAuthCard;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          RoomID = input.ReadInt32();
          break;
        }
        case 24: {
          AuthCard = input.ReadInt32();
          break;
        }
        case 32: {
          AutoAuthCard = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class AckClubRoomAuthCard : pb::IMessage<AckClubRoomAuthCard> {
  private static readonly pb::MessageParser<AckClubRoomAuthCard> _parser = new pb::MessageParser<AckClubRoomAuthCard>(() => new AckClubRoomAuthCard());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckClubRoomAuthCard> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[191]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckClubRoomAuthCard() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckClubRoomAuthCard(AckClubRoomAuthCard other) : this() {
    result_ = other.result_;
    errMsg_ = other.errMsg_;
    authCard_ = other.authCard_;
    autoAuthCard_ = other.autoAuthCard_;
    leftCard_ = other.leftCard_;
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckClubRoomAuthCard Clone() {
    return new AckClubRoomAuthCard(this);
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 修改结果 0-成功 非1-失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "ErrMsg" field.</summary>
  public const int ErrMsgFieldNumber = 2;
  private string errMsg_ = "";
  /// <summary>
  /// 失败原因
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrMsg {
    get { return errMsg_; }
    set {
      errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "AuthCard" field.</summary>
  public const int AuthCardFieldNumber = 3;
  private int authCard_;
  /// <summary>
  /// 包间房卡数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AuthCard {
    get { return authCard_; }
    set {
      authCard_ = value;
    }
  }

  /// <summary>Field number for the "AutoAuthCard" field.</summary>
  public const int AutoAuthCardFieldNumber = 4;
  private int autoAuthCard_;
  /// <summary>
  /// 自动授卡数 >0代表无限，直到合伙人身上的房卡消耗光
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AutoAuthCard {
    get { return autoAuthCard_; }
    set {
      autoAuthCard_ = value;
    }
  }

  /// <summary>Field number for the "LeftCard" field.</summary>
  public const int LeftCardFieldNumber = 5;
  private int leftCard_;
  /// <summary>
  /// 代理剩余总房卡数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeftCard {
    get { return leftCard_; }
    set {
      leftCard_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 6;
  private int roomID_;
  /// <summary>
  /// 规则（牌室）id 更改AuthCard属于哪个牌室
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckClubRoomAuthCard);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckClubRoomAuthCard other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (ErrMsg != other.ErrMsg) return false;
    if (AuthCard != other.AuthCard) return false;
    if (AutoAuthCard != other.AutoAuthCard) return false;
    if (LeftCard != other.LeftCard) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
    if (AuthCard != 0) hash ^= AuthCard.GetHashCode();
    if (AutoAuthCard != 0) hash ^= AutoAuthCard.GetHashCode();
    if (LeftCard != 0) hash ^= LeftCard.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (ErrMsg.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrMsg);
    }
    if (AuthCard != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(AuthCard);
    }
    if (AutoAuthCard != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(AutoAuthCard);
    }
    if (LeftCard != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(LeftCard);
    }
    if (RoomID != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (ErrMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
    }
    if (AuthCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AuthCard);
    }
    if (AutoAuthCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AutoAuthCard);
    }
    if (LeftCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCard);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckClubRoomAuthCard other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.ErrMsg.Length != 0) {
      ErrMsg = other.ErrMsg;
    }
    if (other.AuthCard != 0) {
      AuthCard = other.AuthCard;
    }
    if (other.AutoAuthCard != 0) {
      AutoAuthCard = other.AutoAuthCard;
    }
    if (other.LeftCard != 0) {
      LeftCard = other.LeftCard;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          ErrMsg = input.ReadString();
          break;
        }
        case 24: {
          AuthCard = input.ReadInt32();
          break;
        }
        case 32: {
          AutoAuthCard = input.ReadInt32();
          break;
        }
        case 40: {
          LeftCard = input.ReadInt32();
          break;
        }
        case 48: {
          RoomID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define REQ_CLUB_ADMIN_MEMBER           //管理员添加删除用户/审批 同意拒绝用户加入
/// </summary>
public sealed partial class ReqClubAdminMember : pb::IMessage<ReqClubAdminMember> {
  private static readonly pb::MessageParser<ReqClubAdminMember> _parser = new pb::MessageParser<ReqClubAdminMember>(() => new ReqClubAdminMember());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqClubAdminMember> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[192]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqClubAdminMember() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqClubAdminMember(ReqClubAdminMember other) : this() {
    userID_ = other.userID_;
    roomID_ = other.roomID_;
    optUserID_ = other.optUserID_;
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqClubAdminMember Clone() {
    return new ReqClubAdminMember(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 管理员用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 2;
  private int roomID_;
  /// <summary>
  /// 牌室id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "OptUserID" field.</summary>
  public const int OptUserIDFieldNumber = 3;
  private int optUserID_;
  /// <summary>
  /// 被操作的用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OptUserID {
    get { return optUserID_; }
    set {
      optUserID_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 4;
  private int type_;
  /// <summary>
  /// 类型 1-申请加入  0-申请退出
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqClubAdminMember);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqClubAdminMember other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (RoomID != other.RoomID) return false;
    if (OptUserID != other.OptUserID) return false;
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    if (OptUserID != 0) hash ^= OptUserID.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (RoomID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomID);
    }
    if (OptUserID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(OptUserID);
    }
    if (Type != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    if (OptUserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OptUserID);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqClubAdminMember other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
    if (other.OptUserID != 0) {
      OptUserID = other.OptUserID;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          RoomID = input.ReadInt32();
          break;
        }
        case 24: {
          OptUserID = input.ReadInt32();
          break;
        }
        case 32: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class AckClubAdminMember : pb::IMessage<AckClubAdminMember> {
  private static readonly pb::MessageParser<AckClubAdminMember> _parser = new pb::MessageParser<AckClubAdminMember>(() => new AckClubAdminMember());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckClubAdminMember> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[193]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckClubAdminMember() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckClubAdminMember(AckClubAdminMember other) : this() {
    result_ = other.result_;
    type_ = other.type_;
    errMsg_ = other.errMsg_;
    optUserID_ = other.optUserID_;
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckClubAdminMember Clone() {
    return new AckClubAdminMember(this);
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 进入结果 0-成功 非0-失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  /// <summary>
  /// 类型 1-申请加入  0-申请退出
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "ErrMsg" field.</summary>
  public const int ErrMsgFieldNumber = 3;
  private string errMsg_ = "";
  /// <summary>
  /// 失败原因
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrMsg {
    get { return errMsg_; }
    set {
      errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "OptUserID" field.</summary>
  public const int OptUserIDFieldNumber = 4;
  private int optUserID_;
  /// <summary>
  /// 被操作的用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OptUserID {
    get { return optUserID_; }
    set {
      optUserID_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 5;
  private int roomID_;
  /// <summary>
  /// 亲友圈包房id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckClubAdminMember);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckClubAdminMember other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Type != other.Type) return false;
    if (ErrMsg != other.ErrMsg) return false;
    if (OptUserID != other.OptUserID) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
    if (OptUserID != 0) hash ^= OptUserID.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (ErrMsg.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ErrMsg);
    }
    if (OptUserID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(OptUserID);
    }
    if (RoomID != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (ErrMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
    }
    if (OptUserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OptUserID);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckClubAdminMember other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.ErrMsg.Length != 0) {
      ErrMsg = other.ErrMsg;
    }
    if (other.OptUserID != 0) {
      OptUserID = other.OptUserID;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 26: {
          ErrMsg = input.ReadString();
          break;
        }
        case 32: {
          OptUserID = input.ReadInt32();
          break;
        }
        case 40: {
          RoomID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// #define REQ_CLUB_ADMIN_STATUS					//合伙人在游戏端上开启/停止亲友圈（对应微信后台功能）
/// </summary>
public sealed partial class ReqClubAdminStatus : pb::IMessage<ReqClubAdminStatus> {
  private static readonly pb::MessageParser<ReqClubAdminStatus> _parser = new pb::MessageParser<ReqClubAdminStatus>(() => new ReqClubAdminStatus());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqClubAdminStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[194]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqClubAdminStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqClubAdminStatus(ReqClubAdminStatus other) : this() {
    userID_ = other.userID_;
    onoff_ = other.onoff_;
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqClubAdminStatus Clone() {
    return new ReqClubAdminStatus(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 管理员用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "onoff" field.</summary>
  public const int OnoffFieldNumber = 2;
  private int onoff_;
  /// <summary>
  /// 类型 0：正常 1：暂停
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Onoff {
    get { return onoff_; }
    set {
      onoff_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private int roomID_;
  /// <summary>
  /// 牌室id，如果是长老操作，必须填此字段
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqClubAdminStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqClubAdminStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (Onoff != other.Onoff) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (Onoff != 0) hash ^= Onoff.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (Onoff != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Onoff);
    }
    if (RoomID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (Onoff != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Onoff);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqClubAdminStatus other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.Onoff != 0) {
      Onoff = other.Onoff;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          Onoff = input.ReadInt32();
          break;
        }
        case 24: {
          RoomID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class AckClubAdminStatus : pb::IMessage<AckClubAdminStatus> {
  private static readonly pb::MessageParser<AckClubAdminStatus> _parser = new pb::MessageParser<AckClubAdminStatus>(() => new AckClubAdminStatus());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckClubAdminStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[195]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckClubAdminStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckClubAdminStatus(AckClubAdminStatus other) : this() {
    result_ = other.result_;
    onoff_ = other.onoff_;
    errMsg_ = other.errMsg_;
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckClubAdminStatus Clone() {
    return new AckClubAdminStatus(this);
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 进入结果 0-成功 非0-失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "onoff" field.</summary>
  public const int OnoffFieldNumber = 2;
  private int onoff_;
  /// <summary>
  /// 类型  0：正常 1：暂停
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Onoff {
    get { return onoff_; }
    set {
      onoff_ = value;
    }
  }

  /// <summary>Field number for the "ErrMsg" field.</summary>
  public const int ErrMsgFieldNumber = 3;
  private string errMsg_ = "";
  /// <summary>
  /// 失败原因
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrMsg {
    get { return errMsg_; }
    set {
      errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 4;
  private int roomID_;
  /// <summary>
  /// 牌室id，如果是长老操作，必须填此字段
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckClubAdminStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckClubAdminStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Onoff != other.Onoff) return false;
    if (ErrMsg != other.ErrMsg) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Onoff != 0) hash ^= Onoff.GetHashCode();
    if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Onoff != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Onoff);
    }
    if (ErrMsg.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ErrMsg);
    }
    if (RoomID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Onoff != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Onoff);
    }
    if (ErrMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckClubAdminStatus other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Onoff != 0) {
      Onoff = other.Onoff;
    }
    if (other.ErrMsg.Length != 0) {
      ErrMsg = other.ErrMsg;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          Onoff = input.ReadInt32();
          break;
        }
        case 26: {
          ErrMsg = input.ReadString();
          break;
        }
        case 32: {
          RoomID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 玩家简要状态信息
/// </summary>
public sealed partial class UserStatusInfo : pb::IMessage<UserStatusInfo> {
  private static readonly pb::MessageParser<UserStatusInfo> _parser = new pb::MessageParser<UserStatusInfo>(() => new UserStatusInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserStatusInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[196]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserStatusInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserStatusInfo(UserStatusInfo other) : this() {
    userID_ = other.userID_;
    nickName_ = other.nickName_;
    headImgUrl_ = other.headImgUrl_;
    status_ = other.status_;
    updateTime_ = other.updateTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserStatusInfo Clone() {
    return new UserStatusInfo(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "NickName" field.</summary>
  public const int NickNameFieldNumber = 2;
  private string nickName_ = "";
  /// <summary>
  /// 昵称
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NickName {
    get { return nickName_; }
    set {
      nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "HeadImgUrl" field.</summary>
  public const int HeadImgUrlFieldNumber = 3;
  private string headImgUrl_ = "";
  /// <summary>
  /// 头像地址
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HeadImgUrl {
    get { return headImgUrl_; }
    set {
      headImgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Status" field.</summary>
  public const int StatusFieldNumber = 4;
  private int status_;
  /// <summary>
  /// 状态    0离线  1在线   2游戏中
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "UpdateTime" field.</summary>
  public const int UpdateTimeFieldNumber = 5;
  private int updateTime_;
  /// <summary>
  /// 最后更新时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UpdateTime {
    get { return updateTime_; }
    set {
      updateTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserStatusInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserStatusInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (NickName != other.NickName) return false;
    if (HeadImgUrl != other.HeadImgUrl) return false;
    if (Status != other.Status) return false;
    if (UpdateTime != other.UpdateTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (NickName.Length != 0) hash ^= NickName.GetHashCode();
    if (HeadImgUrl.Length != 0) hash ^= HeadImgUrl.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (UpdateTime != 0) hash ^= UpdateTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (NickName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(NickName);
    }
    if (HeadImgUrl.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(HeadImgUrl);
    }
    if (Status != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Status);
    }
    if (UpdateTime != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(UpdateTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (NickName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
    }
    if (HeadImgUrl.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadImgUrl);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (UpdateTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpdateTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserStatusInfo other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.NickName.Length != 0) {
      NickName = other.NickName;
    }
    if (other.HeadImgUrl.Length != 0) {
      HeadImgUrl = other.HeadImgUrl;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.UpdateTime != 0) {
      UpdateTime = other.UpdateTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 18: {
          NickName = input.ReadString();
          break;
        }
        case 26: {
          HeadImgUrl = input.ReadString();
          break;
        }
        case 32: {
          Status = input.ReadInt32();
          break;
        }
        case 40: {
          UpdateTime = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define REQ_CLUB_PLAYER_STATUS				//查询亲友桌成员状态
/// </summary>
public sealed partial class ReqPlayerStatus : pb::IMessage<ReqPlayerStatus> {
  private static readonly pb::MessageParser<ReqPlayerStatus> _parser = new pb::MessageParser<ReqPlayerStatus>(() => new ReqPlayerStatus());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqPlayerStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[197]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqPlayerStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqPlayerStatus(ReqPlayerStatus other) : this() {
    userID_ = other.userID_;
    roomID_ = other.roomID_;
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqPlayerStatus Clone() {
    return new ReqPlayerStatus(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 2;
  private int roomID_;
  /// <summary>
  /// 亲友圈房间id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "Type" field.</summary>
  public const int TypeFieldNumber = 3;
  private int type_;
  /// <summary>
  /// 0：查询全部数据 1：只查询 userid 和status 节约带宽（已经在亲友桌内，头像和你成都有）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqPlayerStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqPlayerStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (RoomID != other.RoomID) return false;
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (RoomID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomID);
    }
    if (Type != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqPlayerStatus other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          RoomID = input.ReadInt32();
          break;
        }
        case 24: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 返回
/// </summary>
public sealed partial class AckPlayerStatus : pb::IMessage<AckPlayerStatus> {
  private static readonly pb::MessageParser<AckPlayerStatus> _parser = new pb::MessageParser<AckPlayerStatus>(() => new AckPlayerStatus());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckPlayerStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[198]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckPlayerStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckPlayerStatus(AckPlayerStatus other) : this() {
    result_ = other.result_;
    errMsg_ = other.errMsg_;
    usis_ = other.usis_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckPlayerStatus Clone() {
    return new AckPlayerStatus(this);
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 退出结果 0-成功 非1-失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "ErrMsg" field.</summary>
  public const int ErrMsgFieldNumber = 2;
  private string errMsg_ = "";
  /// <summary>
  /// 失败原因
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrMsg {
    get { return errMsg_; }
    set {
      errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "usis" field.</summary>
  public const int UsisFieldNumber = 3;
  private static readonly pb::FieldCodec<global::UserStatusInfo> _repeated_usis_codec
      = pb::FieldCodec.ForMessage(26, global::UserStatusInfo.Parser);
  private readonly pbc::RepeatedField<global::UserStatusInfo> usis_ = new pbc::RepeatedField<global::UserStatusInfo>();
  /// <summary>
  /// 成员信息列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UserStatusInfo> Usis {
    get { return usis_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckPlayerStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckPlayerStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (ErrMsg != other.ErrMsg) return false;
    if(!usis_.Equals(other.usis_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
    hash ^= usis_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (ErrMsg.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrMsg);
    }
    usis_.WriteTo(output, _repeated_usis_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (ErrMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
    }
    size += usis_.CalculateSize(_repeated_usis_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckPlayerStatus other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.ErrMsg.Length != 0) {
      ErrMsg = other.ErrMsg;
    }
    usis_.Add(other.usis_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          ErrMsg = input.ReadString();
          break;
        }
        case 26: {
          usis_.AddEntriesFrom(input, _repeated_usis_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define REQ_INVITE_PLAYER				//邀请亲友桌成员加入牌桌
/// </summary>
public sealed partial class ReqInvitePlayer : pb::IMessage<ReqInvitePlayer> {
  private static readonly pb::MessageParser<ReqInvitePlayer> _parser = new pb::MessageParser<ReqInvitePlayer>(() => new ReqInvitePlayer());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqInvitePlayer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[199]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqInvitePlayer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqInvitePlayer(ReqInvitePlayer other) : this() {
    userID_ = other.userID_;
    inviteUserID_ = other.inviteUserID_;
    roomID_ = other.roomID_;
    tableID_ = other.tableID_;
    tableNO_ = other.tableNO_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqInvitePlayer Clone() {
    return new ReqInvitePlayer(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "InviteUserID" field.</summary>
  public const int InviteUserIDFieldNumber = 2;
  private int inviteUserID_;
  /// <summary>
  /// 邀请哪个用户id进入
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int InviteUserID {
    get { return inviteUserID_; }
    set {
      inviteUserID_ = value;
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private int roomID_;
  /// <summary>
  /// 亲友圈房间id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 4;
  private int tableID_;
  /// <summary>
  /// 亲友圈桌id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  /// <summary>Field number for the "TableNO" field.</summary>
  public const int TableNOFieldNumber = 5;
  private int tableNO_;
  /// <summary>
  /// 亲友圈桌序号id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableNO {
    get { return tableNO_; }
    set {
      tableNO_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqInvitePlayer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqInvitePlayer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (InviteUserID != other.InviteUserID) return false;
    if (RoomID != other.RoomID) return false;
    if (TableID != other.TableID) return false;
    if (TableNO != other.TableNO) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (InviteUserID != 0) hash ^= InviteUserID.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    if (TableNO != 0) hash ^= TableNO.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (InviteUserID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(InviteUserID);
    }
    if (RoomID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RoomID);
    }
    if (TableID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TableID);
    }
    if (TableNO != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(TableNO);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (InviteUserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(InviteUserID);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    if (TableNO != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableNO);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqInvitePlayer other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.InviteUserID != 0) {
      InviteUserID = other.InviteUserID;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
    if (other.TableNO != 0) {
      TableNO = other.TableNO;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          InviteUserID = input.ReadInt32();
          break;
        }
        case 24: {
          RoomID = input.ReadInt32();
          break;
        }
        case 32: {
          TableID = input.ReadInt32();
          break;
        }
        case 40: {
          TableNO = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 返回 退出亲友圈
/// </summary>
public sealed partial class AckInvitePlayer : pb::IMessage<AckInvitePlayer> {
  private static readonly pb::MessageParser<AckInvitePlayer> _parser = new pb::MessageParser<AckInvitePlayer>(() => new AckInvitePlayer());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckInvitePlayer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[200]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckInvitePlayer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckInvitePlayer(AckInvitePlayer other) : this() {
    result_ = other.result_;
    errMsg_ = other.errMsg_;
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckInvitePlayer Clone() {
    return new AckInvitePlayer(this);
  }

  /// <summary>Field number for the "Result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// 退出结果 0-成功 非1-失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "ErrMsg" field.</summary>
  public const int ErrMsgFieldNumber = 2;
  private string errMsg_ = "";
  /// <summary>
  /// 失败原因
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrMsg {
    get { return errMsg_; }
    set {
      errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private int roomID_;
  /// <summary>
  /// 亲友圈房间id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckInvitePlayer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckInvitePlayer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (ErrMsg != other.ErrMsg) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (ErrMsg.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrMsg);
    }
    if (RoomID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (ErrMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckInvitePlayer other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.ErrMsg.Length != 0) {
      ErrMsg = other.ErrMsg;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          ErrMsg = input.ReadString();
          break;
        }
        case 24: {
          RoomID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//
/// #define NTF_CLUB_INVITE_PLAYER				//邀请亲友桌成员加入牌桌
/// </summary>
public sealed partial class NtfInvitePlayer : pb::IMessage<NtfInvitePlayer> {
  private static readonly pb::MessageParser<NtfInvitePlayer> _parser = new pb::MessageParser<NtfInvitePlayer>(() => new NtfInvitePlayer());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NtfInvitePlayer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[201]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfInvitePlayer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfInvitePlayer(NtfInvitePlayer other) : this() {
    userID_ = other.userID_;
    nickName_ = other.nickName_;
    headImgUrl_ = other.headImgUrl_;
    roomID_ = other.roomID_;
    clubRoomName_ = other.clubRoomName_;
    clubRuleStr_ = other.clubRuleStr_;
    tableID_ = other.tableID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfInvitePlayer Clone() {
    return new NtfInvitePlayer(this);
  }

  /// <summary>Field number for the "UserID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  /// <summary>
  /// 邀请的用户id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "NickName" field.</summary>
  public const int NickNameFieldNumber = 2;
  private string nickName_ = "";
  /// <summary>
  /// 昵称
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NickName {
    get { return nickName_; }
    set {
      nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "HeadImgUrl" field.</summary>
  public const int HeadImgUrlFieldNumber = 3;
  private string headImgUrl_ = "";
  /// <summary>
  /// 头像地址
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HeadImgUrl {
    get { return headImgUrl_; }
    set {
      headImgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 4;
  private int roomID_;
  /// <summary>
  /// 亲友桌房间id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "ClubRoomName" field.</summary>
  public const int ClubRoomNameFieldNumber = 5;
  private string clubRoomName_ = "";
  /// <summary>
  /// 亲友圈名字
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ClubRoomName {
    get { return clubRoomName_; }
    set {
      clubRoomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ClubRuleStr" field.</summary>
  public const int ClubRuleStrFieldNumber = 6;
  private string clubRuleStr_ = "";
  /// <summary>
  /// 亲友圈规则
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ClubRuleStr {
    get { return clubRuleStr_; }
    set {
      clubRuleStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "TableID" field.</summary>
  public const int TableIDFieldNumber = 7;
  private int tableID_;
  /// <summary>
  /// 亲友圈桌id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableID {
    get { return tableID_; }
    set {
      tableID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NtfInvitePlayer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NtfInvitePlayer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (NickName != other.NickName) return false;
    if (HeadImgUrl != other.HeadImgUrl) return false;
    if (RoomID != other.RoomID) return false;
    if (ClubRoomName != other.ClubRoomName) return false;
    if (ClubRuleStr != other.ClubRuleStr) return false;
    if (TableID != other.TableID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (NickName.Length != 0) hash ^= NickName.GetHashCode();
    if (HeadImgUrl.Length != 0) hash ^= HeadImgUrl.GetHashCode();
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    if (ClubRoomName.Length != 0) hash ^= ClubRoomName.GetHashCode();
    if (ClubRuleStr.Length != 0) hash ^= ClubRuleStr.GetHashCode();
    if (TableID != 0) hash ^= TableID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (NickName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(NickName);
    }
    if (HeadImgUrl.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(HeadImgUrl);
    }
    if (RoomID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RoomID);
    }
    if (ClubRoomName.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(ClubRoomName);
    }
    if (ClubRuleStr.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(ClubRuleStr);
    }
    if (TableID != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(TableID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (NickName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
    }
    if (HeadImgUrl.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadImgUrl);
    }
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    if (ClubRoomName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClubRoomName);
    }
    if (ClubRuleStr.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClubRuleStr);
    }
    if (TableID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NtfInvitePlayer other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.NickName.Length != 0) {
      NickName = other.NickName;
    }
    if (other.HeadImgUrl.Length != 0) {
      HeadImgUrl = other.HeadImgUrl;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
    if (other.ClubRoomName.Length != 0) {
      ClubRoomName = other.ClubRoomName;
    }
    if (other.ClubRuleStr.Length != 0) {
      ClubRuleStr = other.ClubRuleStr;
    }
    if (other.TableID != 0) {
      TableID = other.TableID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 18: {
          NickName = input.ReadString();
          break;
        }
        case 26: {
          HeadImgUrl = input.ReadString();
          break;
        }
        case 32: {
          RoomID = input.ReadInt32();
          break;
        }
        case 42: {
          ClubRoomName = input.ReadString();
          break;
        }
        case 50: {
          ClubRuleStr = input.ReadString();
          break;
        }
        case 56: {
          TableID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// ------------------------------------------------------------------------------------------//	
/// #define NTF_CLUB_PLAYER_STATUS		//初始化用户状态数据
/// </summary>
public sealed partial class NtfClubPlayerStatus : pb::IMessage<NtfClubPlayerStatus> {
  private static readonly pb::MessageParser<NtfClubPlayerStatus> _parser = new pb::MessageParser<NtfClubPlayerStatus>(() => new NtfClubPlayerStatus());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NtfClubPlayerStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[202]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubPlayerStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubPlayerStatus(NtfClubPlayerStatus other) : this() {
    roomID_ = other.roomID_;
    usis_ = other.usis_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NtfClubPlayerStatus Clone() {
    return new NtfClubPlayerStatus(this);
  }

  /// <summary>Field number for the "RoomID" field.</summary>
  public const int RoomIDFieldNumber = 1;
  private int roomID_;
  /// <summary>
  /// 亲友圈包间id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "usis" field.</summary>
  public const int UsisFieldNumber = 2;
  private static readonly pb::FieldCodec<global::UserStatusInfo> _repeated_usis_codec
      = pb::FieldCodec.ForMessage(18, global::UserStatusInfo.Parser);
  private readonly pbc::RepeatedField<global::UserStatusInfo> usis_ = new pbc::RepeatedField<global::UserStatusInfo>();
  /// <summary>
  /// 玩家列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UserStatusInfo> Usis {
    get { return usis_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NtfClubPlayerStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NtfClubPlayerStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomID != other.RoomID) return false;
    if(!usis_.Equals(other.usis_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    hash ^= usis_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomID);
    }
    usis_.WriteTo(output, _repeated_usis_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    size += usis_.CalculateSize(_repeated_usis_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NtfClubPlayerStatus other) {
    if (other == null) {
      return;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
    usis_.Add(other.usis_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomID = input.ReadInt32();
          break;
        }
        case 18: {
          usis_.AddEntriesFrom(input, _repeated_usis_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
