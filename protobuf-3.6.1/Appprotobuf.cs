// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appprotobuf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from appprotobuf.proto</summary>
public static partial class AppprotobufReflection {

  #region Descriptor
  /// <summary>File descriptor for appprotobuf.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static AppprotobufReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChFhcHBwcm90b2J1Zi5wcm90byIxCghSZXFMb2dpbhITCgtBY2NvdW50TmFt",
          "ZRgBIAEoCRIQCghQYXNzd29yZBgCIAEoCSJGChJBY2tFbnRlclJvb21SZXN1",
          "bHQSDgoGcmVzdWx0GAEgASgFEiAKC3BsYXllckluZm9zGAIgAygLMgsuUGxh",
          "eWVySW5mbyI4ChVBY2tOZXdQbGF5ZXJFbnRlclJvb20SHwoKcGxheWVySW5m",
          "bxgBIAEoCzILLlBsYXllckluZm8iQAoKUGxheWVySW5mbxIMCgRTZWF0GAEg",
          "ASgFEhMKC0FjY291bnROYW1lGAIgASgJEg8KB0NvaW5OdW0YAyABKAUiJQoU",
          "UmVxUmVhZHlGb3JTdGFydEdhbWUSDQoFcmVhZHkYASABKAgiDgoMQWNrR2Ft",
          "ZVN0YXJ0IlgKCERlYWxDYXJkEhEKCXN0YXJ0U2VhdBgBIAEoBRITCgtsZWZ0",
          "Q2FyZE51bRgCIAMoBRIRCgloYW5kQ2FyZHMYAyADKAUSEQoJdGhpbmtUaW1l",
          "GAQgASgFIlIKC0NhbGxMb3JkTXNnEhcKD2N1cnJlbnRDYWxsU2VhdBgBIAEo",
          "BRIYChBjdXJyZW50Q2FsbFN0YXRlGAIgASgFEhAKCHdhaXRUaW1lGAMgASgF",
          "Ij0KDkNhbGxMb3JkUmVzdWx0EhMKC29wZXJhdGVTZWF0GAEgASgFEhYKDmNh",
          "bGxMb3JkUmVzdWx0GAIgASgFIiEKDExvcmRDYXJkc01zZxIRCglsb3JkQ2Fy",
          "ZHMYASADKAUiMwoRU2V0T3BlcmF0YWJsZVNlYXQSDAoEc2VhdBgBIAEoBRIQ",
          "Cgh3YWl0VGltZRgCIAEoBSInCg9SZXFUYWtlT3V0Q2FyZHMSFAoMdGFrZW91",
          "dENhcmRzGAEgAygFIoEBCg9BY2tUYWtlT3V0Q2FyZHMSDAoEc2VhdBgBIAEo",
          "BRIQCghuZXh0U2VhdBgCIAEoBRIRCglvcGVyYXRpb24YAyABKAUSFAoMdGFr",
          "ZW91dENhcmRzGAQgAygFEhEKCXRoaW5rVGltZRgFIAEoBRISCgppc05ld1Jv",
          "dW5kGAYgASgIYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqLogin), global::ReqLogin.Parser, new[]{ "AccountName", "Password" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckEnterRoomResult), global::AckEnterRoomResult.Parser, new[]{ "Result", "PlayerInfos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckNewPlayerEnterRoom), global::AckNewPlayerEnterRoom.Parser, new[]{ "PlayerInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerInfo), global::PlayerInfo.Parser, new[]{ "Seat", "AccountName", "CoinNum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqReadyForStartGame), global::ReqReadyForStartGame.Parser, new[]{ "Ready" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckGameStart), global::AckGameStart.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DealCard), global::DealCard.Parser, new[]{ "StartSeat", "LeftCardNum", "HandCards", "ThinkTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CallLordMsg), global::CallLordMsg.Parser, new[]{ "CurrentCallSeat", "CurrentCallState", "WaitTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CallLordResult), global::CallLordResult.Parser, new[]{ "OperateSeat", "CallLordResult_" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LordCardsMsg), global::LordCardsMsg.Parser, new[]{ "LordCards" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetOperatableSeat), global::SetOperatableSeat.Parser, new[]{ "Seat", "WaitTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqTakeOutCards), global::ReqTakeOutCards.Parser, new[]{ "TakeoutCards" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AckTakeOutCards), global::AckTakeOutCards.Parser, new[]{ "Seat", "NextSeat", "Operation", "TakeoutCards", "ThinkTime", "IsNewRound" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class ReqLogin : pb::IMessage<ReqLogin> {
  private static readonly pb::MessageParser<ReqLogin> _parser = new pb::MessageParser<ReqLogin>(() => new ReqLogin());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqLogin> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqLogin() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqLogin(ReqLogin other) : this() {
    accountName_ = other.accountName_;
    password_ = other.password_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqLogin Clone() {
    return new ReqLogin(this);
  }

  /// <summary>Field number for the "AccountName" field.</summary>
  public const int AccountNameFieldNumber = 1;
  private string accountName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AccountName {
    get { return accountName_; }
    set {
      accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private string password_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqLogin);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqLogin other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AccountName != other.AccountName) return false;
    if (Password != other.Password) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AccountName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(AccountName);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Password);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AccountName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqLogin other) {
    if (other == null) {
      return;
    }
    if (other.AccountName.Length != 0) {
      AccountName = other.AccountName;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          AccountName = input.ReadString();
          break;
        }
        case 18: {
          Password = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class AckEnterRoomResult : pb::IMessage<AckEnterRoomResult> {
  private static readonly pb::MessageParser<AckEnterRoomResult> _parser = new pb::MessageParser<AckEnterRoomResult>(() => new AckEnterRoomResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckEnterRoomResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckEnterRoomResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckEnterRoomResult(AckEnterRoomResult other) : this() {
    result_ = other.result_;
    playerInfos_ = other.playerInfos_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckEnterRoomResult Clone() {
    return new AckEnterRoomResult(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "playerInfos" field.</summary>
  public const int PlayerInfosFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PlayerInfo> _repeated_playerInfos_codec
      = pb::FieldCodec.ForMessage(18, global::PlayerInfo.Parser);
  private readonly pbc::RepeatedField<global::PlayerInfo> playerInfos_ = new pbc::RepeatedField<global::PlayerInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerInfo> PlayerInfos {
    get { return playerInfos_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckEnterRoomResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckEnterRoomResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!playerInfos_.Equals(other.playerInfos_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= playerInfos_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckEnterRoomResult other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    playerInfos_.Add(other.playerInfos_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class AckNewPlayerEnterRoom : pb::IMessage<AckNewPlayerEnterRoom> {
  private static readonly pb::MessageParser<AckNewPlayerEnterRoom> _parser = new pb::MessageParser<AckNewPlayerEnterRoom>(() => new AckNewPlayerEnterRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckNewPlayerEnterRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckNewPlayerEnterRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckNewPlayerEnterRoom(AckNewPlayerEnterRoom other) : this() {
    PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckNewPlayerEnterRoom Clone() {
    return new AckNewPlayerEnterRoom(this);
  }

  /// <summary>Field number for the "playerInfo" field.</summary>
  public const int PlayerInfoFieldNumber = 1;
  private global::PlayerInfo playerInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerInfo PlayerInfo {
    get { return playerInfo_; }
    set {
      playerInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckNewPlayerEnterRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckNewPlayerEnterRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (playerInfo_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(PlayerInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (playerInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckNewPlayerEnterRoom other) {
    if (other == null) {
      return;
    }
    if (other.playerInfo_ != null) {
      if (playerInfo_ == null) {
        playerInfo_ = new global::PlayerInfo();
      }
      PlayerInfo.MergeFrom(other.PlayerInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (playerInfo_ == null) {
            playerInfo_ = new global::PlayerInfo();
          }
          input.ReadMessage(playerInfo_);
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
  private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo(PlayerInfo other) : this() {
    seat_ = other.seat_;
    accountName_ = other.accountName_;
    coinNum_ = other.coinNum_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo Clone() {
    return new PlayerInfo(this);
  }

  /// <summary>Field number for the "Seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "AccountName" field.</summary>
  public const int AccountNameFieldNumber = 2;
  private string accountName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AccountName {
    get { return accountName_; }
    set {
      accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "CoinNum" field.</summary>
  public const int CoinNumFieldNumber = 3;
  private int coinNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CoinNum {
    get { return coinNum_; }
    set {
      coinNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (AccountName != other.AccountName) return false;
    if (CoinNum != other.CoinNum) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
    if (CoinNum != 0) hash ^= CoinNum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (AccountName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(AccountName);
    }
    if (CoinNum != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(CoinNum);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (AccountName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
    }
    if (CoinNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoinNum);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerInfo other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.AccountName.Length != 0) {
      AccountName = other.AccountName;
    }
    if (other.CoinNum != 0) {
      CoinNum = other.CoinNum;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 18: {
          AccountName = input.ReadString();
          break;
        }
        case 24: {
          CoinNum = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ReqReadyForStartGame : pb::IMessage<ReqReadyForStartGame> {
  private static readonly pb::MessageParser<ReqReadyForStartGame> _parser = new pb::MessageParser<ReqReadyForStartGame>(() => new ReqReadyForStartGame());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqReadyForStartGame> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqReadyForStartGame() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqReadyForStartGame(ReqReadyForStartGame other) : this() {
    ready_ = other.ready_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqReadyForStartGame Clone() {
    return new ReqReadyForStartGame(this);
  }

  /// <summary>Field number for the "ready" field.</summary>
  public const int ReadyFieldNumber = 1;
  private bool ready_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Ready {
    get { return ready_; }
    set {
      ready_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqReadyForStartGame);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqReadyForStartGame other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Ready != other.Ready) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Ready != false) hash ^= Ready.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Ready != false) {
      output.WriteRawTag(8);
      output.WriteBool(Ready);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Ready != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqReadyForStartGame other) {
    if (other == null) {
      return;
    }
    if (other.Ready != false) {
      Ready = other.Ready;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Ready = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class AckGameStart : pb::IMessage<AckGameStart> {
  private static readonly pb::MessageParser<AckGameStart> _parser = new pb::MessageParser<AckGameStart>(() => new AckGameStart());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckGameStart> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckGameStart() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckGameStart(AckGameStart other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckGameStart Clone() {
    return new AckGameStart(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckGameStart);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckGameStart other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckGameStart other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class DealCard : pb::IMessage<DealCard> {
  private static readonly pb::MessageParser<DealCard> _parser = new pb::MessageParser<DealCard>(() => new DealCard());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DealCard> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DealCard() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DealCard(DealCard other) : this() {
    startSeat_ = other.startSeat_;
    leftCardNum_ = other.leftCardNum_.Clone();
    handCards_ = other.handCards_.Clone();
    thinkTime_ = other.thinkTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DealCard Clone() {
    return new DealCard(this);
  }

  /// <summary>Field number for the "startSeat" field.</summary>
  public const int StartSeatFieldNumber = 1;
  private int startSeat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StartSeat {
    get { return startSeat_; }
    set {
      startSeat_ = value;
    }
  }

  /// <summary>Field number for the "leftCardNum" field.</summary>
  public const int LeftCardNumFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_leftCardNum_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> leftCardNum_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> LeftCardNum {
    get { return leftCardNum_; }
  }

  /// <summary>Field number for the "handCards" field.</summary>
  public const int HandCardsFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_handCards_codec
      = pb::FieldCodec.ForInt32(26);
  private readonly pbc::RepeatedField<int> handCards_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> HandCards {
    get { return handCards_; }
  }

  /// <summary>Field number for the "thinkTime" field.</summary>
  public const int ThinkTimeFieldNumber = 4;
  private int thinkTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ThinkTime {
    get { return thinkTime_; }
    set {
      thinkTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DealCard);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DealCard other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StartSeat != other.StartSeat) return false;
    if(!leftCardNum_.Equals(other.leftCardNum_)) return false;
    if(!handCards_.Equals(other.handCards_)) return false;
    if (ThinkTime != other.ThinkTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StartSeat != 0) hash ^= StartSeat.GetHashCode();
    hash ^= leftCardNum_.GetHashCode();
    hash ^= handCards_.GetHashCode();
    if (ThinkTime != 0) hash ^= ThinkTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StartSeat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(StartSeat);
    }
    leftCardNum_.WriteTo(output, _repeated_leftCardNum_codec);
    handCards_.WriteTo(output, _repeated_handCards_codec);
    if (ThinkTime != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(ThinkTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StartSeat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartSeat);
    }
    size += leftCardNum_.CalculateSize(_repeated_leftCardNum_codec);
    size += handCards_.CalculateSize(_repeated_handCards_codec);
    if (ThinkTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThinkTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DealCard other) {
    if (other == null) {
      return;
    }
    if (other.StartSeat != 0) {
      StartSeat = other.StartSeat;
    }
    leftCardNum_.Add(other.leftCardNum_);
    handCards_.Add(other.handCards_);
    if (other.ThinkTime != 0) {
      ThinkTime = other.ThinkTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          StartSeat = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          leftCardNum_.AddEntriesFrom(input, _repeated_leftCardNum_codec);
          break;
        }
        case 26:
        case 24: {
          handCards_.AddEntriesFrom(input, _repeated_handCards_codec);
          break;
        }
        case 32: {
          ThinkTime = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CallLordMsg : pb::IMessage<CallLordMsg> {
  private static readonly pb::MessageParser<CallLordMsg> _parser = new pb::MessageParser<CallLordMsg>(() => new CallLordMsg());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CallLordMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CallLordMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CallLordMsg(CallLordMsg other) : this() {
    currentCallSeat_ = other.currentCallSeat_;
    currentCallState_ = other.currentCallState_;
    waitTime_ = other.waitTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CallLordMsg Clone() {
    return new CallLordMsg(this);
  }

  /// <summary>Field number for the "currentCallSeat" field.</summary>
  public const int CurrentCallSeatFieldNumber = 1;
  private int currentCallSeat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrentCallSeat {
    get { return currentCallSeat_; }
    set {
      currentCallSeat_ = value;
    }
  }

  /// <summary>Field number for the "currentCallState" field.</summary>
  public const int CurrentCallStateFieldNumber = 2;
  private int currentCallState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrentCallState {
    get { return currentCallState_; }
    set {
      currentCallState_ = value;
    }
  }

  /// <summary>Field number for the "waitTime" field.</summary>
  public const int WaitTimeFieldNumber = 3;
  private int waitTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WaitTime {
    get { return waitTime_; }
    set {
      waitTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CallLordMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CallLordMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CurrentCallSeat != other.CurrentCallSeat) return false;
    if (CurrentCallState != other.CurrentCallState) return false;
    if (WaitTime != other.WaitTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CurrentCallSeat != 0) hash ^= CurrentCallSeat.GetHashCode();
    if (CurrentCallState != 0) hash ^= CurrentCallState.GetHashCode();
    if (WaitTime != 0) hash ^= WaitTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CurrentCallSeat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(CurrentCallSeat);
    }
    if (CurrentCallState != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CurrentCallState);
    }
    if (WaitTime != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(WaitTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CurrentCallSeat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentCallSeat);
    }
    if (CurrentCallState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentCallState);
    }
    if (WaitTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CallLordMsg other) {
    if (other == null) {
      return;
    }
    if (other.CurrentCallSeat != 0) {
      CurrentCallSeat = other.CurrentCallSeat;
    }
    if (other.CurrentCallState != 0) {
      CurrentCallState = other.CurrentCallState;
    }
    if (other.WaitTime != 0) {
      WaitTime = other.WaitTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          CurrentCallSeat = input.ReadInt32();
          break;
        }
        case 16: {
          CurrentCallState = input.ReadInt32();
          break;
        }
        case 24: {
          WaitTime = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CallLordResult : pb::IMessage<CallLordResult> {
  private static readonly pb::MessageParser<CallLordResult> _parser = new pb::MessageParser<CallLordResult>(() => new CallLordResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CallLordResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CallLordResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CallLordResult(CallLordResult other) : this() {
    operateSeat_ = other.operateSeat_;
    callLordResult_ = other.callLordResult_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CallLordResult Clone() {
    return new CallLordResult(this);
  }

  /// <summary>Field number for the "operateSeat" field.</summary>
  public const int OperateSeatFieldNumber = 1;
  private int operateSeat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OperateSeat {
    get { return operateSeat_; }
    set {
      operateSeat_ = value;
    }
  }

  /// <summary>Field number for the "callLordResult" field.</summary>
  public const int CallLordResult_FieldNumber = 2;
  private int callLordResult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CallLordResult_ {
    get { return callLordResult_; }
    set {
      callLordResult_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CallLordResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CallLordResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OperateSeat != other.OperateSeat) return false;
    if (CallLordResult_ != other.CallLordResult_) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (OperateSeat != 0) hash ^= OperateSeat.GetHashCode();
    if (CallLordResult_ != 0) hash ^= CallLordResult_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (OperateSeat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(OperateSeat);
    }
    if (CallLordResult_ != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CallLordResult_);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (OperateSeat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperateSeat);
    }
    if (CallLordResult_ != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallLordResult_);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CallLordResult other) {
    if (other == null) {
      return;
    }
    if (other.OperateSeat != 0) {
      OperateSeat = other.OperateSeat;
    }
    if (other.CallLordResult_ != 0) {
      CallLordResult_ = other.CallLordResult_;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          OperateSeat = input.ReadInt32();
          break;
        }
        case 16: {
          CallLordResult_ = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class LordCardsMsg : pb::IMessage<LordCardsMsg> {
  private static readonly pb::MessageParser<LordCardsMsg> _parser = new pb::MessageParser<LordCardsMsg>(() => new LordCardsMsg());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LordCardsMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LordCardsMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LordCardsMsg(LordCardsMsg other) : this() {
    lordCards_ = other.lordCards_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LordCardsMsg Clone() {
    return new LordCardsMsg(this);
  }

  /// <summary>Field number for the "lordCards" field.</summary>
  public const int LordCardsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_lordCards_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> lordCards_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> LordCards {
    get { return lordCards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LordCardsMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LordCardsMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!lordCards_.Equals(other.lordCards_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= lordCards_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    lordCards_.WriteTo(output, _repeated_lordCards_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += lordCards_.CalculateSize(_repeated_lordCards_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LordCardsMsg other) {
    if (other == null) {
      return;
    }
    lordCards_.Add(other.lordCards_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          lordCards_.AddEntriesFrom(input, _repeated_lordCards_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SetOperatableSeat : pb::IMessage<SetOperatableSeat> {
  private static readonly pb::MessageParser<SetOperatableSeat> _parser = new pb::MessageParser<SetOperatableSeat>(() => new SetOperatableSeat());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SetOperatableSeat> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetOperatableSeat() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetOperatableSeat(SetOperatableSeat other) : this() {
    seat_ = other.seat_;
    waitTime_ = other.waitTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetOperatableSeat Clone() {
    return new SetOperatableSeat(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "waitTime" field.</summary>
  public const int WaitTimeFieldNumber = 2;
  private int waitTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WaitTime {
    get { return waitTime_; }
    set {
      waitTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SetOperatableSeat);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SetOperatableSeat other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (WaitTime != other.WaitTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (WaitTime != 0) hash ^= WaitTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (WaitTime != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(WaitTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (WaitTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SetOperatableSeat other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.WaitTime != 0) {
      WaitTime = other.WaitTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 16: {
          WaitTime = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ReqTakeOutCards : pb::IMessage<ReqTakeOutCards> {
  private static readonly pb::MessageParser<ReqTakeOutCards> _parser = new pb::MessageParser<ReqTakeOutCards>(() => new ReqTakeOutCards());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqTakeOutCards> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqTakeOutCards() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqTakeOutCards(ReqTakeOutCards other) : this() {
    takeoutCards_ = other.takeoutCards_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqTakeOutCards Clone() {
    return new ReqTakeOutCards(this);
  }

  /// <summary>Field number for the "takeoutCards" field.</summary>
  public const int TakeoutCardsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_takeoutCards_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> takeoutCards_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> TakeoutCards {
    get { return takeoutCards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqTakeOutCards);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqTakeOutCards other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!takeoutCards_.Equals(other.takeoutCards_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= takeoutCards_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    takeoutCards_.WriteTo(output, _repeated_takeoutCards_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += takeoutCards_.CalculateSize(_repeated_takeoutCards_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqTakeOutCards other) {
    if (other == null) {
      return;
    }
    takeoutCards_.Add(other.takeoutCards_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          takeoutCards_.AddEntriesFrom(input, _repeated_takeoutCards_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class AckTakeOutCards : pb::IMessage<AckTakeOutCards> {
  private static readonly pb::MessageParser<AckTakeOutCards> _parser = new pb::MessageParser<AckTakeOutCards>(() => new AckTakeOutCards());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckTakeOutCards> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AppprotobufReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckTakeOutCards() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckTakeOutCards(AckTakeOutCards other) : this() {
    seat_ = other.seat_;
    nextSeat_ = other.nextSeat_;
    operation_ = other.operation_;
    takeoutCards_ = other.takeoutCards_.Clone();
    thinkTime_ = other.thinkTime_;
    isNewRound_ = other.isNewRound_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckTakeOutCards Clone() {
    return new AckTakeOutCards(this);
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 1;
  private int seat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "nextSeat" field.</summary>
  public const int NextSeatFieldNumber = 2;
  private int nextSeat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NextSeat {
    get { return nextSeat_; }
    set {
      nextSeat_ = value;
    }
  }

  /// <summary>Field number for the "operation" field.</summary>
  public const int OperationFieldNumber = 3;
  private int operation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Operation {
    get { return operation_; }
    set {
      operation_ = value;
    }
  }

  /// <summary>Field number for the "takeoutCards" field.</summary>
  public const int TakeoutCardsFieldNumber = 4;
  private static readonly pb::FieldCodec<int> _repeated_takeoutCards_codec
      = pb::FieldCodec.ForInt32(34);
  private readonly pbc::RepeatedField<int> takeoutCards_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> TakeoutCards {
    get { return takeoutCards_; }
  }

  /// <summary>Field number for the "thinkTime" field.</summary>
  public const int ThinkTimeFieldNumber = 5;
  private int thinkTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ThinkTime {
    get { return thinkTime_; }
    set {
      thinkTime_ = value;
    }
  }

  /// <summary>Field number for the "isNewRound" field.</summary>
  public const int IsNewRoundFieldNumber = 6;
  private bool isNewRound_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsNewRound {
    get { return isNewRound_; }
    set {
      isNewRound_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckTakeOutCards);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckTakeOutCards other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seat != other.Seat) return false;
    if (NextSeat != other.NextSeat) return false;
    if (Operation != other.Operation) return false;
    if(!takeoutCards_.Equals(other.takeoutCards_)) return false;
    if (ThinkTime != other.ThinkTime) return false;
    if (IsNewRound != other.IsNewRound) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (NextSeat != 0) hash ^= NextSeat.GetHashCode();
    if (Operation != 0) hash ^= Operation.GetHashCode();
    hash ^= takeoutCards_.GetHashCode();
    if (ThinkTime != 0) hash ^= ThinkTime.GetHashCode();
    if (IsNewRound != false) hash ^= IsNewRound.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seat != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seat);
    }
    if (NextSeat != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(NextSeat);
    }
    if (Operation != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Operation);
    }
    takeoutCards_.WriteTo(output, _repeated_takeoutCards_codec);
    if (ThinkTime != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(ThinkTime);
    }
    if (IsNewRound != false) {
      output.WriteRawTag(48);
      output.WriteBool(IsNewRound);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (NextSeat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextSeat);
    }
    if (Operation != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Operation);
    }
    size += takeoutCards_.CalculateSize(_repeated_takeoutCards_codec);
    if (ThinkTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThinkTime);
    }
    if (IsNewRound != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckTakeOutCards other) {
    if (other == null) {
      return;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.NextSeat != 0) {
      NextSeat = other.NextSeat;
    }
    if (other.Operation != 0) {
      Operation = other.Operation;
    }
    takeoutCards_.Add(other.takeoutCards_);
    if (other.ThinkTime != 0) {
      ThinkTime = other.ThinkTime;
    }
    if (other.IsNewRound != false) {
      IsNewRound = other.IsNewRound;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seat = input.ReadInt32();
          break;
        }
        case 16: {
          NextSeat = input.ReadInt32();
          break;
        }
        case 24: {
          Operation = input.ReadInt32();
          break;
        }
        case 34:
        case 32: {
          takeoutCards_.AddEntriesFrom(input, _repeated_takeoutCards_codec);
          break;
        }
        case 40: {
          ThinkTime = input.ReadInt32();
          break;
        }
        case 48: {
          IsNewRound = input.ReadBool();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
